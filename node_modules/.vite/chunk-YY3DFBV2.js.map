{
  "version": 3,
  "sources": ["../@vue/shared/dist/shared.esm-bundler.js", "../@vue/reactivity/dist/reactivity.esm-bundler.js", "../@vue/runtime-core/dist/runtime-core.esm-bundler.js", "../@vue/runtime-dom/dist/runtime-dom.esm-bundler.js", "../@babel/parser/src/util/whitespace.js", "../@babel/parser/src/util/location.js", "../@babel/parser/src/parser/base.js", "../@babel/parser/src/parser/comments.js", "../@babel/parser/src/parser/error-codes.js", "../@babel/parser/src/parser/error-message.js", "../@babel/parser/src/parser/error.js", "../@babel/parser/src/plugins/estree.js", "../@babel/parser/src/tokenizer/context.js", "../@babel/parser/src/tokenizer/types.js", "../@babel/babel-helper-validator-identifier/src/identifier.ts", "../@babel/babel-helper-validator-identifier/src/keyword.ts", "../@babel/parser/src/util/identifier.js", "../@babel/parser/src/util/scopeflags.js", "../@babel/parser/src/util/scope.js", "../@babel/parser/src/plugins/flow/scope.js", "../@babel/parser/src/tokenizer/state.js", "../@babel/parser/src/tokenizer/index.js", "../@babel/parser/src/util/class-scope.js", "../@babel/parser/src/util/expression-scope.js", "../@babel/parser/src/util/production-parameter.js", "../@babel/parser/src/parser/util.js", "../@babel/parser/src/parser/node.js", "../@babel/parser/src/plugins/flow/index.js", "../@babel/parser/src/plugins/jsx/xhtml.js", "../@babel/parser/src/plugins/jsx/index.js", "../@babel/parser/src/plugins/typescript/scope.js", "../@babel/parser/src/plugins/typescript/index.js", "../@babel/parser/src/plugins/placeholders.js", "../@babel/parser/src/plugins/v8intrinsic.js", "../@babel/parser/src/plugin-utils.js", "../@babel/parser/src/options.js", "../@babel/parser/src/parser/lval.js", "../@babel/parser/src/parser/expression.js", "../@babel/parser/src/parser/statement.js", "../@babel/parser/src/parser/index.js", "../@babel/parser/src/index.js", "../@vue/compiler-core/dist/compiler-core.esm-bundler.js", "../@vue/compiler-dom/dist/compiler-dom.esm-bundler.js", "../vue/dist/vue.esm-bundler.js"],
  "sourcesContent": ["/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nfunction makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(',');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\r\n}\n\n/**\r\n * dev only flag -> name mapping\r\n */\r\nconst PatchFlagNames = {\r\n    [1 /* TEXT */]: `TEXT`,\r\n    [2 /* CLASS */]: `CLASS`,\r\n    [4 /* STYLE */]: `STYLE`,\r\n    [8 /* PROPS */]: `PROPS`,\r\n    [16 /* FULL_PROPS */]: `FULL_PROPS`,\r\n    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,\r\n    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,\r\n    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,\r\n    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,\r\n    [512 /* NEED_PATCH */]: `NEED_PATCH`,\r\n    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,\r\n    [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,\r\n    [-1 /* HOISTED */]: `HOISTED`,\r\n    [-2 /* BAIL */]: `BAIL`\r\n};\n\n/**\r\n * Dev only\r\n */\r\nconst slotFlagsText = {\r\n    [1 /* STABLE */]: 'STABLE',\r\n    [2 /* DYNAMIC */]: 'DYNAMIC',\r\n    [3 /* FORWARDED */]: 'FORWARDED'\r\n};\n\nconst GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +\r\n    'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +\r\n    'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt';\r\nconst isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);\n\nconst range = 2;\r\nfunction generateCodeFrame(source, start = 0, end = source.length) {\r\n    // Split the content into individual lines but capture the newline sequence\r\n    // that separated each line. This is important because the actual sequence is\r\n    // needed to properly take into account the full line length for offset\r\n    // comparison\r\n    let lines = source.split(/(\\r?\\n)/);\r\n    // Separate the lines and newline sequences into separate arrays for easier referencing\r\n    const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);\r\n    lines = lines.filter((_, idx) => idx % 2 === 0);\r\n    let count = 0;\r\n    const res = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        count +=\r\n            lines[i].length +\r\n                ((newlineSequences[i] && newlineSequences[i].length) || 0);\r\n        if (count >= start) {\r\n            for (let j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                const line = j + 1;\r\n                res.push(`${line}${' '.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);\r\n                const lineLength = lines[j].length;\r\n                const newLineSeqLength = (newlineSequences[j] && newlineSequences[j].length) || 0;\r\n                if (j === i) {\r\n                    // push underline\r\n                    const pad = start - (count - (lineLength + newLineSeqLength));\r\n                    const length = Math.max(1, end > count ? lineLength - pad : end - start);\r\n                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        const length = Math.max(Math.min(end - count, lineLength), 1);\r\n                        res.push(`   |  ` + '^'.repeat(length));\r\n                    }\r\n                    count += lineLength + newLineSeqLength;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join('\\n');\r\n}\n\n/**\r\n * On the client we only need to offer special cases for boolean attributes that\r\n * have different names from their corresponding dom properties:\r\n * - itemscope -> N/A\r\n * - allowfullscreen -> allowFullscreen\r\n * - formnovalidate -> formNoValidate\r\n * - ismap -> isMap\r\n * - nomodule -> noModule\r\n * - novalidate -> noValidate\r\n * - readonly -> readOnly\r\n */\r\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\r\nconst isSpecialBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs);\r\n/**\r\n * The full list is needed during SSR to produce the correct initial markup.\r\n */\r\nconst isBooleanAttr = /*#__PURE__*/ makeMap(specialBooleanAttrs +\r\n    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +\r\n    `loop,open,required,reversed,scoped,seamless,` +\r\n    `checked,muted,multiple,selected`);\r\n/**\r\n * Boolean attributes should be included if the value is truthy or ''.\r\n * e.g. <select multiple> compiles to { multiple: '' }\r\n */\r\nfunction includeBooleanAttr(value) {\r\n    return !!value || value === '';\r\n}\r\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/;\r\nconst attrValidationCache = {};\r\nfunction isSSRSafeAttrName(name) {\r\n    if (attrValidationCache.hasOwnProperty(name)) {\r\n        return attrValidationCache[name];\r\n    }\r\n    const isUnsafe = unsafeAttrCharRE.test(name);\r\n    if (isUnsafe) {\r\n        console.error(`unsafe attribute name: ${name}`);\r\n    }\r\n    return (attrValidationCache[name] = !isUnsafe);\r\n}\r\nconst propsToAttrMap = {\r\n    acceptCharset: 'accept-charset',\r\n    className: 'class',\r\n    htmlFor: 'for',\r\n    httpEquiv: 'http-equiv'\r\n};\r\n/**\r\n * CSS properties that accept plain numbers\r\n */\r\nconst isNoUnitNumericStyleProp = /*#__PURE__*/ makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +\r\n    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +\r\n    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +\r\n    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +\r\n    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +\r\n    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +\r\n    // SVG\r\n    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width`);\r\n/**\r\n * Known attributes, this is used for stringification of runtime static nodes\r\n * so that we don't stringify bindings that cannot be set from HTML.\r\n * Don't also forget to allow `data-*` and `aria-*`!\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\r\n */\r\nconst isKnownHtmlAttr = /*#__PURE__*/ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +\r\n    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +\r\n    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +\r\n    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +\r\n    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +\r\n    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +\r\n    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +\r\n    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +\r\n    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +\r\n    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +\r\n    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +\r\n    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +\r\n    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +\r\n    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +\r\n    `value,width,wrap`);\r\n/**\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute\r\n */\r\nconst isKnownSvgAttr = /*#__PURE__*/ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` +\r\n    `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` +\r\n    `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` +\r\n    `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` +\r\n    `color-interpolation-filters,color-profile,color-rendering,` +\r\n    `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` +\r\n    `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` +\r\n    `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` +\r\n    `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` +\r\n    `font-family,font-size,font-size-adjust,font-stretch,font-style,` +\r\n    `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` +\r\n    `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` +\r\n    `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` +\r\n    `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` +\r\n    `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` +\r\n    `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` +\r\n    `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` +\r\n    `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` +\r\n    `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` +\r\n    `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` +\r\n    `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` +\r\n    `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` +\r\n    `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` +\r\n    `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` +\r\n    `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` +\r\n    `specularConstant,specularExponent,speed,spreadMethod,startOffset,` +\r\n    `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` +\r\n    `strikethrough-position,strikethrough-thickness,string,stroke,` +\r\n    `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` +\r\n    `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` +\r\n    `text-decoration,text-rendering,textLength,to,transform,transform-origin,` +\r\n    `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` +\r\n    `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` +\r\n    `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` +\r\n    `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` +\r\n    `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` +\r\n    `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` +\r\n    `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);\n\nfunction normalizeStyle(value) {\r\n    if (isArray(value)) {\r\n        const res = {};\r\n        for (let i = 0; i < value.length; i++) {\r\n            const item = value[i];\r\n            const normalized = isString(item)\r\n                ? parseStringStyle(item)\r\n                : normalizeStyle(item);\r\n            if (normalized) {\r\n                for (const key in normalized) {\r\n                    res[key] = normalized[key];\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    else if (isString(value)) {\r\n        return value;\r\n    }\r\n    else if (isObject(value)) {\r\n        return value;\r\n    }\r\n}\r\nconst listDelimiterRE = /;(?![^(]*\\))/g;\r\nconst propertyDelimiterRE = /:(.+)/;\r\nfunction parseStringStyle(cssText) {\r\n    const ret = {};\r\n    cssText.split(listDelimiterRE).forEach(item => {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiterRE);\r\n            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return ret;\r\n}\r\nfunction stringifyStyle(styles) {\r\n    let ret = '';\r\n    if (!styles || isString(styles)) {\r\n        return ret;\r\n    }\r\n    for (const key in styles) {\r\n        const value = styles[key];\r\n        const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\r\n        if (isString(value) ||\r\n            (typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey))) {\r\n            // only render valid values\r\n            ret += `${normalizedKey}:${value};`;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nfunction normalizeClass(value) {\r\n    let res = '';\r\n    if (isString(value)) {\r\n        res = value;\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const normalized = normalizeClass(value[i]);\r\n            if (normalized) {\r\n                res += normalized + ' ';\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(value)) {\r\n        for (const name in value) {\r\n            if (value[name]) {\r\n                res += name + ' ';\r\n            }\r\n        }\r\n    }\r\n    return res.trim();\r\n}\r\nfunction normalizeProps(props) {\r\n    if (!props)\r\n        return null;\r\n    let { class: klass, style } = props;\r\n    if (klass && !isString(klass)) {\r\n        props.class = normalizeClass(klass);\r\n    }\r\n    if (style) {\r\n        props.style = normalizeStyle(style);\r\n    }\r\n    return props;\r\n}\n\n// These tag configs are shared between compiler-dom and runtime-dom, so they\r\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\nconst HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' +\r\n    'header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,' +\r\n    'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' +\r\n    'data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,' +\r\n    'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' +\r\n    'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' +\r\n    'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' +\r\n    'option,output,progress,select,textarea,details,dialog,menu,' +\r\n    'summary,template,blockquote,iframe,tfoot';\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element\r\nconst SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' +\r\n    'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' +\r\n    'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' +\r\n    'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' +\r\n    'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' +\r\n    'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' +\r\n    'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' +\r\n    'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' +\r\n    'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' +\r\n    'text,textPath,title,tspan,unknown,use,view';\r\nconst VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';\r\nconst isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);\r\nconst isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);\r\nconst isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);\n\nconst escapeRE = /[\"'&<>]/;\r\nfunction escapeHtml(string) {\r\n    const str = '' + string;\r\n    const match = escapeRE.exec(str);\r\n    if (!match) {\r\n        return str;\r\n    }\r\n    let html = '';\r\n    let escaped;\r\n    let index;\r\n    let lastIndex = 0;\r\n    for (index = match.index; index < str.length; index++) {\r\n        switch (str.charCodeAt(index)) {\r\n            case 34: // \"\r\n                escaped = '&quot;';\r\n                break;\r\n            case 38: // &\r\n                escaped = '&amp;';\r\n                break;\r\n            case 39: // '\r\n                escaped = '&#39;';\r\n                break;\r\n            case 60: // <\r\n                escaped = '&lt;';\r\n                break;\r\n            case 62: // >\r\n                escaped = '&gt;';\r\n                break;\r\n            default:\r\n                continue;\r\n        }\r\n        if (lastIndex !== index) {\r\n            html += str.substring(lastIndex, index);\r\n        }\r\n        lastIndex = index + 1;\r\n        html += escaped;\r\n    }\r\n    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\r\n}\r\n// https://www.w3.org/TR/html52/syntax.html#comments\r\nconst commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;\r\nfunction escapeHtmlComment(src) {\r\n    return src.replace(commentStripRE, '');\r\n}\n\nfunction looseCompareArrays(a, b) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    let equal = true;\r\n    for (let i = 0; equal && i < a.length; i++) {\r\n        equal = looseEqual(a[i], b[i]);\r\n    }\r\n    return equal;\r\n}\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    let aValidType = isDate(a);\r\n    let bValidType = isDate(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? a.getTime() === b.getTime() : false;\r\n    }\r\n    aValidType = isArray(a);\r\n    bValidType = isArray(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? looseCompareArrays(a, b) : false;\r\n    }\r\n    aValidType = isObject(a);\r\n    bValidType = isObject(b);\r\n    if (aValidType || bValidType) {\r\n        /* istanbul ignore if: this if will probably never be called */\r\n        if (!aValidType || !bValidType) {\r\n            return false;\r\n        }\r\n        const aKeysCount = Object.keys(a).length;\r\n        const bKeysCount = Object.keys(b).length;\r\n        if (aKeysCount !== bKeysCount) {\r\n            return false;\r\n        }\r\n        for (const key in a) {\r\n            const aHasKey = a.hasOwnProperty(key);\r\n            const bHasKey = b.hasOwnProperty(key);\r\n            if ((aHasKey && !bHasKey) ||\r\n                (!aHasKey && bHasKey) ||\r\n                !looseEqual(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return String(a) === String(b);\r\n}\r\nfunction looseIndexOf(arr, val) {\r\n    return arr.findIndex(item => looseEqual(item, val));\r\n}\n\n/**\r\n * For converting {{ interpolation }} values to displayed strings.\r\n * @private\r\n */\r\nconst toDisplayString = (val) => {\r\n    return val == null\r\n        ? ''\r\n        : isArray(val) ||\r\n            (isObject(val) &&\r\n                (val.toString === objectToString || !isFunction(val.toString)))\r\n            ? JSON.stringify(val, replacer, 2)\r\n            : String(val);\r\n};\r\nconst replacer = (_key, val) => {\r\n    // can't use isRef here since @vue/shared has no deps\r\n    if (val && val.__v_isRef) {\r\n        return replacer(_key, val.value);\r\n    }\r\n    else if (isMap(val)) {\r\n        return {\r\n            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {\r\n                entries[`${key} =>`] = val;\r\n                return entries;\r\n            }, {})\r\n        };\r\n    }\r\n    else if (isSet(val)) {\r\n        return {\r\n            [`Set(${val.size})`]: [...val.values()]\r\n        };\r\n    }\r\n    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {\r\n        return String(val);\r\n    }\r\n    return val;\r\n};\n\n/**\r\n * List of @babel/parser plugins that are used for template expression\r\n * transforms and SFC script transforms. By default we enable proposals slated\r\n * for ES2020. This will need to be updated as the spec moves forward.\r\n * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins\r\n */\r\nconst babelParserDefaultPlugins = [\r\n    'bigInt',\r\n    'optionalChaining',\r\n    'nullishCoalescingOperator'\r\n];\r\nconst EMPTY_OBJ = (process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\nconst EMPTY_ARR = (process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nconst NO = () => false;\r\nconst onRE = /^on[^a-z]/;\r\nconst isOn = (key) => onRE.test(key);\r\nconst isModelListener = (key) => key.startsWith('onUpdate:');\r\nconst extend = Object.assign;\r\nconst remove = (arr, el) => {\r\n    const i = arr.indexOf(el);\r\n    if (i > -1) {\r\n        arr.splice(i, 1);\r\n    }\r\n};\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nconst isArray = Array.isArray;\r\nconst isMap = (val) => toTypeString(val) === '[object Map]';\r\nconst isSet = (val) => toTypeString(val) === '[object Set]';\r\nconst isDate = (val) => val instanceof Date;\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isString = (val) => typeof val === 'string';\r\nconst isSymbol = (val) => typeof val === 'symbol';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nconst isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value) => objectToString.call(value);\r\nconst toRawType = (value) => {\r\n    // extract \"RawType\" from strings like \"[object RawType]\"\r\n    return toTypeString(value).slice(8, -1);\r\n};\r\nconst isPlainObject = (val) => toTypeString(val) === '[object Object]';\r\nconst isIntegerKey = (key) => isString(key) &&\r\n    key !== 'NaN' &&\r\n    key[0] !== '-' &&\r\n    '' + parseInt(key, 10) === key;\r\nconst isReservedProp = /*#__PURE__*/ makeMap(\r\n// the leading comma is intentional so empty string \"\" is also included\r\n',key,ref,' +\r\n    'onVnodeBeforeMount,onVnodeMounted,' +\r\n    'onVnodeBeforeUpdate,onVnodeUpdated,' +\r\n    'onVnodeBeforeUnmount,onVnodeUnmounted');\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n});\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nconst hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, '-$1').toLowerCase());\r\n/**\r\n * @private\r\n */\r\nconst capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\n/**\r\n * @private\r\n */\r\nconst toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);\r\n// compare whether a value has changed, accounting for NaN.\r\nconst hasChanged = (value, oldValue) => !Object.is(value, oldValue);\r\nconst invokeArrayFns = (fns, arg) => {\r\n    for (let i = 0; i < fns.length; i++) {\r\n        fns[i](arg);\r\n    }\r\n};\r\nconst def = (obj, key, value) => {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value\r\n    });\r\n};\r\nconst toNumber = (val) => {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n};\r\nlet _globalThis;\r\nconst getGlobalThis = () => {\r\n    return (_globalThis ||\r\n        (_globalThis =\r\n            typeof globalThis !== 'undefined'\r\n                ? globalThis\r\n                : typeof self !== 'undefined'\r\n                    ? self\r\n                    : typeof window !== 'undefined'\r\n                        ? window\r\n                        : typeof global !== 'undefined'\r\n                            ? global\r\n                            : {}));\r\n};\n\nexport { EMPTY_ARR, EMPTY_OBJ, NO, NOOP, PatchFlagNames, babelParserDefaultPlugins, camelize, capitalize, def, escapeHtml, escapeHtmlComment, extend, generateCodeFrame, getGlobalThis, hasChanged, hasOwn, hyphenate, includeBooleanAttr, invokeArrayFns, isArray, isBooleanAttr, isDate, isFunction, isGloballyWhitelisted, isHTMLTag, isIntegerKey, isKnownHtmlAttr, isKnownSvgAttr, isMap, isModelListener, isNoUnitNumericStyleProp, isObject, isOn, isPlainObject, isPromise, isReservedProp, isSSRSafeAttrName, isSVGTag, isSet, isSpecialBooleanAttr, isString, isSymbol, isVoidTag, looseEqual, looseIndexOf, makeMap, normalizeClass, normalizeProps, normalizeStyle, objectToString, parseStringStyle, propsToAttrMap, remove, slotFlagsText, stringifyStyle, toDisplayString, toHandlerKey, toNumber, toRawType, toTypeString };\n", "import { extend, isArray, isMap, isIntegerKey, isSymbol, hasOwn, isObject, hasChanged, makeMap, capitalize, toRawType, def, isFunction, NOOP } from '@vue/shared';\n\nfunction warn(msg, ...args) {\r\n    console.warn(`[Vue warn] ${msg}`, ...args);\r\n}\n\nlet activeEffectScope;\r\nconst effectScopeStack = [];\r\nclass EffectScope {\r\n    constructor(detached = false) {\r\n        this.active = true;\r\n        this.effects = [];\r\n        this.cleanups = [];\r\n        if (!detached && activeEffectScope) {\r\n            this.parent = activeEffectScope;\r\n            this.index =\r\n                (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;\r\n        }\r\n    }\r\n    run(fn) {\r\n        if (this.active) {\r\n            try {\r\n                this.on();\r\n                return fn();\r\n            }\r\n            finally {\r\n                this.off();\r\n            }\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`cannot run an inactive effect scope.`);\r\n        }\r\n    }\r\n    on() {\r\n        if (this.active) {\r\n            effectScopeStack.push(this);\r\n            activeEffectScope = this;\r\n        }\r\n    }\r\n    off() {\r\n        if (this.active) {\r\n            effectScopeStack.pop();\r\n            activeEffectScope = effectScopeStack[effectScopeStack.length - 1];\r\n        }\r\n    }\r\n    stop(fromParent) {\r\n        if (this.active) {\r\n            this.effects.forEach(e => e.stop());\r\n            this.cleanups.forEach(cleanup => cleanup());\r\n            if (this.scopes) {\r\n                this.scopes.forEach(e => e.stop(true));\r\n            }\r\n            // nested scope, dereference from parent to avoid memory leaks\r\n            if (this.parent && !fromParent) {\r\n                // optimized O(1) removal\r\n                const last = this.parent.scopes.pop();\r\n                if (last && last !== this) {\r\n                    this.parent.scopes[this.index] = last;\r\n                    last.index = this.index;\r\n                }\r\n            }\r\n            this.active = false;\r\n        }\r\n    }\r\n}\r\nfunction effectScope(detached) {\r\n    return new EffectScope(detached);\r\n}\r\nfunction recordEffectScope(effect, scope) {\r\n    scope = scope || activeEffectScope;\r\n    if (scope && scope.active) {\r\n        scope.effects.push(effect);\r\n    }\r\n}\r\nfunction getCurrentScope() {\r\n    return activeEffectScope;\r\n}\r\nfunction onScopeDispose(fn) {\r\n    if (activeEffectScope) {\r\n        activeEffectScope.cleanups.push(fn);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`onScopeDispose() is called when there is no active effect scope` +\r\n            ` to be associated with.`);\r\n    }\r\n}\n\nconst createDep = (effects) => {\r\n    const dep = new Set(effects);\r\n    dep.w = 0;\r\n    dep.n = 0;\r\n    return dep;\r\n};\r\nconst wasTracked = (dep) => (dep.w & trackOpBit) > 0;\r\nconst newTracked = (dep) => (dep.n & trackOpBit) > 0;\r\nconst initDepMarkers = ({ deps }) => {\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].w |= trackOpBit; // set was tracked\r\n        }\r\n    }\r\n};\r\nconst finalizeDepMarkers = (effect) => {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        let ptr = 0;\r\n        for (let i = 0; i < deps.length; i++) {\r\n            const dep = deps[i];\r\n            if (wasTracked(dep) && !newTracked(dep)) {\r\n                dep.delete(effect);\r\n            }\r\n            else {\r\n                deps[ptr++] = dep;\r\n            }\r\n            // clear bits\r\n            dep.w &= ~trackOpBit;\r\n            dep.n &= ~trackOpBit;\r\n        }\r\n        deps.length = ptr;\r\n    }\r\n};\n\nconst targetMap = new WeakMap();\r\n// The number of effects currently being tracked recursively.\r\nlet effectTrackDepth = 0;\r\nlet trackOpBit = 1;\r\n/**\r\n * The bitwise track markers support at most 30 levels op recursion.\r\n * This value is chosen to enable modern JS engines to use a SMI on all platforms.\r\n * When recursion depth is greater, fall back to using a full cleanup.\r\n */\r\nconst maxMarkerBits = 30;\r\nconst effectStack = [];\r\nlet activeEffect;\r\nconst ITERATE_KEY = Symbol((process.env.NODE_ENV !== 'production') ? 'iterate' : '');\r\nconst MAP_KEY_ITERATE_KEY = Symbol((process.env.NODE_ENV !== 'production') ? 'Map key iterate' : '');\r\nclass ReactiveEffect {\r\n    constructor(fn, scheduler = null, scope) {\r\n        this.fn = fn;\r\n        this.scheduler = scheduler;\r\n        this.active = true;\r\n        this.deps = [];\r\n        recordEffectScope(this, scope);\r\n    }\r\n    run() {\r\n        if (!this.active) {\r\n            return this.fn();\r\n        }\r\n        if (!effectStack.includes(this)) {\r\n            try {\r\n                effectStack.push((activeEffect = this));\r\n                enableTracking();\r\n                trackOpBit = 1 << ++effectTrackDepth;\r\n                if (effectTrackDepth <= maxMarkerBits) {\r\n                    initDepMarkers(this);\r\n                }\r\n                else {\r\n                    cleanupEffect(this);\r\n                }\r\n                return this.fn();\r\n            }\r\n            finally {\r\n                if (effectTrackDepth <= maxMarkerBits) {\r\n                    finalizeDepMarkers(this);\r\n                }\r\n                trackOpBit = 1 << --effectTrackDepth;\r\n                resetTracking();\r\n                effectStack.pop();\r\n                const n = effectStack.length;\r\n                activeEffect = n > 0 ? effectStack[n - 1] : undefined;\r\n            }\r\n        }\r\n    }\r\n    stop() {\r\n        if (this.active) {\r\n            cleanupEffect(this);\r\n            if (this.onStop) {\r\n                this.onStop();\r\n            }\r\n            this.active = false;\r\n        }\r\n    }\r\n}\r\nfunction cleanupEffect(effect) {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].delete(effect);\r\n        }\r\n        deps.length = 0;\r\n    }\r\n}\r\nfunction effect(fn, options) {\r\n    if (fn.effect) {\r\n        fn = fn.effect.fn;\r\n    }\r\n    const _effect = new ReactiveEffect(fn);\r\n    if (options) {\r\n        extend(_effect, options);\r\n        if (options.scope)\r\n            recordEffectScope(_effect, options.scope);\r\n    }\r\n    if (!options || !options.lazy) {\r\n        _effect.run();\r\n    }\r\n    const runner = _effect.run.bind(_effect);\r\n    runner.effect = _effect;\r\n    return runner;\r\n}\r\nfunction stop(runner) {\r\n    runner.effect.stop();\r\n}\r\nlet shouldTrack = true;\r\nconst trackStack = [];\r\nfunction pauseTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = false;\r\n}\r\nfunction enableTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = true;\r\n}\r\nfunction resetTracking() {\r\n    const last = trackStack.pop();\r\n    shouldTrack = last === undefined ? true : last;\r\n}\r\nfunction track(target, type, key) {\r\n    if (!isTracking()) {\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        targetMap.set(target, (depsMap = new Map()));\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = createDep()));\r\n    }\r\n    const eventInfo = (process.env.NODE_ENV !== 'production')\r\n        ? { effect: activeEffect, target, type, key }\r\n        : undefined;\r\n    trackEffects(dep, eventInfo);\r\n}\r\nfunction isTracking() {\r\n    return shouldTrack && activeEffect !== undefined;\r\n}\r\nfunction trackEffects(dep, debuggerEventExtraInfo) {\r\n    let shouldTrack = false;\r\n    if (effectTrackDepth <= maxMarkerBits) {\r\n        if (!newTracked(dep)) {\r\n            dep.n |= trackOpBit; // set newly tracked\r\n            shouldTrack = !wasTracked(dep);\r\n        }\r\n    }\r\n    else {\r\n        // Full cleanup mode.\r\n        shouldTrack = !dep.has(activeEffect);\r\n    }\r\n    if (shouldTrack) {\r\n        dep.add(activeEffect);\r\n        activeEffect.deps.push(dep);\r\n        if ((process.env.NODE_ENV !== 'production') && activeEffect.onTrack) {\r\n            activeEffect.onTrack(Object.assign({\r\n                effect: activeEffect\r\n            }, debuggerEventExtraInfo));\r\n        }\r\n    }\r\n}\r\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        // never been tracked\r\n        return;\r\n    }\r\n    let deps = [];\r\n    if (type === \"clear\" /* CLEAR */) {\r\n        // collection being cleared\r\n        // trigger all effects for target\r\n        deps = [...depsMap.values()];\r\n    }\r\n    else if (key === 'length' && isArray(target)) {\r\n        depsMap.forEach((dep, key) => {\r\n            if (key === 'length' || key >= newValue) {\r\n                deps.push(dep);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        // schedule runs for SET | ADD | DELETE\r\n        if (key !== void 0) {\r\n            deps.push(depsMap.get(key));\r\n        }\r\n        // also run for iteration key on ADD | DELETE | Map.SET\r\n        switch (type) {\r\n            case \"add\" /* ADD */:\r\n                if (!isArray(target)) {\r\n                    deps.push(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                else if (isIntegerKey(key)) {\r\n                    // new index added to array -> length changes\r\n                    deps.push(depsMap.get('length'));\r\n                }\r\n                break;\r\n            case \"delete\" /* DELETE */:\r\n                if (!isArray(target)) {\r\n                    deps.push(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                break;\r\n            case \"set\" /* SET */:\r\n                if (isMap(target)) {\r\n                    deps.push(depsMap.get(ITERATE_KEY));\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    const eventInfo = (process.env.NODE_ENV !== 'production')\r\n        ? { target, type, key, newValue, oldValue, oldTarget }\r\n        : undefined;\r\n    if (deps.length === 1) {\r\n        if (deps[0]) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                triggerEffects(deps[0], eventInfo);\r\n            }\r\n            else {\r\n                triggerEffects(deps[0]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const effects = [];\r\n        for (const dep of deps) {\r\n            if (dep) {\r\n                effects.push(...dep);\r\n            }\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            triggerEffects(createDep(effects), eventInfo);\r\n        }\r\n        else {\r\n            triggerEffects(createDep(effects));\r\n        }\r\n    }\r\n}\r\nfunction triggerEffects(dep, debuggerEventExtraInfo) {\r\n    // spread into array for stabilization\r\n    for (const effect of isArray(dep) ? dep : [...dep]) {\r\n        if (effect !== activeEffect || effect.allowRecurse) {\r\n            if ((process.env.NODE_ENV !== 'production') && effect.onTrigger) {\r\n                effect.onTrigger(extend({ effect }, debuggerEventExtraInfo));\r\n            }\r\n            if (effect.scheduler) {\r\n                effect.scheduler();\r\n            }\r\n            else {\r\n                effect.run();\r\n            }\r\n        }\r\n    }\r\n}\n\nconst isNonTrackableKeys = /*#__PURE__*/ makeMap(`__proto__,__v_isRef,__isVue`);\r\nconst builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol)\r\n    .map(key => Symbol[key])\r\n    .filter(isSymbol));\r\nconst get = /*#__PURE__*/ createGetter();\r\nconst shallowGet = /*#__PURE__*/ createGetter(false, true);\r\nconst readonlyGet = /*#__PURE__*/ createGetter(true);\r\nconst shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);\r\nconst arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();\r\nfunction createArrayInstrumentations() {\r\n    const instrumentations = {};\r\n    ['includes', 'indexOf', 'lastIndexOf'].forEach(key => {\r\n        instrumentations[key] = function (...args) {\r\n            const arr = toRaw(this);\r\n            for (let i = 0, l = this.length; i < l; i++) {\r\n                track(arr, \"get\" /* GET */, i + '');\r\n            }\r\n            // we run the method using the original args first (which may be reactive)\r\n            const res = arr[key](...args);\r\n            if (res === -1 || res === false) {\r\n                // if that didn't work, run it again using raw values.\r\n                return arr[key](...args.map(toRaw));\r\n            }\r\n            else {\r\n                return res;\r\n            }\r\n        };\r\n    });\r\n    ['push', 'pop', 'shift', 'unshift', 'splice'].forEach(key => {\r\n        instrumentations[key] = function (...args) {\r\n            pauseTracking();\r\n            const res = toRaw(this)[key].apply(this, args);\r\n            resetTracking();\r\n            return res;\r\n        };\r\n    });\r\n    return instrumentations;\r\n}\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n    return function get(target, key, receiver) {\r\n        if (key === \"__v_isReactive\" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === \"__v_isReadonly\" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === \"__v_raw\" /* RAW */ &&\r\n            receiver ===\r\n                (isReadonly\r\n                    ? shallow\r\n                        ? shallowReadonlyMap\r\n                        : readonlyMap\r\n                    : shallow\r\n                        ? shallowReactiveMap\r\n                        : reactiveMap).get(target)) {\r\n            return target;\r\n        }\r\n        const targetIsArray = isArray(target);\r\n        if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\r\n            return Reflect.get(arrayInstrumentations, key, receiver);\r\n        }\r\n        const res = Reflect.get(target, key, receiver);\r\n        if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\r\n            return res;\r\n        }\r\n        if (!isReadonly) {\r\n            track(target, \"get\" /* GET */, key);\r\n        }\r\n        if (shallow) {\r\n            return res;\r\n        }\r\n        if (isRef(res)) {\r\n            // ref unwrapping - does not apply for Array + integer key.\r\n            const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\r\n            return shouldUnwrap ? res.value : res;\r\n        }\r\n        if (isObject(res)) {\r\n            // Convert returned value into a proxy as well. we do the isObject check\r\n            // here to avoid invalid value warning. Also need to lazy access readonly\r\n            // and reactive here to avoid circular dependency.\r\n            return isReadonly ? readonly(res) : reactive(res);\r\n        }\r\n        return res;\r\n    };\r\n}\r\nconst set = /*#__PURE__*/ createSetter();\r\nconst shallowSet = /*#__PURE__*/ createSetter(true);\r\nfunction createSetter(shallow = false) {\r\n    return function set(target, key, value, receiver) {\r\n        let oldValue = target[key];\r\n        if (!shallow) {\r\n            value = toRaw(value);\r\n            oldValue = toRaw(oldValue);\r\n            if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\r\n                oldValue.value = value;\r\n                return true;\r\n            }\r\n        }\r\n        const hadKey = isArray(target) && isIntegerKey(key)\r\n            ? Number(key) < target.length\r\n            : hasOwn(target, key);\r\n        const result = Reflect.set(target, key, value, receiver);\r\n        // don't trigger if target is something up in the prototype chain of original\r\n        if (target === toRaw(receiver)) {\r\n            if (!hadKey) {\r\n                trigger(target, \"add\" /* ADD */, key, value);\r\n            }\r\n            else if (hasChanged(value, oldValue)) {\r\n                trigger(target, \"set\" /* SET */, key, value, oldValue);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n}\r\nfunction deleteProperty(target, key) {\r\n    const hadKey = hasOwn(target, key);\r\n    const oldValue = target[key];\r\n    const result = Reflect.deleteProperty(target, key);\r\n    if (result && hadKey) {\r\n        trigger(target, \"delete\" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction has(target, key) {\r\n    const result = Reflect.has(target, key);\r\n    if (!isSymbol(key) || !builtInSymbols.has(key)) {\r\n        track(target, \"has\" /* HAS */, key);\r\n    }\r\n    return result;\r\n}\r\nfunction ownKeys(target) {\r\n    track(target, \"iterate\" /* ITERATE */, isArray(target) ? 'length' : ITERATE_KEY);\r\n    return Reflect.ownKeys(target);\r\n}\r\nconst mutableHandlers = {\r\n    get,\r\n    set,\r\n    deleteProperty,\r\n    has,\r\n    ownKeys\r\n};\r\nconst readonlyHandlers = {\r\n    get: readonlyGet,\r\n    set(target, key) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n        }\r\n        return true;\r\n    },\r\n    deleteProperty(target, key) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n        }\r\n        return true;\r\n    }\r\n};\r\nconst shallowReactiveHandlers = /*#__PURE__*/ extend({}, mutableHandlers, {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n});\r\n// Props handlers are special in the sense that it should not unwrap top-level\r\n// refs (in order to allow refs to be explicitly passed down), but should\r\n// retain the reactivity of the normal readonly object.\r\nconst shallowReadonlyHandlers = /*#__PURE__*/ extend({}, readonlyHandlers, {\r\n    get: shallowReadonlyGet\r\n});\n\nconst toShallow = (value) => value;\r\nconst getProto = (v) => Reflect.getPrototypeOf(v);\r\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\r\n    // #1772: readonly(reactive(Map)) should return readonly + reactive version\r\n    // of the value\r\n    target = target[\"__v_raw\" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, \"get\" /* GET */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, \"get\" /* GET */, rawKey);\r\n    const { has } = getProto(rawTarget);\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n    if (has.call(rawTarget, key)) {\r\n        return wrap(target.get(key));\r\n    }\r\n    else if (has.call(rawTarget, rawKey)) {\r\n        return wrap(target.get(rawKey));\r\n    }\r\n    else if (target !== rawTarget) {\r\n        // #3602 readonly(reactive(Map))\r\n        // ensure that the nested reactive `Map` can do tracking for itself\r\n        target.get(key);\r\n    }\r\n}\r\nfunction has$1(key, isReadonly = false) {\r\n    const target = this[\"__v_raw\" /* RAW */];\r\n    const rawTarget = toRaw(target);\r\n    const rawKey = toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, \"has\" /* HAS */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, \"has\" /* HAS */, rawKey);\r\n    return key === rawKey\r\n        ? target.has(key)\r\n        : target.has(key) || target.has(rawKey);\r\n}\r\nfunction size(target, isReadonly = false) {\r\n    target = target[\"__v_raw\" /* RAW */];\r\n    !isReadonly && track(toRaw(target), \"iterate\" /* ITERATE */, ITERATE_KEY);\r\n    return Reflect.get(target, 'size', target);\r\n}\r\nfunction add(value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, value);\r\n    if (!hadKey) {\r\n        target.add(value);\r\n        trigger(target, \"add\" /* ADD */, value, value);\r\n    }\r\n    return this;\r\n}\r\nfunction set$1(key, value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        checkIdentityKeys(target, has, key);\r\n    }\r\n    const oldValue = get.call(target, key);\r\n    target.set(key, value);\r\n    if (!hadKey) {\r\n        trigger(target, \"add\" /* ADD */, key, value);\r\n    }\r\n    else if (hasChanged(value, oldValue)) {\r\n        trigger(target, \"set\" /* SET */, key, value, oldValue);\r\n    }\r\n    return this;\r\n}\r\nfunction deleteEntry(key) {\r\n    const target = toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        checkIdentityKeys(target, has, key);\r\n    }\r\n    const oldValue = get ? get.call(target, key) : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.delete(key);\r\n    if (hadKey) {\r\n        trigger(target, \"delete\" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction clear() {\r\n    const target = toRaw(this);\r\n    const hadItems = target.size !== 0;\r\n    const oldTarget = (process.env.NODE_ENV !== 'production')\r\n        ? isMap(target)\r\n            ? new Map(target)\r\n            : new Set(target)\r\n        : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.clear();\r\n    if (hadItems) {\r\n        trigger(target, \"clear\" /* CLEAR */, undefined, undefined, oldTarget);\r\n    }\r\n    return result;\r\n}\r\nfunction createForEach(isReadonly, isShallow) {\r\n    return function forEach(callback, thisArg) {\r\n        const observed = this;\r\n        const target = observed[\"__v_raw\" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly && track(rawTarget, \"iterate\" /* ITERATE */, ITERATE_KEY);\r\n        return target.forEach((value, key) => {\r\n            // important: make sure the callback is\r\n            // 1. invoked with the reactive map as `this` and 3rd arg\r\n            // 2. the value received should be a corresponding reactive/readonly.\r\n            return callback.call(thisArg, wrap(value), wrap(key), observed);\r\n        });\r\n    };\r\n}\r\nfunction createIterableMethod(method, isReadonly, isShallow) {\r\n    return function (...args) {\r\n        const target = this[\"__v_raw\" /* RAW */];\r\n        const rawTarget = toRaw(target);\r\n        const targetIsMap = isMap(rawTarget);\r\n        const isPair = method === 'entries' || (method === Symbol.iterator && targetIsMap);\r\n        const isKeyOnly = method === 'keys' && targetIsMap;\r\n        const innerIterator = target[method](...args);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly &&\r\n            track(rawTarget, \"iterate\" /* ITERATE */, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\r\n        // return a wrapped iterator which returns observed versions of the\r\n        // values emitted from the real iterator\r\n        return {\r\n            // iterator protocol\r\n            next() {\r\n                const { value, done } = innerIterator.next();\r\n                return done\r\n                    ? { value, done }\r\n                    : {\r\n                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n                        done\r\n                    };\r\n            },\r\n            // iterable protocol\r\n            [Symbol.iterator]() {\r\n                return this;\r\n            }\r\n        };\r\n    };\r\n}\r\nfunction createReadonlyMethod(type) {\r\n    return function (...args) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            const key = args[0] ? `on key \"${args[0]}\" ` : ``;\r\n            console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\r\n        }\r\n        return type === \"delete\" /* DELETE */ ? false : this;\r\n    };\r\n}\r\nfunction createInstrumentations() {\r\n    const mutableInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add,\r\n        set: set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, false)\r\n    };\r\n    const shallowInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, false, true);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add,\r\n        set: set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, true)\r\n    };\r\n    const readonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod(\"add\" /* ADD */),\r\n        set: createReadonlyMethod(\"set\" /* SET */),\r\n        delete: createReadonlyMethod(\"delete\" /* DELETE */),\r\n        clear: createReadonlyMethod(\"clear\" /* CLEAR */),\r\n        forEach: createForEach(true, false)\r\n    };\r\n    const shallowReadonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod(\"add\" /* ADD */),\r\n        set: createReadonlyMethod(\"set\" /* SET */),\r\n        delete: createReadonlyMethod(\"delete\" /* DELETE */),\r\n        clear: createReadonlyMethod(\"clear\" /* CLEAR */),\r\n        forEach: createForEach(true, true)\r\n    };\r\n    const iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];\r\n    iteratorMethods.forEach(method => {\r\n        mutableInstrumentations[method] = createIterableMethod(method, false, false);\r\n        readonlyInstrumentations[method] = createIterableMethod(method, true, false);\r\n        shallowInstrumentations[method] = createIterableMethod(method, false, true);\r\n        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);\r\n    });\r\n    return [\r\n        mutableInstrumentations,\r\n        readonlyInstrumentations,\r\n        shallowInstrumentations,\r\n        shallowReadonlyInstrumentations\r\n    ];\r\n}\r\nconst [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();\r\nfunction createInstrumentationGetter(isReadonly, shallow) {\r\n    const instrumentations = shallow\r\n        ? isReadonly\r\n            ? shallowReadonlyInstrumentations\r\n            : shallowInstrumentations\r\n        : isReadonly\r\n            ? readonlyInstrumentations\r\n            : mutableInstrumentations;\r\n    return (target, key, receiver) => {\r\n        if (key === \"__v_isReactive\" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === \"__v_isReadonly\" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === \"__v_raw\" /* RAW */) {\r\n            return target;\r\n        }\r\n        return Reflect.get(hasOwn(instrumentations, key) && key in target\r\n            ? instrumentations\r\n            : target, key, receiver);\r\n    };\r\n}\r\nconst mutableCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, false)\r\n};\r\nconst shallowCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, true)\r\n};\r\nconst readonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, false)\r\n};\r\nconst shallowReadonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, true)\r\n};\r\nfunction checkIdentityKeys(target, has, key) {\r\n    const rawKey = toRaw(key);\r\n    if (rawKey !== key && has.call(target, rawKey)) {\r\n        const type = toRawType(target);\r\n        console.warn(`Reactive ${type} contains both the raw and reactive ` +\r\n            `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +\r\n            `which can lead to inconsistencies. ` +\r\n            `Avoid differentiating between the raw and reactive versions ` +\r\n            `of an object and only use the reactive version if possible.`);\r\n    }\r\n}\n\nconst reactiveMap = new WeakMap();\r\nconst shallowReactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\nconst shallowReadonlyMap = new WeakMap();\r\nfunction targetTypeMap(rawType) {\r\n    switch (rawType) {\r\n        case 'Object':\r\n        case 'Array':\r\n            return 1 /* COMMON */;\r\n        case 'Map':\r\n        case 'Set':\r\n        case 'WeakMap':\r\n        case 'WeakSet':\r\n            return 2 /* COLLECTION */;\r\n        default:\r\n            return 0 /* INVALID */;\r\n    }\r\n}\r\nfunction getTargetType(value) {\r\n    return value[\"__v_skip\" /* SKIP */] || !Object.isExtensible(value)\r\n        ? 0 /* INVALID */\r\n        : targetTypeMap(toRawType(value));\r\n}\r\nfunction reactive(target) {\r\n    // if trying to observe a readonly proxy, return the readonly version.\r\n    if (target && target[\"__v_isReadonly\" /* IS_READONLY */]) {\r\n        return target;\r\n    }\r\n    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\r\n}\r\n/**\r\n * Return a shallowly-reactive copy of the original object, where only the root\r\n * level properties are reactive. It also does not auto-unwrap refs (even at the\r\n * root level).\r\n */\r\nfunction shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);\r\n}\r\n/**\r\n * Creates a readonly copy of the original object. Note the returned copy is not\r\n * made reactive, but `readonly` can be called on an already reactive object.\r\n */\r\nfunction readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\r\n}\r\n/**\r\n * Returns a reactive-copy of the original object, where only the root level\r\n * properties are readonly, and does NOT unwrap refs nor recursively convert\r\n * returned properties.\r\n * This is used for creating the props proxy object for stateful components.\r\n */\r\nfunction shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);\r\n}\r\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\r\n    if (!isObject(target)) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn(`value cannot be made reactive: ${String(target)}`);\r\n        }\r\n        return target;\r\n    }\r\n    // target is already a Proxy, return it.\r\n    // exception: calling readonly() on a reactive object\r\n    if (target[\"__v_raw\" /* RAW */] &&\r\n        !(isReadonly && target[\"__v_isReactive\" /* IS_REACTIVE */])) {\r\n        return target;\r\n    }\r\n    // target already has corresponding Proxy\r\n    const existingProxy = proxyMap.get(target);\r\n    if (existingProxy) {\r\n        return existingProxy;\r\n    }\r\n    // only a whitelist of value types can be observed.\r\n    const targetType = getTargetType(target);\r\n    if (targetType === 0 /* INVALID */) {\r\n        return target;\r\n    }\r\n    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers);\r\n    proxyMap.set(target, proxy);\r\n    return proxy;\r\n}\r\nfunction isReactive(value) {\r\n    if (isReadonly(value)) {\r\n        return isReactive(value[\"__v_raw\" /* RAW */]);\r\n    }\r\n    return !!(value && value[\"__v_isReactive\" /* IS_REACTIVE */]);\r\n}\r\nfunction isReadonly(value) {\r\n    return !!(value && value[\"__v_isReadonly\" /* IS_READONLY */]);\r\n}\r\nfunction isProxy(value) {\r\n    return isReactive(value) || isReadonly(value);\r\n}\r\nfunction toRaw(observed) {\r\n    const raw = observed && observed[\"__v_raw\" /* RAW */];\r\n    return raw ? toRaw(raw) : observed;\r\n}\r\nfunction markRaw(value) {\r\n    def(value, \"__v_skip\" /* SKIP */, true);\r\n    return value;\r\n}\r\nconst toReactive = (value) => isObject(value) ? reactive(value) : value;\r\nconst toReadonly = (value) => isObject(value) ? readonly(value) : value;\n\nfunction trackRefValue(ref) {\r\n    if (isTracking()) {\r\n        ref = toRaw(ref);\r\n        if (!ref.dep) {\r\n            ref.dep = createDep();\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            trackEffects(ref.dep, {\r\n                target: ref,\r\n                type: \"get\" /* GET */,\r\n                key: 'value'\r\n            });\r\n        }\r\n        else {\r\n            trackEffects(ref.dep);\r\n        }\r\n    }\r\n}\r\nfunction triggerRefValue(ref, newVal) {\r\n    ref = toRaw(ref);\r\n    if (ref.dep) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            triggerEffects(ref.dep, {\r\n                target: ref,\r\n                type: \"set\" /* SET */,\r\n                key: 'value',\r\n                newValue: newVal\r\n            });\r\n        }\r\n        else {\r\n            triggerEffects(ref.dep);\r\n        }\r\n    }\r\n}\r\nfunction isRef(r) {\r\n    return Boolean(r && r.__v_isRef === true);\r\n}\r\nfunction ref(value) {\r\n    return createRef(value, false);\r\n}\r\nfunction shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\nfunction createRef(rawValue, shallow) {\r\n    if (isRef(rawValue)) {\r\n        return rawValue;\r\n    }\r\n    return new RefImpl(rawValue, shallow);\r\n}\r\nclass RefImpl {\r\n    constructor(value, _shallow) {\r\n        this._shallow = _shallow;\r\n        this.dep = undefined;\r\n        this.__v_isRef = true;\r\n        this._rawValue = _shallow ? value : toRaw(value);\r\n        this._value = _shallow ? value : toReactive(value);\r\n    }\r\n    get value() {\r\n        trackRefValue(this);\r\n        return this._value;\r\n    }\r\n    set value(newVal) {\r\n        newVal = this._shallow ? newVal : toRaw(newVal);\r\n        if (hasChanged(newVal, this._rawValue)) {\r\n            this._rawValue = newVal;\r\n            this._value = this._shallow ? newVal : toReactive(newVal);\r\n            triggerRefValue(this, newVal);\r\n        }\r\n    }\r\n}\r\nfunction triggerRef(ref) {\r\n    triggerRefValue(ref, (process.env.NODE_ENV !== 'production') ? ref.value : void 0);\r\n}\r\nfunction unref(ref) {\r\n    return isRef(ref) ? ref.value : ref;\r\n}\r\nconst shallowUnwrapHandlers = {\r\n    get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),\r\n    set: (target, key, value, receiver) => {\r\n        const oldValue = target[key];\r\n        if (isRef(oldValue) && !isRef(value)) {\r\n            oldValue.value = value;\r\n            return true;\r\n        }\r\n        else {\r\n            return Reflect.set(target, key, value, receiver);\r\n        }\r\n    }\r\n};\r\nfunction proxyRefs(objectWithRefs) {\r\n    return isReactive(objectWithRefs)\r\n        ? objectWithRefs\r\n        : new Proxy(objectWithRefs, shallowUnwrapHandlers);\r\n}\r\nclass CustomRefImpl {\r\n    constructor(factory) {\r\n        this.dep = undefined;\r\n        this.__v_isRef = true;\r\n        const { get, set } = factory(() => trackRefValue(this), () => triggerRefValue(this));\r\n        this._get = get;\r\n        this._set = set;\r\n    }\r\n    get value() {\r\n        return this._get();\r\n    }\r\n    set value(newVal) {\r\n        this._set(newVal);\r\n    }\r\n}\r\nfunction customRef(factory) {\r\n    return new CustomRefImpl(factory);\r\n}\r\nfunction toRefs(object) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isProxy(object)) {\r\n        console.warn(`toRefs() expects a reactive object but received a plain one.`);\r\n    }\r\n    const ret = isArray(object) ? new Array(object.length) : {};\r\n    for (const key in object) {\r\n        ret[key] = toRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nclass ObjectRefImpl {\r\n    constructor(_object, _key) {\r\n        this._object = _object;\r\n        this._key = _key;\r\n        this.__v_isRef = true;\r\n    }\r\n    get value() {\r\n        return this._object[this._key];\r\n    }\r\n    set value(newVal) {\r\n        this._object[this._key] = newVal;\r\n    }\r\n}\r\nfunction toRef(object, key) {\r\n    const val = object[key];\r\n    return isRef(val) ? val : new ObjectRefImpl(object, key);\r\n}\n\nclass ComputedRefImpl {\r\n    constructor(getter, _setter, isReadonly) {\r\n        this._setter = _setter;\r\n        this.dep = undefined;\r\n        this._dirty = true;\r\n        this.__v_isRef = true;\r\n        this.effect = new ReactiveEffect(getter, () => {\r\n            if (!this._dirty) {\r\n                this._dirty = true;\r\n                triggerRefValue(this);\r\n            }\r\n        });\r\n        this[\"__v_isReadonly\" /* IS_READONLY */] = isReadonly;\r\n    }\r\n    get value() {\r\n        // the computed ref may get wrapped by other proxies e.g. readonly() #3376\r\n        const self = toRaw(this);\r\n        trackRefValue(self);\r\n        if (self._dirty) {\r\n            self._dirty = false;\r\n            self._value = self.effect.run();\r\n        }\r\n        return self._value;\r\n    }\r\n    set value(newValue) {\r\n        this._setter(newValue);\r\n    }\r\n}\r\nfunction computed(getterOrOptions, debugOptions) {\r\n    let getter;\r\n    let setter;\r\n    const onlyGetter = isFunction(getterOrOptions);\r\n    if (onlyGetter) {\r\n        getter = getterOrOptions;\r\n        setter = (process.env.NODE_ENV !== 'production')\r\n            ? () => {\r\n                console.warn('Write operation failed: computed value is readonly');\r\n            }\r\n            : NOOP;\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter);\r\n    if ((process.env.NODE_ENV !== 'production') && debugOptions) {\r\n        cRef.effect.onTrack = debugOptions.onTrack;\r\n        cRef.effect.onTrigger = debugOptions.onTrigger;\r\n    }\r\n    return cRef;\r\n}\n\nvar _a;\r\nconst tick = Promise.resolve();\r\nconst queue = [];\r\nlet queued = false;\r\nconst scheduler = (fn) => {\r\n    queue.push(fn);\r\n    if (!queued) {\r\n        queued = true;\r\n        tick.then(flush);\r\n    }\r\n};\r\nconst flush = () => {\r\n    for (let i = 0; i < queue.length; i++) {\r\n        queue[i]();\r\n    }\r\n    queue.length = 0;\r\n    queued = false;\r\n};\r\nclass DeferredComputedRefImpl {\r\n    constructor(getter) {\r\n        this.dep = undefined;\r\n        this._dirty = true;\r\n        this.__v_isRef = true;\r\n        this[_a] = true;\r\n        let compareTarget;\r\n        let hasCompareTarget = false;\r\n        let scheduled = false;\r\n        this.effect = new ReactiveEffect(getter, (computedTrigger) => {\r\n            if (this.dep) {\r\n                if (computedTrigger) {\r\n                    compareTarget = this._value;\r\n                    hasCompareTarget = true;\r\n                }\r\n                else if (!scheduled) {\r\n                    const valueToCompare = hasCompareTarget ? compareTarget : this._value;\r\n                    scheduled = true;\r\n                    hasCompareTarget = false;\r\n                    scheduler(() => {\r\n                        if (this.effect.active && this._get() !== valueToCompare) {\r\n                            triggerRefValue(this);\r\n                        }\r\n                        scheduled = false;\r\n                    });\r\n                }\r\n                // chained upstream computeds are notified synchronously to ensure\r\n                // value invalidation in case of sync access; normal effects are\r\n                // deferred to be triggered in scheduler.\r\n                for (const e of this.dep) {\r\n                    if (e.computed) {\r\n                        e.scheduler(true /* computedTrigger */);\r\n                    }\r\n                }\r\n            }\r\n            this._dirty = true;\r\n        });\r\n        this.effect.computed = true;\r\n    }\r\n    _get() {\r\n        if (this._dirty) {\r\n            this._dirty = false;\r\n            return (this._value = this.effect.run());\r\n        }\r\n        return this._value;\r\n    }\r\n    get value() {\r\n        trackRefValue(this);\r\n        // the computed ref may get wrapped by other proxies e.g. readonly() #3376\r\n        return toRaw(this)._get();\r\n    }\r\n}\r\n_a = \"__v_isReadonly\" /* IS_READONLY */;\r\nfunction deferredComputed(getter) {\r\n    return new DeferredComputedRefImpl(getter);\r\n}\n\nexport { EffectScope, ITERATE_KEY, ReactiveEffect, computed, customRef, deferredComputed, effect, effectScope, enableTracking, getCurrentScope, isProxy, isReactive, isReadonly, isRef, markRaw, onScopeDispose, pauseTracking, proxyRefs, reactive, readonly, ref, resetTracking, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, track, trigger, triggerRef, unref };\n", "import { toRaw, ref, pauseTracking, resetTracking, reactive, computed, isRef, shallowReactive, trigger, ReactiveEffect, isProxy, shallowReadonly, track, EffectScope, markRaw, proxyRefs, isReactive, isReadonly } from '@vue/reactivity';\nexport { EffectScope, ReactiveEffect, computed, customRef, effect, effectScope, getCurrentScope, isProxy, isReactive, isReadonly, isRef, markRaw, onScopeDispose, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, triggerRef, unref } from '@vue/reactivity';\nimport { extend, EMPTY_OBJ, toHandlerKey, isFunction as isFunction$1, toNumber, hyphenate, camelize, isArray, isOn, hasOwn, isModelListener, isObject as isObject$1, remove, isString, invokeArrayFns, isPromise as isPromise$1, NOOP, def, isReservedProp, EMPTY_ARR, capitalize, toRawType, makeMap, NO, getGlobalThis, normalizeClass, normalizeStyle, isGloballyWhitelisted, hasChanged, isSet, isMap, isPlainObject } from '@vue/shared';\nexport { camelize, capitalize, normalizeClass, normalizeProps, normalizeStyle, toDisplayString, toHandlerKey } from '@vue/shared';\n\n/* eslint-disable no-restricted-globals */\r\nlet isHmrUpdating = false;\r\nconst hmrDirtyComponents = new Set();\r\n// Expose the HMR runtime on the global object\r\n// This makes it entirely tree-shakable without polluting the exports and makes\r\n// it easier to be used in toolings like vue-loader\r\n// Note: for a component to be eligible for HMR it also needs the __hmrId option\r\n// to be set so that its instances can be registered / removed.\r\nif ((process.env.NODE_ENV !== 'production')) {\r\n    const globalObject = typeof global !== 'undefined'\r\n        ? global\r\n        : typeof self !== 'undefined'\r\n            ? self\r\n            : typeof window !== 'undefined'\r\n                ? window\r\n                : {};\r\n    globalObject.__VUE_HMR_RUNTIME__ = {\r\n        createRecord: tryWrap(createRecord),\r\n        rerender: tryWrap(rerender),\r\n        reload: tryWrap(reload)\r\n    };\r\n}\r\nconst map = new Map();\r\nfunction registerHMR(instance) {\r\n    const id = instance.type.__hmrId;\r\n    let record = map.get(id);\r\n    if (!record) {\r\n        createRecord(id);\r\n        record = map.get(id);\r\n    }\r\n    record.add(instance);\r\n}\r\nfunction unregisterHMR(instance) {\r\n    map.get(instance.type.__hmrId).delete(instance);\r\n}\r\nfunction createRecord(id) {\r\n    if (map.has(id)) {\r\n        return false;\r\n    }\r\n    map.set(id, new Set());\r\n    return true;\r\n}\r\nfunction normalizeClassComponent(component) {\r\n    return isClassComponent(component) ? component.__vccOpts : component;\r\n}\r\nfunction rerender(id, newRender) {\r\n    const record = map.get(id);\r\n    if (!record) {\r\n        return;\r\n    }\r\n    [...record].forEach(instance => {\r\n        if (newRender) {\r\n            instance.render = newRender;\r\n            normalizeClassComponent(instance.type).render = newRender;\r\n        }\r\n        instance.renderCache = [];\r\n        // this flag forces child components with slot content to update\r\n        isHmrUpdating = true;\r\n        instance.update();\r\n        isHmrUpdating = false;\r\n    });\r\n}\r\nfunction reload(id, newComp) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    newComp = normalizeClassComponent(newComp);\r\n    // create a snapshot which avoids the set being mutated during updates\r\n    const instances = [...record];\r\n    for (const instance of instances) {\r\n        const oldComp = normalizeClassComponent(instance.type);\r\n        if (!hmrDirtyComponents.has(oldComp)) {\r\n            // 1. Update existing comp definition to match new one\r\n            extend(oldComp, newComp);\r\n            for (const key in oldComp) {\r\n                if (key !== '__file' && !(key in newComp)) {\r\n                    delete oldComp[key];\r\n                }\r\n            }\r\n            // 2. mark definition dirty. This forces the renderer to replace the\r\n            // component on patch.\r\n            hmrDirtyComponents.add(oldComp);\r\n        }\r\n        // 3. invalidate options resolution cache\r\n        instance.appContext.optionsCache.delete(instance.type);\r\n        // 4. actually update\r\n        if (instance.ceReload) {\r\n            // custom element\r\n            hmrDirtyComponents.add(oldComp);\r\n            instance.ceReload(newComp.styles);\r\n            hmrDirtyComponents.delete(oldComp);\r\n        }\r\n        else if (instance.parent) {\r\n            // 4. Force the parent instance to re-render. This will cause all updated\r\n            // components to be unmounted and re-mounted. Queue the update so that we\r\n            // don't end up forcing the same parent to re-render multiple times.\r\n            queueJob(instance.parent.update);\r\n            // instance is the inner component of an async custom element\r\n            // invoke to reset styles\r\n            if (instance.parent.type.__asyncLoader &&\r\n                instance.parent.ceReload) {\r\n                instance.parent.ceReload(newComp.styles);\r\n            }\r\n        }\r\n        else if (instance.appContext.reload) {\r\n            // root instance mounted via createApp() has a reload method\r\n            instance.appContext.reload();\r\n        }\r\n        else if (typeof window !== 'undefined') {\r\n            // root instance inside tree created via raw render(). Force reload.\r\n            window.location.reload();\r\n        }\r\n        else {\r\n            console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');\r\n        }\r\n    }\r\n    // 5. make sure to cleanup dirty hmr components after update\r\n    queuePostFlushCb(() => {\r\n        for (const instance of instances) {\r\n            hmrDirtyComponents.delete(normalizeClassComponent(instance.type));\r\n        }\r\n    });\r\n}\r\nfunction tryWrap(fn) {\r\n    return (id, arg) => {\r\n        try {\r\n            return fn(id, arg);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +\r\n                `Full reload required.`);\r\n        }\r\n    };\r\n}\n\nlet devtools;\r\nlet buffer = [];\r\nfunction emit(event, ...args) {\r\n    if (devtools) {\r\n        devtools.emit(event, ...args);\r\n    }\r\n    else {\r\n        buffer.push({ event, args });\r\n    }\r\n}\r\nfunction setDevtoolsHook(hook, target) {\r\n    devtools = hook;\r\n    if (devtools) {\r\n        devtools.enabled = true;\r\n        buffer.forEach(({ event, args }) => devtools.emit(event, ...args));\r\n        buffer = [];\r\n    }\r\n    else {\r\n        const replay = (target.__VUE_DEVTOOLS_HOOK_REPLAY__ =\r\n            target.__VUE_DEVTOOLS_HOOK_REPLAY__ || []);\r\n        replay.push((newHook) => {\r\n            setDevtoolsHook(newHook, target);\r\n        });\r\n    }\r\n}\r\nfunction devtoolsInitApp(app, version) {\r\n    emit(\"app:init\" /* APP_INIT */, app, version, {\r\n        Fragment,\r\n        Text,\r\n        Comment,\r\n        Static\r\n    });\r\n}\r\nfunction devtoolsUnmountApp(app) {\r\n    emit(\"app:unmount\" /* APP_UNMOUNT */, app);\r\n}\r\nconst devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook(\"component:added\" /* COMPONENT_ADDED */);\r\nconst devtoolsComponentUpdated = \r\n/*#__PURE__*/ createDevtoolsComponentHook(\"component:updated\" /* COMPONENT_UPDATED */);\r\nconst devtoolsComponentRemoved = \r\n/*#__PURE__*/ createDevtoolsComponentHook(\"component:removed\" /* COMPONENT_REMOVED */);\r\nfunction createDevtoolsComponentHook(hook) {\r\n    return (component) => {\r\n        emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);\r\n    };\r\n}\r\nconst devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook(\"perf:start\" /* PERFORMANCE_START */);\r\nconst devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook(\"perf:end\" /* PERFORMANCE_END */);\r\nfunction createDevtoolsPerformanceHook(hook) {\r\n    return (component, type, time) => {\r\n        emit(hook, component.appContext.app, component.uid, component, type, time);\r\n    };\r\n}\r\nfunction devtoolsComponentEmit(component, event, params) {\r\n    emit(\"component:emit\" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);\r\n}\n\nfunction emit$1(instance, event, ...rawArgs) {\r\n    const props = instance.vnode.props || EMPTY_OBJ;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const { emitsOptions, propsOptions: [propsOptions] } = instance;\r\n        if (emitsOptions) {\r\n            if (!(event in emitsOptions) &&\r\n                !(false )) {\r\n                if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {\r\n                    warn(`Component emitted event \"${event}\" but it is neither declared in ` +\r\n                        `the emits option nor as an \"${toHandlerKey(event)}\" prop.`);\r\n                }\r\n            }\r\n            else {\r\n                const validator = emitsOptions[event];\r\n                if (isFunction$1(validator)) {\r\n                    const isValid = validator(...rawArgs);\r\n                    if (!isValid) {\r\n                        warn(`Invalid event arguments: event validation failed for event \"${event}\".`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let args = rawArgs;\r\n    const isModelListener = event.startsWith('update:');\r\n    // for v-model update:xxx events, apply modifiers on args\r\n    const modelArg = isModelListener && event.slice(7);\r\n    if (modelArg && modelArg in props) {\r\n        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;\r\n        const { number, trim } = props[modifiersKey] || EMPTY_OBJ;\r\n        if (trim) {\r\n            args = rawArgs.map(a => a.trim());\r\n        }\r\n        else if (number) {\r\n            args = rawArgs.map(toNumber);\r\n        }\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsComponentEmit(instance, event, args);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const lowerCaseEvent = event.toLowerCase();\r\n        if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {\r\n            warn(`Event \"${lowerCaseEvent}\" is emitted in component ` +\r\n                `${formatComponentName(instance, instance.type)} but the handler is registered for \"${event}\". ` +\r\n                `Note that HTML attributes are case-insensitive and you cannot use ` +\r\n                `v-on to listen to camelCase events when using in-DOM templates. ` +\r\n                `You should probably use \"${hyphenate(event)}\" instead of \"${event}\".`);\r\n        }\r\n    }\r\n    let handlerName;\r\n    let handler = props[(handlerName = toHandlerKey(event))] ||\r\n        // also try camelCase event handler (#2249)\r\n        props[(handlerName = toHandlerKey(camelize(event)))];\r\n    // for v-model update:xxx events, also trigger kebab-case equivalent\r\n    // for props passed via kebab-case\r\n    if (!handler && isModelListener) {\r\n        handler = props[(handlerName = toHandlerKey(hyphenate(event)))];\r\n    }\r\n    if (handler) {\r\n        callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n    const onceHandler = props[handlerName + `Once`];\r\n    if (onceHandler) {\r\n        if (!instance.emitted) {\r\n            instance.emitted = {};\r\n        }\r\n        else if (instance.emitted[handlerName]) {\r\n            return;\r\n        }\r\n        instance.emitted[handlerName] = true;\r\n        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n}\r\nfunction normalizeEmitsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.emitsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached !== undefined) {\r\n        return cached;\r\n    }\r\n    const raw = comp.emits;\r\n    let normalized = {};\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction$1(comp)) {\r\n        const extendEmits = (raw) => {\r\n            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);\r\n            if (normalizedFromExtend) {\r\n                hasExtends = true;\r\n                extend(normalized, normalizedFromExtend);\r\n            }\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendEmits);\r\n        }\r\n        if (comp.extends) {\r\n            extendEmits(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendEmits);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, null);\r\n        return null;\r\n    }\r\n    if (isArray(raw)) {\r\n        raw.forEach(key => (normalized[key] = null));\r\n    }\r\n    else {\r\n        extend(normalized, raw);\r\n    }\r\n    cache.set(comp, normalized);\r\n    return normalized;\r\n}\r\n// Check if an incoming prop key is a declared emit event listener.\r\n// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are\r\n// both considered matched listeners.\r\nfunction isEmitListener(options, key) {\r\n    if (!options || !isOn(key)) {\r\n        return false;\r\n    }\r\n    key = key.slice(2).replace(/Once$/, '');\r\n    return (hasOwn(options, key[0].toLowerCase() + key.slice(1)) ||\r\n        hasOwn(options, hyphenate(key)) ||\r\n        hasOwn(options, key));\r\n}\n\n/**\r\n * mark the current rendering instance for asset resolution (e.g.\r\n * resolveComponent, resolveDirective) during render\r\n */\r\nlet currentRenderingInstance = null;\r\nlet currentScopeId = null;\r\n/**\r\n * Note: rendering calls maybe nested. The function returns the parent rendering\r\n * instance if present, which should be restored after the render is done:\r\n *\r\n * ```js\r\n * const prev = setCurrentRenderingInstance(i)\r\n * // ...render\r\n * setCurrentRenderingInstance(prev)\r\n * ```\r\n */\r\nfunction setCurrentRenderingInstance(instance) {\r\n    const prev = currentRenderingInstance;\r\n    currentRenderingInstance = instance;\r\n    currentScopeId = (instance && instance.type.__scopeId) || null;\r\n    return prev;\r\n}\r\n/**\r\n * Set scope id when creating hoisted vnodes.\r\n * @private compiler helper\r\n */\r\nfunction pushScopeId(id) {\r\n    currentScopeId = id;\r\n}\r\n/**\r\n * Technically we no longer need this after 3.0.8 but we need to keep the same\r\n * API for backwards compat w/ code generated by compilers.\r\n * @private\r\n */\r\nfunction popScopeId() {\r\n    currentScopeId = null;\r\n}\r\n/**\r\n * Only for backwards compat\r\n * @private\r\n */\r\nconst withScopeId = (_id) => withCtx;\r\n/**\r\n * Wrap a slot function to memoize current rendering instance\r\n * @private compiler helper\r\n */\r\nfunction withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only\r\n) {\r\n    if (!ctx)\r\n        return fn;\r\n    // already normalized\r\n    if (fn._n) {\r\n        return fn;\r\n    }\r\n    const renderFnWithContext = (...args) => {\r\n        // If a user calls a compiled slot inside a template expression (#1745), it\r\n        // can mess up block tracking, so by default we disable block tracking and\r\n        // force bail out when invoking a compiled slot (indicated by the ._d flag).\r\n        // This isn't necessary if rendering a compiled `<slot>`, so we flip the\r\n        // ._d flag off when invoking the wrapped fn inside `renderSlot`.\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(-1);\r\n        }\r\n        const prevInstance = setCurrentRenderingInstance(ctx);\r\n        const res = fn(...args);\r\n        setCurrentRenderingInstance(prevInstance);\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(1);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentUpdated(ctx);\r\n        }\r\n        return res;\r\n    };\r\n    // mark normalized to avoid duplicated wrapping\r\n    renderFnWithContext._n = true;\r\n    // mark this as compiled by default\r\n    // this is used in vnode.ts -> normalizeChildren() to set the slot\r\n    // rendering flag.\r\n    renderFnWithContext._c = true;\r\n    // disable block tracking by default\r\n    renderFnWithContext._d = true;\r\n    return renderFnWithContext;\r\n}\n\n/**\r\n * dev only flag to track whether $attrs was used during render.\r\n * If $attrs was used during render then the warning for failed attrs\r\n * fallthrough can be suppressed.\r\n */\r\nlet accessedAttrs = false;\r\nfunction markAttrsAccessed() {\r\n    accessedAttrs = true;\r\n}\r\nfunction renderComponentRoot(instance) {\r\n    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;\r\n    let result;\r\n    let fallthroughAttrs;\r\n    const prev = setCurrentRenderingInstance(instance);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        accessedAttrs = false;\r\n    }\r\n    try {\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            // withProxy is a proxy with a different `has` trap only for\r\n            // runtime-compiled render functions using `with` block.\r\n            const proxyToUse = withProxy || proxy;\r\n            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\r\n            fallthroughAttrs = attrs;\r\n        }\r\n        else {\r\n            // functional\r\n            const render = Component;\r\n            // in dev, mark attrs accessed if optional props (attrs === props)\r\n            if ((process.env.NODE_ENV !== 'production') && attrs === props) {\r\n                markAttrsAccessed();\r\n            }\r\n            result = normalizeVNode(render.length > 1\r\n                ? render(props, (process.env.NODE_ENV !== 'production')\r\n                    ? {\r\n                        get attrs() {\r\n                            markAttrsAccessed();\r\n                            return attrs;\r\n                        },\r\n                        slots,\r\n                        emit\r\n                    }\r\n                    : { attrs, slots, emit })\r\n                : render(props, null /* we know it doesn't need it */));\r\n            fallthroughAttrs = Component.props\r\n                ? attrs\r\n                : getFunctionalFallthrough(attrs);\r\n        }\r\n    }\r\n    catch (err) {\r\n        blockStack.length = 0;\r\n        handleError(err, instance, 1 /* RENDER_FUNCTION */);\r\n        result = createVNode(Comment);\r\n    }\r\n    // attr merging\r\n    // in dev mode, comments are preserved, and it's possible for a template\r\n    // to have comments along side the root element which makes it a fragment\r\n    let root = result;\r\n    let setRoot = undefined;\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        result.patchFlag > 0 &&\r\n        result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n        [root, setRoot] = getChildRoot(result);\r\n    }\r\n    if (fallthroughAttrs && inheritAttrs !== false) {\r\n        const keys = Object.keys(fallthroughAttrs);\r\n        const { shapeFlag } = root;\r\n        if (keys.length) {\r\n            if (shapeFlag & (1 /* ELEMENT */ | 6 /* COMPONENT */)) {\r\n                if (propsOptions && keys.some(isModelListener)) {\r\n                    // If a v-model listener (onUpdate:xxx) has a corresponding declared\r\n                    // prop, it indicates this component expects to handle v-model and\r\n                    // it should not fallthrough.\r\n                    // related: #1543, #1643, #1989\r\n                    fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\r\n                }\r\n                root = cloneVNode(root, fallthroughAttrs);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production') && !accessedAttrs && root.type !== Comment) {\r\n                const allAttrs = Object.keys(attrs);\r\n                const eventAttrs = [];\r\n                const extraAttrs = [];\r\n                for (let i = 0, l = allAttrs.length; i < l; i++) {\r\n                    const key = allAttrs[i];\r\n                    if (isOn(key)) {\r\n                        // ignore v-model handlers when they fail to fallthrough\r\n                        if (!isModelListener(key)) {\r\n                            // remove `on`, lowercase first letter to reflect event casing\r\n                            // accurately\r\n                            eventAttrs.push(key[2].toLowerCase() + key.slice(3));\r\n                        }\r\n                    }\r\n                    else {\r\n                        extraAttrs.push(key);\r\n                    }\r\n                }\r\n                if (extraAttrs.length) {\r\n                    warn(`Extraneous non-props attributes (` +\r\n                        `${extraAttrs.join(', ')}) ` +\r\n                        `were passed to component but could not be automatically inherited ` +\r\n                        `because component renders fragment or text root nodes.`);\r\n                }\r\n                if (eventAttrs.length) {\r\n                    warn(`Extraneous non-emits event listeners (` +\r\n                        `${eventAttrs.join(', ')}) ` +\r\n                        `were passed to component but could not be automatically inherited ` +\r\n                        `because component renders fragment or text root nodes. ` +\r\n                        `If the listener is intended to be a component custom event listener only, ` +\r\n                        `declare it using the \"emits\" option.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // inherit directives\r\n    if (vnode.dirs) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n            warn(`Runtime directive used on component with non-element root node. ` +\r\n                `The directives will not function as intended.`);\r\n        }\r\n        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\r\n    }\r\n    // inherit transition data\r\n    if (vnode.transition) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n            warn(`Component inside <Transition> renders non-element root node ` +\r\n                `that cannot be animated.`);\r\n        }\r\n        root.transition = vnode.transition;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && setRoot) {\r\n        setRoot(root);\r\n    }\r\n    else {\r\n        result = root;\r\n    }\r\n    setCurrentRenderingInstance(prev);\r\n    return result;\r\n}\r\n/**\r\n * dev only\r\n * In dev mode, template root level comments are rendered, which turns the\r\n * template into a fragment root, but we need to locate the single element\r\n * root for attrs and scope id processing.\r\n */\r\nconst getChildRoot = (vnode) => {\r\n    const rawChildren = vnode.children;\r\n    const dynamicChildren = vnode.dynamicChildren;\r\n    const childRoot = filterSingleRoot(rawChildren);\r\n    if (!childRoot) {\r\n        return [vnode, undefined];\r\n    }\r\n    const index = rawChildren.indexOf(childRoot);\r\n    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\r\n    const setRoot = (updatedRoot) => {\r\n        rawChildren[index] = updatedRoot;\r\n        if (dynamicChildren) {\r\n            if (dynamicIndex > -1) {\r\n                dynamicChildren[dynamicIndex] = updatedRoot;\r\n            }\r\n            else if (updatedRoot.patchFlag > 0) {\r\n                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\r\n            }\r\n        }\r\n    };\r\n    return [normalizeVNode(childRoot), setRoot];\r\n};\r\nfunction filterSingleRoot(children) {\r\n    let singleRoot;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        if (isVNode(child)) {\r\n            // ignore user comment\r\n            if (child.type !== Comment || child.children === 'v-if') {\r\n                if (singleRoot) {\r\n                    // has more than 1 non-comment child, return now\r\n                    return;\r\n                }\r\n                else {\r\n                    singleRoot = child;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    return singleRoot;\r\n}\r\nconst getFunctionalFallthrough = (attrs) => {\r\n    let res;\r\n    for (const key in attrs) {\r\n        if (key === 'class' || key === 'style' || isOn(key)) {\r\n            (res || (res = {}))[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst filterModelListeners = (attrs, props) => {\r\n    const res = {};\r\n    for (const key in attrs) {\r\n        if (!isModelListener(key) || !(key.slice(9) in props)) {\r\n            res[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst isElementRoot = (vnode) => {\r\n    return (vnode.shapeFlag & (6 /* COMPONENT */ | 1 /* ELEMENT */) ||\r\n        vnode.type === Comment // potential v-if branch switch\r\n    );\r\n};\r\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\r\n    const { props: prevProps, children: prevChildren, component } = prevVNode;\r\n    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;\r\n    const emits = component.emitsOptions;\r\n    // Parent component's render function was hot-updated. Since this may have\r\n    // caused the child component's slots content to have changed, we need to\r\n    // force the child to update as well.\r\n    if ((process.env.NODE_ENV !== 'production') && (prevChildren || nextChildren) && isHmrUpdating) {\r\n        return true;\r\n    }\r\n    // force child update for runtime directive or transition on component vnode.\r\n    if (nextVNode.dirs || nextVNode.transition) {\r\n        return true;\r\n    }\r\n    if (optimized && patchFlag >= 0) {\r\n        if (patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n            // slot content that references values that might have changed,\r\n            // e.g. in a v-for\r\n            return true;\r\n        }\r\n        if (patchFlag & 16 /* FULL_PROPS */) {\r\n            if (!prevProps) {\r\n                return !!nextProps;\r\n            }\r\n            // presence of this flag indicates props are always non-null\r\n            return hasPropsChanged(prevProps, nextProps, emits);\r\n        }\r\n        else if (patchFlag & 8 /* PROPS */) {\r\n            const dynamicProps = nextVNode.dynamicProps;\r\n            for (let i = 0; i < dynamicProps.length; i++) {\r\n                const key = dynamicProps[i];\r\n                if (nextProps[key] !== prevProps[key] &&\r\n                    !isEmitListener(emits, key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // this path is only taken by manually written render functions\r\n        // so presence of any children leads to a forced update\r\n        if (prevChildren || nextChildren) {\r\n            if (!nextChildren || !nextChildren.$stable) {\r\n                return true;\r\n            }\r\n        }\r\n        if (prevProps === nextProps) {\r\n            return false;\r\n        }\r\n        if (!prevProps) {\r\n            return !!nextProps;\r\n        }\r\n        if (!nextProps) {\r\n            return true;\r\n        }\r\n        return hasPropsChanged(prevProps, nextProps, emits);\r\n    }\r\n    return false;\r\n}\r\nfunction hasPropsChanged(prevProps, nextProps, emitsOptions) {\r\n    const nextKeys = Object.keys(nextProps);\r\n    if (nextKeys.length !== Object.keys(prevProps).length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < nextKeys.length; i++) {\r\n        const key = nextKeys[i];\r\n        if (nextProps[key] !== prevProps[key] &&\r\n            !isEmitListener(emitsOptions, key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction updateHOCHostEl({ vnode, parent }, el // HostNode\r\n) {\r\n    while (parent && parent.subTree === vnode) {\r\n        (vnode = parent.vnode).el = el;\r\n        parent = parent.parent;\r\n    }\r\n}\n\nconst isSuspense = (type) => type.__isSuspense;\r\n// Suspense exposes a component-like API, and is treated like a component\r\n// in the compiler, but internally it's a special built-in type that hooks\r\n// directly into the renderer.\r\nconst SuspenseImpl = {\r\n    name: 'Suspense',\r\n    // In order to make Suspense tree-shakable, we need to avoid importing it\r\n    // directly in the renderer. The renderer checks for the __isSuspense flag\r\n    // on a vnode's type and calls the `process` method, passing in renderer\r\n    // internals.\r\n    __isSuspense: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, \r\n    // platform-specific impl passed from renderer\r\n    rendererInternals) {\r\n        if (n1 == null) {\r\n            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n        else {\r\n            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n    },\r\n    hydrate: hydrateSuspense,\r\n    create: createSuspenseBoundary,\r\n    normalize: normalizeSuspenseChildren\r\n};\r\n// Force-casted public typing for h and TSX props inference\r\nconst Suspense = (SuspenseImpl );\r\nfunction triggerEvent(vnode, name) {\r\n    const eventListener = vnode.props && vnode.props[name];\r\n    if (isFunction$1(eventListener)) {\r\n        eventListener();\r\n    }\r\n}\r\nfunction mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {\r\n    const { p: patch, o: { createElement } } = rendererInternals;\r\n    const hiddenContainer = createElement('div');\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));\r\n    // start mounting the content subtree in an off-dom container\r\n    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);\r\n    // now check if we have encountered any async deps\r\n    if (suspense.deps > 0) {\r\n        // has async\r\n        // invoke @fallback event\r\n        triggerEvent(vnode, 'onPending');\r\n        triggerEvent(vnode, 'onFallback');\r\n        // mount the fallback tree\r\n        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n        isSVG, slotScopeIds);\r\n        setActiveBranch(suspense, vnode.ssFallback);\r\n    }\r\n    else {\r\n        // Suspense has no async deps. Just resolve.\r\n        suspense.resolve();\r\n    }\r\n}\r\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {\r\n    const suspense = (n2.suspense = n1.suspense);\r\n    suspense.vnode = n2;\r\n    n2.el = n1.el;\r\n    const newBranch = n2.ssContent;\r\n    const newFallback = n2.ssFallback;\r\n    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;\r\n    if (pendingBranch) {\r\n        suspense.pendingBranch = newBranch;\r\n        if (isSameVNodeType(newBranch, pendingBranch)) {\r\n            // same root type but content may have changed.\r\n            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                suspense.resolve();\r\n            }\r\n            else if (isInFallback) {\r\n                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, newFallback);\r\n            }\r\n        }\r\n        else {\r\n            // toggled before pending tree is resolved\r\n            suspense.pendingId++;\r\n            if (isHydrating) {\r\n                // if toggled before hydration is finished, the current DOM tree is\r\n                // no longer valid. set it as the active branch so it will be unmounted\r\n                // when resolved\r\n                suspense.isHydrating = false;\r\n                suspense.activeBranch = pendingBranch;\r\n            }\r\n            else {\r\n                unmount(pendingBranch, parentComponent, suspense);\r\n            }\r\n            // increment pending ID. this is used to invalidate async callbacks\r\n            // reset suspense state\r\n            suspense.deps = 0;\r\n            // discard effects from pending branch\r\n            suspense.effects.length = 0;\r\n            // discard previous container\r\n            suspense.hiddenContainer = createElement('div');\r\n            if (isInFallback) {\r\n                // already in fallback state\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n                else {\r\n                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                    isSVG, slotScopeIds, optimized);\r\n                    setActiveBranch(suspense, newFallback);\r\n                }\r\n            }\r\n            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n                // toggled \"back\" to current active branch\r\n                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                // force resolve\r\n                suspense.resolve(true);\r\n            }\r\n            else {\r\n                // switched to a 3rd branch\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n            // root did not change, just normal patch\r\n            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            setActiveBranch(suspense, newBranch);\r\n        }\r\n        else {\r\n            // root node toggled\r\n            // invoke @pending event\r\n            triggerEvent(n2, 'onPending');\r\n            // mount pending branch in off-dom container\r\n            suspense.pendingBranch = newBranch;\r\n            suspense.pendingId++;\r\n            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                // incoming branch has no async deps, resolve now.\r\n                suspense.resolve();\r\n            }\r\n            else {\r\n                const { timeout, pendingId } = suspense;\r\n                if (timeout > 0) {\r\n                    setTimeout(() => {\r\n                        if (suspense.pendingId === pendingId) {\r\n                            suspense.fallback(newFallback);\r\n                        }\r\n                    }, timeout);\r\n                }\r\n                else if (timeout === 0) {\r\n                    suspense.fallback(newFallback);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet hasWarned = false;\r\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\r\n    /* istanbul ignore if */\r\n    if ((process.env.NODE_ENV !== 'production') && !false && !hasWarned) {\r\n        hasWarned = true;\r\n        // @ts-ignore `console.info` cannot be null error\r\n        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);\r\n    }\r\n    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;\r\n    const timeout = toNumber(vnode.props && vnode.props.timeout);\r\n    const suspense = {\r\n        vnode,\r\n        parent,\r\n        parentComponent,\r\n        isSVG,\r\n        container,\r\n        hiddenContainer,\r\n        anchor,\r\n        deps: 0,\r\n        pendingId: 0,\r\n        timeout: typeof timeout === 'number' ? timeout : -1,\r\n        activeBranch: null,\r\n        pendingBranch: null,\r\n        isInFallback: true,\r\n        isHydrating,\r\n        isUnmounted: false,\r\n        effects: [],\r\n        resolve(resume = false) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!resume && !suspense.pendingBranch) {\r\n                    throw new Error(`suspense.resolve() is called without a pending branch.`);\r\n                }\r\n                if (suspense.isUnmounted) {\r\n                    throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);\r\n                }\r\n            }\r\n            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;\r\n            if (suspense.isHydrating) {\r\n                suspense.isHydrating = false;\r\n            }\r\n            else if (!resume) {\r\n                const delayEnter = activeBranch &&\r\n                    pendingBranch.transition &&\r\n                    pendingBranch.transition.mode === 'out-in';\r\n                if (delayEnter) {\r\n                    activeBranch.transition.afterLeave = () => {\r\n                        if (pendingId === suspense.pendingId) {\r\n                            move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                        }\r\n                    };\r\n                }\r\n                // this is initial anchor on mount\r\n                let { anchor } = suspense;\r\n                // unmount current active tree\r\n                if (activeBranch) {\r\n                    // if the fallback tree was mounted, it may have been moved\r\n                    // as part of a parent suspense. get the latest anchor for insertion\r\n                    anchor = next(activeBranch);\r\n                    unmount(activeBranch, parentComponent, suspense, true);\r\n                }\r\n                if (!delayEnter) {\r\n                    // move content from off-dom container to actual container\r\n                    move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                }\r\n            }\r\n            setActiveBranch(suspense, pendingBranch);\r\n            suspense.pendingBranch = null;\r\n            suspense.isInFallback = false;\r\n            // flush buffered effects\r\n            // check if there is a pending parent suspense\r\n            let parent = suspense.parent;\r\n            let hasUnresolvedAncestor = false;\r\n            while (parent) {\r\n                if (parent.pendingBranch) {\r\n                    // found a pending parent suspense, merge buffered post jobs\r\n                    // into that parent\r\n                    parent.effects.push(...effects);\r\n                    hasUnresolvedAncestor = true;\r\n                    break;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n            // no pending parent suspense, flush all jobs\r\n            if (!hasUnresolvedAncestor) {\r\n                queuePostFlushCb(effects);\r\n            }\r\n            suspense.effects = [];\r\n            // invoke @resolve event\r\n            triggerEvent(vnode, 'onResolve');\r\n        },\r\n        fallback(fallbackVNode) {\r\n            if (!suspense.pendingBranch) {\r\n                return;\r\n            }\r\n            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;\r\n            // invoke @fallback event\r\n            triggerEvent(vnode, 'onFallback');\r\n            const anchor = next(activeBranch);\r\n            const mountFallback = () => {\r\n                if (!suspense.isInFallback) {\r\n                    return;\r\n                }\r\n                // mount the fallback tree\r\n                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, fallbackVNode);\r\n            };\r\n            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';\r\n            if (delayEnter) {\r\n                activeBranch.transition.afterLeave = mountFallback;\r\n            }\r\n            suspense.isInFallback = true;\r\n            // unmount current active branch\r\n            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now\r\n            true // shouldRemove\r\n            );\r\n            if (!delayEnter) {\r\n                mountFallback();\r\n            }\r\n        },\r\n        move(container, anchor, type) {\r\n            suspense.activeBranch &&\r\n                move(suspense.activeBranch, container, anchor, type);\r\n            suspense.container = container;\r\n        },\r\n        next() {\r\n            return suspense.activeBranch && next(suspense.activeBranch);\r\n        },\r\n        registerDep(instance, setupRenderEffect) {\r\n            const isInPendingSuspense = !!suspense.pendingBranch;\r\n            if (isInPendingSuspense) {\r\n                suspense.deps++;\r\n            }\r\n            const hydratedEl = instance.vnode.el;\r\n            instance\r\n                .asyncDep.catch(err => {\r\n                handleError(err, instance, 0 /* SETUP_FUNCTION */);\r\n            })\r\n                .then(asyncSetupResult => {\r\n                // retry when the setup() promise resolves.\r\n                // component may have been unmounted before resolve.\r\n                if (instance.isUnmounted ||\r\n                    suspense.isUnmounted ||\r\n                    suspense.pendingId !== instance.suspenseId) {\r\n                    return;\r\n                }\r\n                // retry from this component\r\n                instance.asyncResolved = true;\r\n                const { vnode } = instance;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(vnode);\r\n                }\r\n                handleSetupResult(instance, asyncSetupResult, false);\r\n                if (hydratedEl) {\r\n                    // vnode may have been replaced if an update happened before the\r\n                    // async dep is resolved.\r\n                    vnode.el = hydratedEl;\r\n                }\r\n                const placeholder = !hydratedEl && instance.subTree.el;\r\n                setupRenderEffect(instance, vnode, \r\n                // component may have been moved before resolve.\r\n                // if this is not a hydration, instance.subTree will be the comment\r\n                // placeholder.\r\n                parentNode(hydratedEl || instance.subTree.el), \r\n                // anchor will not be used if this is hydration, so only need to\r\n                // consider the comment placeholder case.\r\n                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);\r\n                if (placeholder) {\r\n                    remove(placeholder);\r\n                }\r\n                updateHOCHostEl(instance, vnode.el);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                // only decrease deps count if suspense is not already resolved\r\n                if (isInPendingSuspense && --suspense.deps === 0) {\r\n                    suspense.resolve();\r\n                }\r\n            });\r\n        },\r\n        unmount(parentSuspense, doRemove) {\r\n            suspense.isUnmounted = true;\r\n            if (suspense.activeBranch) {\r\n                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n            if (suspense.pendingBranch) {\r\n                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n        }\r\n    };\r\n    return suspense;\r\n}\r\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {\r\n    /* eslint-disable no-restricted-globals */\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true /* hydrating */));\r\n    // there are two possible scenarios for server-rendered suspense:\r\n    // - success: ssr content should be fully resolved\r\n    // - failure: ssr content should be the fallback branch.\r\n    // however, on the client we don't really know if it has failed or not\r\n    // attempt to hydrate the DOM assuming it has succeeded, but we still\r\n    // need to construct a suspense boundary first\r\n    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);\r\n    if (suspense.deps === 0) {\r\n        suspense.resolve();\r\n    }\r\n    return result;\r\n    /* eslint-enable no-restricted-globals */\r\n}\r\nfunction normalizeSuspenseChildren(vnode) {\r\n    const { shapeFlag, children } = vnode;\r\n    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */;\r\n    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);\r\n    vnode.ssFallback = isSlotChildren\r\n        ? normalizeSuspenseSlot(children.fallback)\r\n        : createVNode(Comment);\r\n}\r\nfunction normalizeSuspenseSlot(s) {\r\n    let block;\r\n    if (isFunction$1(s)) {\r\n        const trackBlock = isBlockTreeEnabled && s._c;\r\n        if (trackBlock) {\r\n            // disableTracking: false\r\n            // allow block tracking for compiled slots\r\n            // (see ./componentRenderContext.ts)\r\n            s._d = false;\r\n            openBlock();\r\n        }\r\n        s = s();\r\n        if (trackBlock) {\r\n            s._d = true;\r\n            block = currentBlock;\r\n            closeBlock();\r\n        }\r\n    }\r\n    if (isArray(s)) {\r\n        const singleChild = filterSingleRoot(s);\r\n        if ((process.env.NODE_ENV !== 'production') && !singleChild) {\r\n            warn(`<Suspense> slots expect a single root node.`);\r\n        }\r\n        s = singleChild;\r\n    }\r\n    s = normalizeVNode(s);\r\n    if (block && !s.dynamicChildren) {\r\n        s.dynamicChildren = block.filter(c => c !== s);\r\n    }\r\n    return s;\r\n}\r\nfunction queueEffectWithSuspense(fn, suspense) {\r\n    if (suspense && suspense.pendingBranch) {\r\n        if (isArray(fn)) {\r\n            suspense.effects.push(...fn);\r\n        }\r\n        else {\r\n            suspense.effects.push(fn);\r\n        }\r\n    }\r\n    else {\r\n        queuePostFlushCb(fn);\r\n    }\r\n}\r\nfunction setActiveBranch(suspense, branch) {\r\n    suspense.activeBranch = branch;\r\n    const { vnode, parentComponent } = suspense;\r\n    const el = (vnode.el = branch.el);\r\n    // in case suspense is the root node of a component,\r\n    // recursively update the HOC el\r\n    if (parentComponent && parentComponent.subTree === vnode) {\r\n        parentComponent.vnode.el = el;\r\n        updateHOCHostEl(parentComponent, el);\r\n    }\r\n}\n\nfunction provide(key, value) {\r\n    if (!currentInstance) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`provide() can only be used inside setup().`);\r\n        }\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent's provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        // TS doesn't allow symbol as index type\r\n        provides[key] = value;\r\n    }\r\n}\r\nfunction inject(key, defaultValue, treatDefaultAsFactory = false) {\r\n    // fallback to `currentRenderingInstance` so that this can be called in\r\n    // a functional component\r\n    const instance = currentInstance || currentRenderingInstance;\r\n    if (instance) {\r\n        // #2400\r\n        // to support `app.use` plugins,\r\n        // fallback to appContext's `provides` if the intance is at root\r\n        const provides = instance.parent == null\r\n            ? instance.vnode.appContext && instance.vnode.appContext.provides\r\n            : instance.parent.provides;\r\n        if (provides && key in provides) {\r\n            // TS doesn't allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (arguments.length > 1) {\r\n            return treatDefaultAsFactory && isFunction$1(defaultValue)\r\n                ? defaultValue.call(instance.proxy)\r\n                : defaultValue;\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`injection \"${String(key)}\" not found.`);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`inject() can only be used inside setup() or functional components.`);\r\n    }\r\n}\n\nfunction useTransitionState() {\r\n    const state = {\r\n        isMounted: false,\r\n        isLeaving: false,\r\n        isUnmounting: false,\r\n        leavingVNodes: new Map()\r\n    };\r\n    onMounted(() => {\r\n        state.isMounted = true;\r\n    });\r\n    onBeforeUnmount(() => {\r\n        state.isUnmounting = true;\r\n    });\r\n    return state;\r\n}\r\nconst TransitionHookValidator = [Function, Array];\r\nconst BaseTransitionImpl = {\r\n    name: `BaseTransition`,\r\n    props: {\r\n        mode: String,\r\n        appear: Boolean,\r\n        persisted: Boolean,\r\n        // enter\r\n        onBeforeEnter: TransitionHookValidator,\r\n        onEnter: TransitionHookValidator,\r\n        onAfterEnter: TransitionHookValidator,\r\n        onEnterCancelled: TransitionHookValidator,\r\n        // leave\r\n        onBeforeLeave: TransitionHookValidator,\r\n        onLeave: TransitionHookValidator,\r\n        onAfterLeave: TransitionHookValidator,\r\n        onLeaveCancelled: TransitionHookValidator,\r\n        // appear\r\n        onBeforeAppear: TransitionHookValidator,\r\n        onAppear: TransitionHookValidator,\r\n        onAfterAppear: TransitionHookValidator,\r\n        onAppearCancelled: TransitionHookValidator\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevTransitionKey;\r\n        return () => {\r\n            const children = slots.default && getTransitionRawChildren(slots.default(), true);\r\n            if (!children || !children.length) {\r\n                return;\r\n            }\r\n            // warn multiple elements\r\n            if ((process.env.NODE_ENV !== 'production') && children.length > 1) {\r\n                warn('<transition> can only be used on a single element or component. Use ' +\r\n                    '<transition-group> for lists.');\r\n            }\r\n            // there's no need to track reactivity for these props so use the raw\r\n            // props for a bit better perf\r\n            const rawProps = toRaw(props);\r\n            const { mode } = rawProps;\r\n            // check mode\r\n            if ((process.env.NODE_ENV !== 'production') && mode && !['in-out', 'out-in', 'default'].includes(mode)) {\r\n                warn(`invalid <transition> mode: ${mode}`);\r\n            }\r\n            // at this point children has a guaranteed length of 1.\r\n            const child = children[0];\r\n            if (state.isLeaving) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            // in the case of <transition><keep-alive/></transition>, we need to\r\n            // compare the type of the kept-alive children.\r\n            const innerChild = getKeepAliveChild(child);\r\n            if (!innerChild) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);\r\n            setTransitionHooks(innerChild, enterHooks);\r\n            const oldChild = instance.subTree;\r\n            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);\r\n            let transitionKeyChanged = false;\r\n            const { getTransitionKey } = innerChild.type;\r\n            if (getTransitionKey) {\r\n                const key = getTransitionKey();\r\n                if (prevTransitionKey === undefined) {\r\n                    prevTransitionKey = key;\r\n                }\r\n                else if (key !== prevTransitionKey) {\r\n                    prevTransitionKey = key;\r\n                    transitionKeyChanged = true;\r\n                }\r\n            }\r\n            // handle mode\r\n            if (oldInnerChild &&\r\n                oldInnerChild.type !== Comment &&\r\n                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\r\n                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\r\n                // update old tree's hooks in case of dynamic transition\r\n                setTransitionHooks(oldInnerChild, leavingHooks);\r\n                // switching between different views\r\n                if (mode === 'out-in') {\r\n                    state.isLeaving = true;\r\n                    // return placeholder node and queue update when leave finishes\r\n                    leavingHooks.afterLeave = () => {\r\n                        state.isLeaving = false;\r\n                        instance.update();\r\n                    };\r\n                    return emptyPlaceholder(child);\r\n                }\r\n                else if (mode === 'in-out' && innerChild.type !== Comment) {\r\n                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\r\n                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\r\n                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;\r\n                        // early removal callback\r\n                        el._leaveCb = () => {\r\n                            earlyRemove();\r\n                            el._leaveCb = undefined;\r\n                            delete enterHooks.delayedLeave;\r\n                        };\r\n                        enterHooks.delayedLeave = delayedLeave;\r\n                    };\r\n                }\r\n            }\r\n            return child;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst BaseTransition = BaseTransitionImpl;\r\nfunction getLeavingNodesForType(state, vnode) {\r\n    const { leavingVNodes } = state;\r\n    let leavingVNodesCache = leavingVNodes.get(vnode.type);\r\n    if (!leavingVNodesCache) {\r\n        leavingVNodesCache = Object.create(null);\r\n        leavingVNodes.set(vnode.type, leavingVNodesCache);\r\n    }\r\n    return leavingVNodesCache;\r\n}\r\n// The transition hooks are attached to the vnode as vnode.transition\r\n// and will be called at appropriate timing in the renderer.\r\nfunction resolveTransitionHooks(vnode, props, state, instance) {\r\n    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;\r\n    const key = String(vnode.key);\r\n    const leavingVNodesCache = getLeavingNodesForType(state, vnode);\r\n    const callHook = (hook, args) => {\r\n        hook &&\r\n            callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */, args);\r\n    };\r\n    const hooks = {\r\n        mode,\r\n        persisted,\r\n        beforeEnter(el) {\r\n            let hook = onBeforeEnter;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onBeforeAppear || onBeforeEnter;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            // for same element (v-show)\r\n            if (el._leaveCb) {\r\n                el._leaveCb(true /* cancelled */);\r\n            }\r\n            // for toggled element with same key (v-if)\r\n            const leavingVNode = leavingVNodesCache[key];\r\n            if (leavingVNode &&\r\n                isSameVNodeType(vnode, leavingVNode) &&\r\n                leavingVNode.el._leaveCb) {\r\n                // force early removal (not cancelled)\r\n                leavingVNode.el._leaveCb();\r\n            }\r\n            callHook(hook, [el]);\r\n        },\r\n        enter(el) {\r\n            let hook = onEnter;\r\n            let afterHook = onAfterEnter;\r\n            let cancelHook = onEnterCancelled;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onAppear || onEnter;\r\n                    afterHook = onAfterAppear || onAfterEnter;\r\n                    cancelHook = onAppearCancelled || onEnterCancelled;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            let called = false;\r\n            const done = (el._enterCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                if (cancelled) {\r\n                    callHook(cancelHook, [el]);\r\n                }\r\n                else {\r\n                    callHook(afterHook, [el]);\r\n                }\r\n                if (hooks.delayedLeave) {\r\n                    hooks.delayedLeave();\r\n                }\r\n                el._enterCb = undefined;\r\n            });\r\n            if (hook) {\r\n                hook(el, done);\r\n                if (hook.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        leave(el, remove) {\r\n            const key = String(vnode.key);\r\n            if (el._enterCb) {\r\n                el._enterCb(true /* cancelled */);\r\n            }\r\n            if (state.isUnmounting) {\r\n                return remove();\r\n            }\r\n            callHook(onBeforeLeave, [el]);\r\n            let called = false;\r\n            const done = (el._leaveCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                remove();\r\n                if (cancelled) {\r\n                    callHook(onLeaveCancelled, [el]);\r\n                }\r\n                else {\r\n                    callHook(onAfterLeave, [el]);\r\n                }\r\n                el._leaveCb = undefined;\r\n                if (leavingVNodesCache[key] === vnode) {\r\n                    delete leavingVNodesCache[key];\r\n                }\r\n            });\r\n            leavingVNodesCache[key] = vnode;\r\n            if (onLeave) {\r\n                onLeave(el, done);\r\n                if (onLeave.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        clone(vnode) {\r\n            return resolveTransitionHooks(vnode, props, state, instance);\r\n        }\r\n    };\r\n    return hooks;\r\n}\r\n// the placeholder really only handles one special case: KeepAlive\r\n// in the case of a KeepAlive in a leave phase we need to return a KeepAlive\r\n// placeholder with empty content to avoid the KeepAlive instance from being\r\n// unmounted.\r\nfunction emptyPlaceholder(vnode) {\r\n    if (isKeepAlive(vnode)) {\r\n        vnode = cloneVNode(vnode);\r\n        vnode.children = null;\r\n        return vnode;\r\n    }\r\n}\r\nfunction getKeepAliveChild(vnode) {\r\n    return isKeepAlive(vnode)\r\n        ? vnode.children\r\n            ? vnode.children[0]\r\n            : undefined\r\n        : vnode;\r\n}\r\nfunction setTransitionHooks(vnode, hooks) {\r\n    if (vnode.shapeFlag & 6 /* COMPONENT */ && vnode.component) {\r\n        setTransitionHooks(vnode.component.subTree, hooks);\r\n    }\r\n    else if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        vnode.ssContent.transition = hooks.clone(vnode.ssContent);\r\n        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\r\n    }\r\n    else {\r\n        vnode.transition = hooks;\r\n    }\r\n}\r\nfunction getTransitionRawChildren(children, keepComment = false) {\r\n    let ret = [];\r\n    let keyedFragmentCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // handle fragment children case, e.g. v-for\r\n        if (child.type === Fragment) {\r\n            if (child.patchFlag & 128 /* KEYED_FRAGMENT */)\r\n                keyedFragmentCount++;\r\n            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));\r\n        }\r\n        // comment placeholders should be skipped, e.g. v-if\r\n        else if (keepComment || child.type !== Comment) {\r\n            ret.push(child);\r\n        }\r\n    }\r\n    // #1126 if a transition children list contains multiple sub fragments, these\r\n    // fragments will be merged into a flat children array. Since each v-for\r\n    // fragment may contain different static bindings inside, we need to de-op\r\n    // these children to force full diffs to ensure correct behavior.\r\n    if (keyedFragmentCount > 1) {\r\n        for (let i = 0; i < ret.length; i++) {\r\n            ret[i].patchFlag = -2 /* BAIL */;\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n// implementation, close to no-op\r\nfunction defineComponent(options) {\r\n    return isFunction$1(options) ? { setup: options, name: options.name } : options;\r\n}\n\nconst isAsyncWrapper = (i) => !!i.type.__asyncLoader;\r\nfunction defineAsyncComponent(source) {\r\n    if (isFunction$1(source)) {\r\n        source = { loader: source };\r\n    }\r\n    const { loader, loadingComponent, errorComponent, delay = 200, timeout, // undefined = never times out\r\n    suspensible = true, onError: userOnError } = source;\r\n    let pendingRequest = null;\r\n    let resolvedComp;\r\n    let retries = 0;\r\n    const retry = () => {\r\n        retries++;\r\n        pendingRequest = null;\r\n        return load();\r\n    };\r\n    const load = () => {\r\n        let thisRequest;\r\n        return (pendingRequest ||\r\n            (thisRequest = pendingRequest =\r\n                loader()\r\n                    .catch(err => {\r\n                    err = err instanceof Error ? err : new Error(String(err));\r\n                    if (userOnError) {\r\n                        return new Promise((resolve, reject) => {\r\n                            const userRetry = () => resolve(retry());\r\n                            const userFail = () => reject(err);\r\n                            userOnError(err, userRetry, userFail, retries + 1);\r\n                        });\r\n                    }\r\n                    else {\r\n                        throw err;\r\n                    }\r\n                })\r\n                    .then((comp) => {\r\n                    if (thisRequest !== pendingRequest && pendingRequest) {\r\n                        return pendingRequest;\r\n                    }\r\n                    if ((process.env.NODE_ENV !== 'production') && !comp) {\r\n                        warn(`Async component loader resolved to undefined. ` +\r\n                            `If you are using retry(), make sure to return its return value.`);\r\n                    }\r\n                    // interop module default\r\n                    if (comp &&\r\n                        (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\r\n                        comp = comp.default;\r\n                    }\r\n                    if ((process.env.NODE_ENV !== 'production') && comp && !isObject$1(comp) && !isFunction$1(comp)) {\r\n                        throw new Error(`Invalid async component load result: ${comp}`);\r\n                    }\r\n                    resolvedComp = comp;\r\n                    return comp;\r\n                })));\r\n    };\r\n    return defineComponent({\r\n        name: 'AsyncComponentWrapper',\r\n        __asyncLoader: load,\r\n        get __asyncResolved() {\r\n            return resolvedComp;\r\n        },\r\n        setup() {\r\n            const instance = currentInstance;\r\n            // already resolved\r\n            if (resolvedComp) {\r\n                return () => createInnerComp(resolvedComp, instance);\r\n            }\r\n            const onError = (err) => {\r\n                pendingRequest = null;\r\n                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);\r\n            };\r\n            // suspense-controlled or SSR.\r\n            if ((suspensible && instance.suspense) ||\r\n                (false )) {\r\n                return load()\r\n                    .then(comp => {\r\n                    return () => createInnerComp(comp, instance);\r\n                })\r\n                    .catch(err => {\r\n                    onError(err);\r\n                    return () => errorComponent\r\n                        ? createVNode(errorComponent, {\r\n                            error: err\r\n                        })\r\n                        : null;\r\n                });\r\n            }\r\n            const loaded = ref(false);\r\n            const error = ref();\r\n            const delayed = ref(!!delay);\r\n            if (delay) {\r\n                setTimeout(() => {\r\n                    delayed.value = false;\r\n                }, delay);\r\n            }\r\n            if (timeout != null) {\r\n                setTimeout(() => {\r\n                    if (!loaded.value && !error.value) {\r\n                        const err = new Error(`Async component timed out after ${timeout}ms.`);\r\n                        onError(err);\r\n                        error.value = err;\r\n                    }\r\n                }, timeout);\r\n            }\r\n            load()\r\n                .then(() => {\r\n                loaded.value = true;\r\n                if (instance.parent && isKeepAlive(instance.parent.vnode)) {\r\n                    // parent is keep-alive, force update so the loaded component's\r\n                    // name is taken into account\r\n                    queueJob(instance.parent.update);\r\n                }\r\n            })\r\n                .catch(err => {\r\n                onError(err);\r\n                error.value = err;\r\n            });\r\n            return () => {\r\n                if (loaded.value && resolvedComp) {\r\n                    return createInnerComp(resolvedComp, instance);\r\n                }\r\n                else if (error.value && errorComponent) {\r\n                    return createVNode(errorComponent, {\r\n                        error: error.value\r\n                    });\r\n                }\r\n                else if (loadingComponent && !delayed.value) {\r\n                    return createVNode(loadingComponent);\r\n                }\r\n            };\r\n        }\r\n    });\r\n}\r\nfunction createInnerComp(comp, { vnode: { ref, props, children } }) {\r\n    const vnode = createVNode(comp, props, children);\r\n    // ensure inner component inherits the async wrapper's ref owner\r\n    vnode.ref = ref;\r\n    return vnode;\r\n}\n\nconst isKeepAlive = (vnode) => vnode.type.__isKeepAlive;\r\nconst KeepAliveImpl = {\r\n    name: `KeepAlive`,\r\n    // Marker for special handling inside the renderer. We are not using a ===\r\n    // check directly on KeepAlive in the renderer, because importing it directly\r\n    // would prevent it from being tree-shaken.\r\n    __isKeepAlive: true,\r\n    props: {\r\n        include: [String, RegExp, Array],\r\n        exclude: [String, RegExp, Array],\r\n        max: [String, Number]\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        // KeepAlive communicates with the instantiated renderer via the\r\n        // ctx where the renderer passes in its internals,\r\n        // and the KeepAlive instance exposes activate/deactivate implementations.\r\n        // The whole point of this is to avoid importing KeepAlive directly in the\r\n        // renderer to facilitate tree-shaking.\r\n        const sharedContext = instance.ctx;\r\n        // if the internal renderer is not registered, it indicates that this is server-side rendering,\r\n        // for KeepAlive, we just need to render its children\r\n        if (!sharedContext.renderer) {\r\n            return slots.default;\r\n        }\r\n        const cache = new Map();\r\n        const keys = new Set();\r\n        let current = null;\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.__v_cache = cache;\r\n        }\r\n        const parentSuspense = instance.suspense;\r\n        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;\r\n        const storageContainer = createElement('div');\r\n        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {\r\n            const instance = vnode.component;\r\n            move(vnode, container, anchor, 0 /* ENTER */, parentSuspense);\r\n            // in case props have changed\r\n            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);\r\n            queuePostRenderEffect(() => {\r\n                instance.isDeactivated = false;\r\n                if (instance.a) {\r\n                    invokeArrayFns(instance.a);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n            }, parentSuspense);\r\n            if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                // Update components tree\r\n                devtoolsComponentAdded(instance);\r\n            }\r\n        };\r\n        sharedContext.deactivate = (vnode) => {\r\n            const instance = vnode.component;\r\n            move(vnode, storageContainer, null, 1 /* LEAVE */, parentSuspense);\r\n            queuePostRenderEffect(() => {\r\n                if (instance.da) {\r\n                    invokeArrayFns(instance.da);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n                instance.isDeactivated = true;\r\n            }, parentSuspense);\r\n            if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                // Update components tree\r\n                devtoolsComponentAdded(instance);\r\n            }\r\n        };\r\n        function unmount(vnode) {\r\n            // reset the shapeFlag so it can be properly unmounted\r\n            resetShapeFlag(vnode);\r\n            _unmount(vnode, instance, parentSuspense);\r\n        }\r\n        function pruneCache(filter) {\r\n            cache.forEach((vnode, key) => {\r\n                const name = getComponentName(vnode.type);\r\n                if (name && (!filter || !filter(name))) {\r\n                    pruneCacheEntry(key);\r\n                }\r\n            });\r\n        }\r\n        function pruneCacheEntry(key) {\r\n            const cached = cache.get(key);\r\n            if (!current || cached.type !== current.type) {\r\n                unmount(cached);\r\n            }\r\n            else if (current) {\r\n                // current active instance should no longer be kept-alive.\r\n                // we can't unmount it now but it might be later, so reset its flag now.\r\n                resetShapeFlag(current);\r\n            }\r\n            cache.delete(key);\r\n            keys.delete(key);\r\n        }\r\n        // prune cache on include/exclude prop change\r\n        watch(() => [props.include, props.exclude], ([include, exclude]) => {\r\n            include && pruneCache(name => matches(include, name));\r\n            exclude && pruneCache(name => !matches(exclude, name));\r\n        }, \r\n        // prune post-render after `current` has been updated\r\n        { flush: 'post', deep: true });\r\n        // cache sub tree after render\r\n        let pendingCacheKey = null;\r\n        const cacheSubtree = () => {\r\n            // fix #1621, the pendingCacheKey could be 0\r\n            if (pendingCacheKey != null) {\r\n                cache.set(pendingCacheKey, getInnerChild(instance.subTree));\r\n            }\r\n        };\r\n        onMounted(cacheSubtree);\r\n        onUpdated(cacheSubtree);\r\n        onBeforeUnmount(() => {\r\n            cache.forEach(cached => {\r\n                const { subTree, suspense } = instance;\r\n                const vnode = getInnerChild(subTree);\r\n                if (cached.type === vnode.type) {\r\n                    // current instance will be unmounted as part of keep-alive's unmount\r\n                    resetShapeFlag(vnode);\r\n                    // but invoke its deactivated hook here\r\n                    const da = vnode.component.da;\r\n                    da && queuePostRenderEffect(da, suspense);\r\n                    return;\r\n                }\r\n                unmount(cached);\r\n            });\r\n        });\r\n        return () => {\r\n            pendingCacheKey = null;\r\n            if (!slots.default) {\r\n                return null;\r\n            }\r\n            const children = slots.default();\r\n            const rawVNode = children[0];\r\n            if (children.length > 1) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`KeepAlive should contain exactly one component child.`);\r\n                }\r\n                current = null;\r\n                return children;\r\n            }\r\n            else if (!isVNode(rawVNode) ||\r\n                (!(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) &&\r\n                    !(rawVNode.shapeFlag & 128 /* SUSPENSE */))) {\r\n                current = null;\r\n                return rawVNode;\r\n            }\r\n            let vnode = getInnerChild(rawVNode);\r\n            const comp = vnode.type;\r\n            // for async components, name check should be based in its loaded\r\n            // inner component if available\r\n            const name = getComponentName(isAsyncWrapper(vnode)\r\n                ? vnode.type.__asyncResolved || {}\r\n                : comp);\r\n            const { include, exclude, max } = props;\r\n            if ((include && (!name || !matches(include, name))) ||\r\n                (exclude && name && matches(exclude, name))) {\r\n                current = vnode;\r\n                return rawVNode;\r\n            }\r\n            const key = vnode.key == null ? comp : vnode.key;\r\n            const cachedVNode = cache.get(key);\r\n            // clone vnode if it's reused because we are going to mutate it\r\n            if (vnode.el) {\r\n                vnode = cloneVNode(vnode);\r\n                if (rawVNode.shapeFlag & 128 /* SUSPENSE */) {\r\n                    rawVNode.ssContent = vnode;\r\n                }\r\n            }\r\n            // #1513 it's possible for the returned vnode to be cloned due to attr\r\n            // fallthrough or scopeId, so the vnode here may not be the final vnode\r\n            // that is mounted. Instead of caching it directly, we store the pending\r\n            // key and cache `instance.subTree` (the normalized vnode) in\r\n            // beforeMount/beforeUpdate hooks.\r\n            pendingCacheKey = key;\r\n            if (cachedVNode) {\r\n                // copy over mounted state\r\n                vnode.el = cachedVNode.el;\r\n                vnode.component = cachedVNode.component;\r\n                if (vnode.transition) {\r\n                    // recursively update transition hooks on subTree\r\n                    setTransitionHooks(vnode, vnode.transition);\r\n                }\r\n                // avoid vnode being mounted as fresh\r\n                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */;\r\n                // make this key the freshest\r\n                keys.delete(key);\r\n                keys.add(key);\r\n            }\r\n            else {\r\n                keys.add(key);\r\n                // prune oldest entry\r\n                if (max && keys.size > parseInt(max, 10)) {\r\n                    pruneCacheEntry(keys.values().next().value);\r\n                }\r\n            }\r\n            // avoid vnode being unmounted\r\n            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n            current = vnode;\r\n            return rawVNode;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst KeepAlive = KeepAliveImpl;\r\nfunction matches(pattern, name) {\r\n    if (isArray(pattern)) {\r\n        return pattern.some((p) => matches(p, name));\r\n    }\r\n    else if (isString(pattern)) {\r\n        return pattern.split(',').indexOf(name) > -1;\r\n    }\r\n    else if (pattern.test) {\r\n        return pattern.test(name);\r\n    }\r\n    /* istanbul ignore next */\r\n    return false;\r\n}\r\nfunction onActivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"a\" /* ACTIVATED */, target);\r\n}\r\nfunction onDeactivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"da\" /* DEACTIVATED */, target);\r\n}\r\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\r\n    // cache the deactivate branch check wrapper for injected hooks so the same\r\n    // hook can be properly deduped by the scheduler. \"__wdc\" stands for \"with\r\n    // deactivation check\".\r\n    const wrappedHook = hook.__wdc ||\r\n        (hook.__wdc = () => {\r\n            // only fire the hook if the target instance is NOT in a deactivated branch.\r\n            let current = target;\r\n            while (current) {\r\n                if (current.isDeactivated) {\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n            hook();\r\n        });\r\n    injectHook(type, wrappedHook, target);\r\n    // In addition to registering it on the target instance, we walk up the parent\r\n    // chain and register it on all ancestor instances that are keep-alive roots.\r\n    // This avoids the need to walk the entire component tree when invoking these\r\n    // hooks, and more importantly, avoids the need to track child components in\r\n    // arrays.\r\n    if (target) {\r\n        let current = target.parent;\r\n        while (current && current.parent) {\r\n            if (isKeepAlive(current.parent.vnode)) {\r\n                injectToKeepAliveRoot(wrappedHook, type, target, current);\r\n            }\r\n            current = current.parent;\r\n        }\r\n    }\r\n}\r\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\r\n    // injectHook wraps the original for error handling, so make sure to remove\r\n    // the wrapped version.\r\n    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);\r\n    onUnmounted(() => {\r\n        remove(keepAliveRoot[type], injected);\r\n    }, target);\r\n}\r\nfunction resetShapeFlag(vnode) {\r\n    let shapeFlag = vnode.shapeFlag;\r\n    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n        shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n    }\r\n    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n        shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */;\r\n    }\r\n    vnode.shapeFlag = shapeFlag;\r\n}\r\nfunction getInnerChild(vnode) {\r\n    return vnode.shapeFlag & 128 /* SUSPENSE */ ? vnode.ssContent : vnode;\r\n}\n\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\r\n    if (target) {\r\n        const hooks = target[type] || (target[type] = []);\r\n        // cache the error handling wrapper for injected hooks so the same hook\r\n        // can be properly deduped by the scheduler. \"__weh\" stands for \"with error\r\n        // handling\".\r\n        const wrappedHook = hook.__weh ||\r\n            (hook.__weh = (...args) => {\r\n                if (target.isUnmounted) {\r\n                    return;\r\n                }\r\n                // disable tracking inside all lifecycle hooks\r\n                // since they can potentially be called inside effects.\r\n                pauseTracking();\r\n                // Set currentInstance during hook invocation.\r\n                // This assumes the hook does not synchronously trigger other hooks, which\r\n                // can only be false when the user does something really funky.\r\n                setCurrentInstance(target);\r\n                const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n                unsetCurrentInstance();\r\n                resetTracking();\r\n                return res;\r\n            });\r\n        if (prepend) {\r\n            hooks.unshift(wrappedHook);\r\n        }\r\n        else {\r\n            hooks.push(wrappedHook);\r\n        }\r\n        return wrappedHook;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));\r\n        warn(`${apiName} is called when there is no active component instance to be ` +\r\n            `associated with. ` +\r\n            `Lifecycle injection APIs can only be used during execution of setup().` +\r\n            (` If you are using async setup(), make sure to register lifecycle ` +\r\n                    `hooks before the first await statement.`\r\n                ));\r\n    }\r\n}\r\nconst createHook = (lifecycle) => (hook, target = currentInstance) => \r\n// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)\r\n(!isInSSRComponentSetup || lifecycle === \"sp\" /* SERVER_PREFETCH */) &&\r\n    injectHook(lifecycle, hook, target);\r\nconst onBeforeMount = createHook(\"bm\" /* BEFORE_MOUNT */);\r\nconst onMounted = createHook(\"m\" /* MOUNTED */);\r\nconst onBeforeUpdate = createHook(\"bu\" /* BEFORE_UPDATE */);\r\nconst onUpdated = createHook(\"u\" /* UPDATED */);\r\nconst onBeforeUnmount = createHook(\"bum\" /* BEFORE_UNMOUNT */);\r\nconst onUnmounted = createHook(\"um\" /* UNMOUNTED */);\r\nconst onServerPrefetch = createHook(\"sp\" /* SERVER_PREFETCH */);\r\nconst onRenderTriggered = createHook(\"rtg\" /* RENDER_TRIGGERED */);\r\nconst onRenderTracked = createHook(\"rtc\" /* RENDER_TRACKED */);\r\nfunction onErrorCaptured(hook, target = currentInstance) {\r\n    injectHook(\"ec\" /* ERROR_CAPTURED */, hook, target);\r\n}\n\nfunction createDuplicateChecker() {\r\n    const cache = Object.create(null);\r\n    return (type, key) => {\r\n        if (cache[key]) {\r\n            warn(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\r\n        }\r\n        else {\r\n            cache[key] = type;\r\n        }\r\n    };\r\n}\r\nlet shouldCacheAccess = true;\r\nfunction applyOptions(instance) {\r\n    const options = resolveMergedOptions(instance);\r\n    const publicThis = instance.proxy;\r\n    const ctx = instance.ctx;\r\n    // do not cache property access on public proxy during state initialization\r\n    shouldCacheAccess = false;\r\n    // call beforeCreate first before accessing other options since\r\n    // the hook may mutate resolved options (#2791)\r\n    if (options.beforeCreate) {\r\n        callHook(options.beforeCreate, instance, \"bc\" /* BEFORE_CREATE */);\r\n    }\r\n    const { \r\n    // state\r\n    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, \r\n    // lifecycle\r\n    created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, serverPrefetch, \r\n    // public API\r\n    expose, inheritAttrs, \r\n    // assets\r\n    components, directives, filters } = options;\r\n    const checkDuplicateProperties = (process.env.NODE_ENV !== 'production') ? createDuplicateChecker() : null;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const [propsOptions] = instance.propsOptions;\r\n        if (propsOptions) {\r\n            for (const key in propsOptions) {\r\n                checkDuplicateProperties(\"Props\" /* PROPS */, key);\r\n            }\r\n        }\r\n    }\r\n    // options initialization order (to be consistent with Vue 2):\r\n    // - props (already done outside of this function)\r\n    // - inject\r\n    // - methods\r\n    // - data (deferred since it relies on `this` access)\r\n    // - computed\r\n    // - watch (deferred since it relies on `this` access)\r\n    if (injectOptions) {\r\n        resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);\r\n    }\r\n    if (methods) {\r\n        for (const key in methods) {\r\n            const methodHandler = methods[key];\r\n            if (isFunction$1(methodHandler)) {\r\n                // In dev mode, we use the `createRenderContext` function to define\r\n                // methods to the proxy target, and those are read-only but\r\n                // reconfigurable, so it needs to be redefined here\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    Object.defineProperty(ctx, key, {\r\n                        value: methodHandler.bind(publicThis),\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        writable: true\r\n                    });\r\n                }\r\n                else {\r\n                    ctx[key] = methodHandler.bind(publicThis);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Methods\" /* METHODS */, key);\r\n                }\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. ` +\r\n                    `Did you reference the function correctly?`);\r\n            }\r\n        }\r\n    }\r\n    if (dataOptions) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isFunction$1(dataOptions)) {\r\n            warn(`The data option must be a function. ` +\r\n                `Plain object usage is no longer supported.`);\r\n        }\r\n        const data = dataOptions.call(publicThis, publicThis);\r\n        if ((process.env.NODE_ENV !== 'production') && isPromise$1(data)) {\r\n            warn(`data() returned a Promise - note data() cannot be async; If you ` +\r\n                `intend to perform data fetching before component renders, use ` +\r\n                `async setup() + <Suspense>.`);\r\n        }\r\n        if (!isObject$1(data)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`data() should return an object.`);\r\n        }\r\n        else {\r\n            instance.data = reactive(data);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                for (const key in data) {\r\n                    checkDuplicateProperties(\"Data\" /* DATA */, key);\r\n                    // expose data on ctx during dev\r\n                    if (key[0] !== '$' && key[0] !== '_') {\r\n                        Object.defineProperty(ctx, key, {\r\n                            configurable: true,\r\n                            enumerable: true,\r\n                            get: () => data[key],\r\n                            set: NOOP\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // state initialization complete at this point - start caching access\r\n    shouldCacheAccess = true;\r\n    if (computedOptions) {\r\n        for (const key in computedOptions) {\r\n            const opt = computedOptions[key];\r\n            const get = isFunction$1(opt)\r\n                ? opt.bind(publicThis, publicThis)\r\n                : isFunction$1(opt.get)\r\n                    ? opt.get.bind(publicThis, publicThis)\r\n                    : NOOP;\r\n            if ((process.env.NODE_ENV !== 'production') && get === NOOP) {\r\n                warn(`Computed property \"${key}\" has no getter.`);\r\n            }\r\n            const set = !isFunction$1(opt) && isFunction$1(opt.set)\r\n                ? opt.set.bind(publicThis)\r\n                : (process.env.NODE_ENV !== 'production')\r\n                    ? () => {\r\n                        warn(`Write operation failed: computed property \"${key}\" is readonly.`);\r\n                    }\r\n                    : NOOP;\r\n            const c = computed({\r\n                get,\r\n                set\r\n            });\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => c.value,\r\n                set: v => (c.value = v)\r\n            });\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkDuplicateProperties(\"Computed\" /* COMPUTED */, key);\r\n            }\r\n        }\r\n    }\r\n    if (watchOptions) {\r\n        for (const key in watchOptions) {\r\n            createWatcher(watchOptions[key], ctx, publicThis, key);\r\n        }\r\n    }\r\n    if (provideOptions) {\r\n        const provides = isFunction$1(provideOptions)\r\n            ? provideOptions.call(publicThis)\r\n            : provideOptions;\r\n        Reflect.ownKeys(provides).forEach(key => {\r\n            provide(key, provides[key]);\r\n        });\r\n    }\r\n    if (created) {\r\n        callHook(created, instance, \"c\" /* CREATED */);\r\n    }\r\n    function registerLifecycleHook(register, hook) {\r\n        if (isArray(hook)) {\r\n            hook.forEach(_hook => register(_hook.bind(publicThis)));\r\n        }\r\n        else if (hook) {\r\n            register(hook.bind(publicThis));\r\n        }\r\n    }\r\n    registerLifecycleHook(onBeforeMount, beforeMount);\r\n    registerLifecycleHook(onMounted, mounted);\r\n    registerLifecycleHook(onBeforeUpdate, beforeUpdate);\r\n    registerLifecycleHook(onUpdated, updated);\r\n    registerLifecycleHook(onActivated, activated);\r\n    registerLifecycleHook(onDeactivated, deactivated);\r\n    registerLifecycleHook(onErrorCaptured, errorCaptured);\r\n    registerLifecycleHook(onRenderTracked, renderTracked);\r\n    registerLifecycleHook(onRenderTriggered, renderTriggered);\r\n    registerLifecycleHook(onBeforeUnmount, beforeUnmount);\r\n    registerLifecycleHook(onUnmounted, unmounted);\r\n    registerLifecycleHook(onServerPrefetch, serverPrefetch);\r\n    if (isArray(expose)) {\r\n        if (expose.length) {\r\n            const exposed = instance.exposed || (instance.exposed = {});\r\n            expose.forEach(key => {\r\n                Object.defineProperty(exposed, key, {\r\n                    get: () => publicThis[key],\r\n                    set: val => (publicThis[key] = val)\r\n                });\r\n            });\r\n        }\r\n        else if (!instance.exposed) {\r\n            instance.exposed = {};\r\n        }\r\n    }\r\n    // options that are handled when creating the instance but also need to be\r\n    // applied from mixins\r\n    if (render && instance.render === NOOP) {\r\n        instance.render = render;\r\n    }\r\n    if (inheritAttrs != null) {\r\n        instance.inheritAttrs = inheritAttrs;\r\n    }\r\n    // asset options.\r\n    if (components)\r\n        instance.components = components;\r\n    if (directives)\r\n        instance.directives = directives;\r\n}\r\nfunction resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {\r\n    if (isArray(injectOptions)) {\r\n        injectOptions = normalizeInject(injectOptions);\r\n    }\r\n    for (const key in injectOptions) {\r\n        const opt = injectOptions[key];\r\n        let injected;\r\n        if (isObject$1(opt)) {\r\n            if ('default' in opt) {\r\n                injected = inject(opt.from || key, opt.default, true /* treat default function as factory */);\r\n            }\r\n            else {\r\n                injected = inject(opt.from || key);\r\n            }\r\n        }\r\n        else {\r\n            injected = inject(opt);\r\n        }\r\n        if (isRef(injected)) {\r\n            // TODO remove the check in 3.3\r\n            if (unwrapRef) {\r\n                Object.defineProperty(ctx, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: () => injected.value,\r\n                    set: v => (injected.value = v)\r\n                });\r\n            }\r\n            else {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`injected property \"${key}\" is a ref and will be auto-unwrapped ` +\r\n                        `and no longer needs \\`.value\\` in the next minor release. ` +\r\n                        `To opt-in to the new behavior now, ` +\r\n                        `set \\`app.config.unwrapInjectedRef = true\\` (this config is ` +\r\n                        `temporary and will not be needed in the future.)`);\r\n                }\r\n                ctx[key] = injected;\r\n            }\r\n        }\r\n        else {\r\n            ctx[key] = injected;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n        }\r\n    }\r\n}\r\nfunction callHook(hook, instance, type) {\r\n    callWithAsyncErrorHandling(isArray(hook)\r\n        ? hook.map(h => h.bind(instance.proxy))\r\n        : hook.bind(instance.proxy), instance, type);\r\n}\r\nfunction createWatcher(raw, ctx, publicThis, key) {\r\n    const getter = key.includes('.')\r\n        ? createPathGetter(publicThis, key)\r\n        : () => publicThis[key];\r\n    if (isString(raw)) {\r\n        const handler = ctx[raw];\r\n        if (isFunction$1(handler)) {\r\n            watch(getter, handler);\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Invalid watch handler specified by key \"${raw}\"`, handler);\r\n        }\r\n    }\r\n    else if (isFunction$1(raw)) {\r\n        watch(getter, raw.bind(publicThis));\r\n    }\r\n    else if (isObject$1(raw)) {\r\n        if (isArray(raw)) {\r\n            raw.forEach(r => createWatcher(r, ctx, publicThis, key));\r\n        }\r\n        else {\r\n            const handler = isFunction$1(raw.handler)\r\n                ? raw.handler.bind(publicThis)\r\n                : ctx[raw.handler];\r\n            if (isFunction$1(handler)) {\r\n                watch(getter, handler, raw);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Invalid watch handler specified by key \"${raw.handler}\"`, handler);\r\n            }\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid watch option: \"${key}\"`, raw);\r\n    }\r\n}\r\n/**\r\n * Resolve merged options and cache it on the component.\r\n * This is done only once per-component since the merging does not involve\r\n * instances.\r\n */\r\nfunction resolveMergedOptions(instance) {\r\n    const base = instance.type;\r\n    const { mixins, extends: extendsOptions } = base;\r\n    const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;\r\n    const cached = cache.get(base);\r\n    let resolved;\r\n    if (cached) {\r\n        resolved = cached;\r\n    }\r\n    else if (!globalMixins.length && !mixins && !extendsOptions) {\r\n        {\r\n            resolved = base;\r\n        }\r\n    }\r\n    else {\r\n        resolved = {};\r\n        if (globalMixins.length) {\r\n            globalMixins.forEach(m => mergeOptions(resolved, m, optionMergeStrategies, true));\r\n        }\r\n        mergeOptions(resolved, base, optionMergeStrategies);\r\n    }\r\n    cache.set(base, resolved);\r\n    return resolved;\r\n}\r\nfunction mergeOptions(to, from, strats, asMixin = false) {\r\n    const { mixins, extends: extendsOptions } = from;\r\n    if (extendsOptions) {\r\n        mergeOptions(to, extendsOptions, strats, true);\r\n    }\r\n    if (mixins) {\r\n        mixins.forEach((m) => mergeOptions(to, m, strats, true));\r\n    }\r\n    for (const key in from) {\r\n        if (asMixin && key === 'expose') {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`\"expose\" option is ignored when declared in mixins or extends. ` +\r\n                    `It should only be declared in the base component itself.`);\r\n        }\r\n        else {\r\n            const strat = internalOptionMergeStrats[key] || (strats && strats[key]);\r\n            to[key] = strat ? strat(to[key], from[key]) : from[key];\r\n        }\r\n    }\r\n    return to;\r\n}\r\nconst internalOptionMergeStrats = {\r\n    data: mergeDataFn,\r\n    props: mergeObjectOptions,\r\n    emits: mergeObjectOptions,\r\n    // objects\r\n    methods: mergeObjectOptions,\r\n    computed: mergeObjectOptions,\r\n    // lifecycle\r\n    beforeCreate: mergeAsArray,\r\n    created: mergeAsArray,\r\n    beforeMount: mergeAsArray,\r\n    mounted: mergeAsArray,\r\n    beforeUpdate: mergeAsArray,\r\n    updated: mergeAsArray,\r\n    beforeDestroy: mergeAsArray,\r\n    beforeUnmount: mergeAsArray,\r\n    destroyed: mergeAsArray,\r\n    unmounted: mergeAsArray,\r\n    activated: mergeAsArray,\r\n    deactivated: mergeAsArray,\r\n    errorCaptured: mergeAsArray,\r\n    serverPrefetch: mergeAsArray,\r\n    // assets\r\n    components: mergeObjectOptions,\r\n    directives: mergeObjectOptions,\r\n    // watch\r\n    watch: mergeWatchOptions,\r\n    // provide / inject\r\n    provide: mergeDataFn,\r\n    inject: mergeInject\r\n};\r\nfunction mergeDataFn(to, from) {\r\n    if (!from) {\r\n        return to;\r\n    }\r\n    if (!to) {\r\n        return from;\r\n    }\r\n    return function mergedDataFn() {\r\n        return (extend)(isFunction$1(to) ? to.call(this, this) : to, isFunction$1(from) ? from.call(this, this) : from);\r\n    };\r\n}\r\nfunction mergeInject(to, from) {\r\n    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));\r\n}\r\nfunction normalizeInject(raw) {\r\n    if (isArray(raw)) {\r\n        const res = {};\r\n        for (let i = 0; i < raw.length; i++) {\r\n            res[raw[i]] = raw[i];\r\n        }\r\n        return res;\r\n    }\r\n    return raw;\r\n}\r\nfunction mergeAsArray(to, from) {\r\n    return to ? [...new Set([].concat(to, from))] : from;\r\n}\r\nfunction mergeObjectOptions(to, from) {\r\n    return to ? extend(extend(Object.create(null), to), from) : from;\r\n}\r\nfunction mergeWatchOptions(to, from) {\r\n    if (!to)\r\n        return from;\r\n    if (!from)\r\n        return to;\r\n    const merged = extend(Object.create(null), to);\r\n    for (const key in from) {\r\n        merged[key] = mergeAsArray(to[key], from[key]);\r\n    }\r\n    return merged;\r\n}\n\nfunction initProps(instance, rawProps, isStateful, // result of bitwise flag comparison\r\nisSSR = false) {\r\n    const props = {};\r\n    const attrs = {};\r\n    def(attrs, InternalObjectKey, 1);\r\n    instance.propsDefaults = Object.create(null);\r\n    setFullProps(instance, rawProps, props, attrs);\r\n    // ensure all declared prop keys are present\r\n    for (const key in instance.propsOptions[0]) {\r\n        if (!(key in props)) {\r\n            props[key] = undefined;\r\n        }\r\n    }\r\n    // validation\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n    if (isStateful) {\r\n        // stateful\r\n        instance.props = isSSR ? props : shallowReactive(props);\r\n    }\r\n    else {\r\n        if (!instance.type.props) {\r\n            // functional w/ optional props, props === attrs\r\n            instance.props = attrs;\r\n        }\r\n        else {\r\n            // functional w/ declared props\r\n            instance.props = props;\r\n        }\r\n    }\r\n    instance.attrs = attrs;\r\n}\r\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\r\n    const { props, attrs, vnode: { patchFlag } } = instance;\r\n    const rawCurrentProps = toRaw(props);\r\n    const [options] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    if (\r\n    // always force full diff in dev\r\n    // - #1942 if hmr is enabled with sfc component\r\n    // - vite#872 non-sfc component used by sfc component\r\n    !((process.env.NODE_ENV !== 'production') &&\r\n        (instance.type.__hmrId ||\r\n            (instance.parent && instance.parent.type.__hmrId))) &&\r\n        (optimized || patchFlag > 0) &&\r\n        !(patchFlag & 16 /* FULL_PROPS */)) {\r\n        if (patchFlag & 8 /* PROPS */) {\r\n            // Compiler-generated props & no keys change, just set the updated\r\n            // the props.\r\n            const propsToUpdate = instance.vnode.dynamicProps;\r\n            for (let i = 0; i < propsToUpdate.length; i++) {\r\n                let key = propsToUpdate[i];\r\n                // PROPS flag guarantees rawProps to be non-null\r\n                const value = rawProps[key];\r\n                if (options) {\r\n                    // attr / props separation was done on init and will be consistent\r\n                    // in this code path, so just check if attrs have it.\r\n                    if (hasOwn(attrs, key)) {\r\n                        if (value !== attrs[key]) {\r\n                            attrs[key] = value;\r\n                            hasAttrsChanged = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        const camelizedKey = camelize(key);\r\n                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    if (value !== attrs[key]) {\r\n                        attrs[key] = value;\r\n                        hasAttrsChanged = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // full props update.\r\n        if (setFullProps(instance, rawProps, props, attrs)) {\r\n            hasAttrsChanged = true;\r\n        }\r\n        // in case of dynamic props, check if we need to delete keys from\r\n        // the props object\r\n        let kebabKey;\r\n        for (const key in rawCurrentProps) {\r\n            if (!rawProps ||\r\n                // for camelCase\r\n                (!hasOwn(rawProps, key) &&\r\n                    // it's possible the original props was passed in as kebab-case\r\n                    // and converted to camelCase (#955)\r\n                    ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey)))) {\r\n                if (options) {\r\n                    if (rawPrevProps &&\r\n                        // for camelCase\r\n                        (rawPrevProps[key] !== undefined ||\r\n                            // for kebab-case\r\n                            rawPrevProps[kebabKey] !== undefined)) {\r\n                        props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    delete props[key];\r\n                }\r\n            }\r\n        }\r\n        // in the case of functional component w/o props declaration, props and\r\n        // attrs point to the same object so it should already have been updated.\r\n        if (attrs !== rawCurrentProps) {\r\n            for (const key in attrs) {\r\n                if (!rawProps || !hasOwn(rawProps, key)) {\r\n                    delete attrs[key];\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // trigger updates for $attrs in case it's used in component slots\r\n    if (hasAttrsChanged) {\r\n        trigger(instance, \"set\" /* SET */, '$attrs');\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n}\r\nfunction setFullProps(instance, rawProps, props, attrs) {\r\n    const [options, needCastKeys] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    let rawCastValues;\r\n    if (rawProps) {\r\n        for (let key in rawProps) {\r\n            // key, ref are reserved and never passed down\r\n            if (isReservedProp(key)) {\r\n                continue;\r\n            }\r\n            const value = rawProps[key];\r\n            // prop option names are camelized during normalization, so to support\r\n            // kebab -> camel conversion here we need to camelize the key.\r\n            let camelKey;\r\n            if (options && hasOwn(options, (camelKey = camelize(key)))) {\r\n                if (!needCastKeys || !needCastKeys.includes(camelKey)) {\r\n                    props[camelKey] = value;\r\n                }\r\n                else {\r\n                    (rawCastValues || (rawCastValues = {}))[camelKey] = value;\r\n                }\r\n            }\r\n            else if (!isEmitListener(instance.emitsOptions, key)) {\r\n                if (value !== attrs[key]) {\r\n                    attrs[key] = value;\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (needCastKeys) {\r\n        const rawCurrentProps = toRaw(props);\r\n        const castValues = rawCastValues || EMPTY_OBJ;\r\n        for (let i = 0; i < needCastKeys.length; i++) {\r\n            const key = needCastKeys[i];\r\n            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));\r\n        }\r\n    }\r\n    return hasAttrsChanged;\r\n}\r\nfunction resolvePropValue(options, props, key, value, instance, isAbsent) {\r\n    const opt = options[key];\r\n    if (opt != null) {\r\n        const hasDefault = hasOwn(opt, 'default');\r\n        // default values\r\n        if (hasDefault && value === undefined) {\r\n            const defaultValue = opt.default;\r\n            if (opt.type !== Function && isFunction$1(defaultValue)) {\r\n                const { propsDefaults } = instance;\r\n                if (key in propsDefaults) {\r\n                    value = propsDefaults[key];\r\n                }\r\n                else {\r\n                    setCurrentInstance(instance);\r\n                    value = propsDefaults[key] = defaultValue.call(null, props);\r\n                    unsetCurrentInstance();\r\n                }\r\n            }\r\n            else {\r\n                value = defaultValue;\r\n            }\r\n        }\r\n        // boolean casting\r\n        if (opt[0 /* shouldCast */]) {\r\n            if (isAbsent && !hasDefault) {\r\n                value = false;\r\n            }\r\n            else if (opt[1 /* shouldCastTrue */] &&\r\n                (value === '' || value === hyphenate(key))) {\r\n                value = true;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction normalizePropsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.propsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const raw = comp.props;\r\n    const normalized = {};\r\n    const needCastKeys = [];\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction$1(comp)) {\r\n        const extendProps = (raw) => {\r\n            hasExtends = true;\r\n            const [props, keys] = normalizePropsOptions(raw, appContext, true);\r\n            extend(normalized, props);\r\n            if (keys)\r\n                needCastKeys.push(...keys);\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendProps);\r\n        }\r\n        if (comp.extends) {\r\n            extendProps(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendProps);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, EMPTY_ARR);\r\n        return EMPTY_ARR;\r\n    }\r\n    if (isArray(raw)) {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isString(raw[i])) {\r\n                warn(`props must be strings when using array syntax.`, raw[i]);\r\n            }\r\n            const normalizedKey = camelize(raw[i]);\r\n            if (validatePropName(normalizedKey)) {\r\n                normalized[normalizedKey] = EMPTY_OBJ;\r\n            }\r\n        }\r\n    }\r\n    else if (raw) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isObject$1(raw)) {\r\n            warn(`invalid props options`, raw);\r\n        }\r\n        for (const key in raw) {\r\n            const normalizedKey = camelize(key);\r\n            if (validatePropName(normalizedKey)) {\r\n                const opt = raw[key];\r\n                const prop = (normalized[normalizedKey] =\r\n                    isArray(opt) || isFunction$1(opt) ? { type: opt } : opt);\r\n                if (prop) {\r\n                    const booleanIndex = getTypeIndex(Boolean, prop.type);\r\n                    const stringIndex = getTypeIndex(String, prop.type);\r\n                    prop[0 /* shouldCast */] = booleanIndex > -1;\r\n                    prop[1 /* shouldCastTrue */] =\r\n                        stringIndex < 0 || booleanIndex < stringIndex;\r\n                    // if the prop needs boolean casting or default value\r\n                    if (booleanIndex > -1 || hasOwn(prop, 'default')) {\r\n                        needCastKeys.push(normalizedKey);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const res = [normalized, needCastKeys];\r\n    cache.set(comp, res);\r\n    return res;\r\n}\r\nfunction validatePropName(key) {\r\n    if (key[0] !== '$') {\r\n        return true;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid prop name: \"${key}\" is a reserved property.`);\r\n    }\r\n    return false;\r\n}\r\n// use function string name to check type constructors\r\n// so that it works across vms / iframes.\r\nfunction getType(ctor) {\r\n    const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : ctor === null ? 'null' : '';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (isArray(expectedTypes)) {\r\n        return expectedTypes.findIndex(t => isSameType(t, type));\r\n    }\r\n    else if (isFunction$1(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProps(rawProps, props, instance) {\r\n    const resolvedValues = toRaw(props);\r\n    const options = instance.propsOptions[0];\r\n    for (const key in options) {\r\n        let opt = options[key];\r\n        if (opt == null)\r\n            continue;\r\n        validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProp(name, value, prop, isAbsent) {\r\n    const { type, required, validator } = prop;\r\n    // required!\r\n    if (required && isAbsent) {\r\n        warn('Missing required prop: \"' + name + '\"');\r\n        return;\r\n    }\r\n    // missing but optional\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    // type check\r\n    if (type != null && type !== true) {\r\n        let isValid = false;\r\n        const types = isArray(type) ? type : [type];\r\n        const expectedTypes = [];\r\n        // value is valid as long as one of the specified types match\r\n        for (let i = 0; i < types.length && !isValid; i++) {\r\n            const { valid, expectedType } = assertType(value, types[i]);\r\n            expectedTypes.push(expectedType || '');\r\n            isValid = valid;\r\n        }\r\n        if (!isValid) {\r\n            warn(getInvalidTypeMessage(name, value, expectedTypes));\r\n            return;\r\n        }\r\n    }\r\n    // custom validator\r\n    if (validator && !validator(value)) {\r\n        warn('Invalid prop: custom validator check failed for prop \"' + name + '\".');\r\n    }\r\n}\r\nconst isSimpleType = /*#__PURE__*/ makeMap('String,Number,Boolean,Function,Symbol,BigInt');\r\n/**\r\n * dev only\r\n */\r\nfunction assertType(value, type) {\r\n    let valid;\r\n    const expectedType = getType(type);\r\n    if (isSimpleType(expectedType)) {\r\n        const t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === 'object') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === 'Object') {\r\n        valid = isObject$1(value);\r\n    }\r\n    else if (expectedType === 'Array') {\r\n        valid = isArray(value);\r\n    }\r\n    else if (expectedType === 'null') {\r\n        valid = value === null;\r\n    }\r\n    else {\r\n        valid = value instanceof type;\r\n    }\r\n    return {\r\n        valid,\r\n        expectedType\r\n    };\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    let message = `Invalid prop: type check failed for prop \"${name}\".` +\r\n        ` Expected ${expectedTypes.map(capitalize).join(' | ')}`;\r\n    const expectedType = expectedTypes[0];\r\n    const receivedType = toRawType(value);\r\n    const expectedValue = styleValue(value, expectedType);\r\n    const receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += ` with value ${expectedValue}`;\r\n    }\r\n    message += `, got ${receivedType} `;\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += `with value ${receivedValue}.`;\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction styleValue(value, type) {\r\n    if (type === 'String') {\r\n        return `\"${value}\"`;\r\n    }\r\n    else if (type === 'Number') {\r\n        return `${Number(value)}`;\r\n    }\r\n    else {\r\n        return `${value}`;\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isExplicable(type) {\r\n    const explicitTypes = ['string', 'number', 'boolean'];\r\n    return explicitTypes.some(elem => type.toLowerCase() === elem);\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isBoolean(...args) {\r\n    return args.some(elem => elem.toLowerCase() === 'boolean');\r\n}\n\nconst isInternalKey = (key) => key[0] === '_' || key === '$stable';\r\nconst normalizeSlotValue = (value) => isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot, ctx) => {\r\n    const normalized = withCtx((...args) => {\r\n        if ((process.env.NODE_ENV !== 'production') && currentInstance) {\r\n            warn(`Slot \"${key}\" invoked outside of the render function: ` +\r\n                `this will not track dependencies used in the slot. ` +\r\n                `Invoke the slot function inside the render function instead.`);\r\n        }\r\n        return normalizeSlotValue(rawSlot(...args));\r\n    }, ctx);\r\n    normalized._c = false;\r\n    return normalized;\r\n};\r\nconst normalizeObjectSlots = (rawSlots, slots, instance) => {\r\n    const ctx = rawSlots._ctx;\r\n    for (const key in rawSlots) {\r\n        if (isInternalKey(key))\r\n            continue;\r\n        const value = rawSlots[key];\r\n        if (isFunction$1(value)) {\r\n            slots[key] = normalizeSlot(key, value, ctx);\r\n        }\r\n        else if (value != null) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                !(false )) {\r\n                warn(`Non-function value encountered for slot \"${key}\". ` +\r\n                    `Prefer function slots for better performance.`);\r\n            }\r\n            const normalized = normalizeSlotValue(value);\r\n            slots[key] = () => normalized;\r\n        }\r\n    }\r\n};\r\nconst normalizeVNodeSlots = (instance, children) => {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        !isKeepAlive(instance.vnode) &&\r\n        !(false )) {\r\n        warn(`Non-function value encountered for default slot. ` +\r\n            `Prefer function slots for better performance.`);\r\n    }\r\n    const normalized = normalizeSlotValue(children);\r\n    instance.slots.default = () => normalized;\r\n};\r\nconst initSlots = (instance, children) => {\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // users can get the shallow readonly version of the slots object through `this.$slots`,\r\n            // we should avoid the proxy object polluting the slots of the internal instance\r\n            instance.slots = toRaw(children);\r\n            // make compiler marker non-enumerable\r\n            def(children, '_', type);\r\n        }\r\n        else {\r\n            normalizeObjectSlots(children, (instance.slots = {}));\r\n        }\r\n    }\r\n    else {\r\n        instance.slots = {};\r\n        if (children) {\r\n            normalizeVNodeSlots(instance, children);\r\n        }\r\n    }\r\n    def(instance.slots, InternalObjectKey, 1);\r\n};\r\nconst updateSlots = (instance, children, optimized) => {\r\n    const { vnode, slots } = instance;\r\n    let needDeletionCheck = true;\r\n    let deletionComparisonTarget = EMPTY_OBJ;\r\n    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // compiled slots.\r\n            if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n                // Parent was HMR updated so slot content may have changed.\r\n                // force update slots and mark instance for hmr as well\r\n                extend(slots, children);\r\n            }\r\n            else if (optimized && type === 1 /* STABLE */) {\r\n                // compiled AND stable.\r\n                // no need to update, and skip stale slots removal.\r\n                needDeletionCheck = false;\r\n            }\r\n            else {\r\n                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip\r\n                // normalization.\r\n                extend(slots, children);\r\n                // #2893\r\n                // when rendering the optimized slots by manually written render function,\r\n                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,\r\n                // i.e. let the `renderSlot` create the bailed Fragment\r\n                if (!optimized && type === 1 /* STABLE */) {\r\n                    delete slots._;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            needDeletionCheck = !children.$stable;\r\n            normalizeObjectSlots(children, slots);\r\n        }\r\n        deletionComparisonTarget = children;\r\n    }\r\n    else if (children) {\r\n        // non slot object children (direct value) passed to a component\r\n        normalizeVNodeSlots(instance, children);\r\n        deletionComparisonTarget = { default: 1 };\r\n    }\r\n    // delete stale slots\r\n    if (needDeletionCheck) {\r\n        for (const key in slots) {\r\n            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {\r\n                delete slots[key];\r\n            }\r\n        }\r\n    }\r\n};\n\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent('comp')\r\nconst foo = resolveDirective('foo')\r\nconst bar = resolveDirective('bar')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\r\nconst isBuiltInDirective = /*#__PURE__*/ makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');\r\nfunction validateDirectiveName(name) {\r\n    if (isBuiltInDirective(name)) {\r\n        warn('Do not use built-in directive ids as custom directive id: ' + name);\r\n    }\r\n}\r\n/**\r\n * Adds directives to a VNode.\r\n */\r\nfunction withDirectives(vnode, directives) {\r\n    const internalInstance = currentRenderingInstance;\r\n    if (internalInstance === null) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`withDirectives can only be used inside render functions.`);\r\n        return vnode;\r\n    }\r\n    const instance = internalInstance.proxy;\r\n    const bindings = vnode.dirs || (vnode.dirs = []);\r\n    for (let i = 0; i < directives.length; i++) {\r\n        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];\r\n        if (isFunction$1(dir)) {\r\n            dir = {\r\n                mounted: dir,\r\n                updated: dir\r\n            };\r\n        }\r\n        if (dir.deep) {\r\n            traverse(value);\r\n        }\r\n        bindings.push({\r\n            dir,\r\n            instance,\r\n            value,\r\n            oldValue: void 0,\r\n            arg,\r\n            modifiers\r\n        });\r\n    }\r\n    return vnode;\r\n}\r\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\r\n    const bindings = vnode.dirs;\r\n    const oldBindings = prevVNode && prevVNode.dirs;\r\n    for (let i = 0; i < bindings.length; i++) {\r\n        const binding = bindings[i];\r\n        if (oldBindings) {\r\n            binding.oldValue = oldBindings[i].value;\r\n        }\r\n        let hook = binding.dir[name];\r\n        if (hook) {\r\n            // disable tracking inside all lifecycle hooks\r\n            // since they can potentially be called inside effects.\r\n            pauseTracking();\r\n            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [\r\n                vnode.el,\r\n                binding,\r\n                vnode,\r\n                prevVNode\r\n            ]);\r\n            resetTracking();\r\n        }\r\n    }\r\n}\n\nfunction createAppContext() {\r\n    return {\r\n        app: null,\r\n        config: {\r\n            isNativeTag: NO,\r\n            performance: false,\r\n            globalProperties: {},\r\n            optionMergeStrategies: {},\r\n            errorHandler: undefined,\r\n            warnHandler: undefined,\r\n            compilerOptions: {}\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: Object.create(null),\r\n        optionsCache: new WeakMap(),\r\n        propsCache: new WeakMap(),\r\n        emitsCache: new WeakMap()\r\n    };\r\n}\r\nlet uid = 0;\r\nfunction createAppAPI(render, hydrate) {\r\n    return function createApp(rootComponent, rootProps = null) {\r\n        if (rootProps != null && !isObject$1(rootProps)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`root props passed to app.mount() must be an object.`);\r\n            rootProps = null;\r\n        }\r\n        const context = createAppContext();\r\n        const installedPlugins = new Set();\r\n        let isMounted = false;\r\n        const app = (context.app = {\r\n            _uid: uid++,\r\n            _component: rootComponent,\r\n            _props: rootProps,\r\n            _container: null,\r\n            _context: context,\r\n            _instance: null,\r\n            version,\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`app.config cannot be replaced. Modify individual options instead.`);\r\n                }\r\n            },\r\n            use(plugin, ...options) {\r\n                if (installedPlugins.has(plugin)) {\r\n                    (process.env.NODE_ENV !== 'production') && warn(`Plugin has already been applied to target app.`);\r\n                }\r\n                else if (plugin && isFunction$1(plugin.install)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin.install(app, ...options);\r\n                }\r\n                else if (isFunction$1(plugin)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin(app, ...options);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`A plugin must either be a function or an object with an \"install\" ` +\r\n                        `function.`);\r\n                }\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                if (__VUE_OPTIONS_API__) {\r\n                    if (!context.mixins.includes(mixin)) {\r\n                        context.mixins.push(mixin);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Mixin has already been applied to target app' +\r\n                            (mixin.name ? `: ${mixin.name}` : ''));\r\n                    }\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Mixins are only available in builds supporting Options API');\r\n                }\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateComponentName(name, context.config);\r\n                }\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.components[name]) {\r\n                    warn(`Component \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.components[name] = component;\r\n                return app;\r\n            },\r\n            directive(name, directive) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateDirectiveName(name);\r\n                }\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.directives[name]) {\r\n                    warn(`Directive \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.directives[name] = directive;\r\n                return app;\r\n            },\r\n            mount(rootContainer, isHydrate, isSVG) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    // HMR root reload\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        context.reload = () => {\r\n                            render(cloneVNode(vnode), rootContainer, isSVG);\r\n                        };\r\n                    }\r\n                    if (isHydrate && hydrate) {\r\n                        hydrate(vnode, rootContainer);\r\n                    }\r\n                    else {\r\n                        render(vnode, rootContainer, isSVG);\r\n                    }\r\n                    isMounted = true;\r\n                    app._container = rootContainer;\r\n                    rootContainer.__vue_app__ = app;\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        app._instance = vnode.component;\r\n                        devtoolsInitApp(app, version);\r\n                    }\r\n                    return getExposeProxy(vnode.component) || vnode.component.proxy;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`App has already been mounted.\\n` +\r\n                        `If you want to remount the same app, move your app creation logic ` +\r\n                        `into a factory function and create fresh app instances for each ` +\r\n                        `mount - e.g. \\`const createMyApp = () => createApp(App)\\``);\r\n                }\r\n            },\r\n            unmount() {\r\n                if (isMounted) {\r\n                    render(null, app._container);\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        app._instance = null;\r\n                        devtoolsUnmountApp(app);\r\n                    }\r\n                    delete app._container.__vue_app__;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`Cannot unmount an app that is not mounted.`);\r\n                }\r\n            },\r\n            provide(key, value) {\r\n                if ((process.env.NODE_ENV !== 'production') && key in context.provides) {\r\n                    warn(`App already provides property with key \"${String(key)}\". ` +\r\n                        `It will be overwritten with the new value.`);\r\n                }\r\n                // TypeScript doesn't allow symbols as index type\r\n                // https://github.com/Microsoft/TypeScript/issues/24587\r\n                context.provides[key] = value;\r\n                return app;\r\n            }\r\n        });\r\n        return app;\r\n    };\r\n}\n\nlet hasMismatch = false;\r\nconst isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';\r\nconst isComment = (node) => node.nodeType === 8 /* COMMENT */;\r\n// Note: hydration is DOM-specific\r\n// But we have to place it in core due to tight coupling with core - splitting\r\n// it out creates a ton of unnecessary complexity.\r\n// Hydration also depends on some renderer internal logic which needs to be\r\n// passed in via arguments.\r\nfunction createHydrationFunctions(rendererInternals) {\r\n    const { mt: mountComponent, p: patch, o: { patchProp, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;\r\n    const hydrate = (vnode, container) => {\r\n        if (!container.hasChildNodes()) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to hydrate existing markup but container is empty. ` +\r\n                    `Performing full mount instead.`);\r\n            patch(null, vnode, container);\r\n            flushPostFlushCbs();\r\n            return;\r\n        }\r\n        hasMismatch = false;\r\n        hydrateNode(container.firstChild, vnode, null, null, null);\r\n        flushPostFlushCbs();\r\n        if (hasMismatch && !false) {\r\n            // this error should show up in production\r\n            console.error(`Hydration completed but contains mismatches.`);\r\n        }\r\n    };\r\n    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {\r\n        const isFragmentStart = isComment(node) && node.data === '[';\r\n        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);\r\n        const { type, ref, shapeFlag } = vnode;\r\n        const domType = node.nodeType;\r\n        vnode.el = node;\r\n        let nextNode = null;\r\n        switch (type) {\r\n            case Text:\r\n                if (domType !== 3 /* TEXT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    if (node.data !== vnode.children) {\r\n                        hasMismatch = true;\r\n                        (process.env.NODE_ENV !== 'production') &&\r\n                            warn(`Hydration text mismatch:` +\r\n                                `\\n- Client: ${JSON.stringify(node.data)}` +\r\n                                `\\n- Server: ${JSON.stringify(vnode.children)}`);\r\n                        node.data = vnode.children;\r\n                    }\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Comment:\r\n                if (domType !== 8 /* COMMENT */ || isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Static:\r\n                if (domType !== 1 /* ELEMENT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    // determine anchor, adopt content\r\n                    nextNode = node;\r\n                    // if the static vnode has its content stripped during build,\r\n                    // adopt it from the server-rendered HTML.\r\n                    const needToAdoptContent = !vnode.children.length;\r\n                    for (let i = 0; i < vnode.staticCount; i++) {\r\n                        if (needToAdoptContent)\r\n                            vnode.children += nextNode.outerHTML;\r\n                        if (i === vnode.staticCount - 1) {\r\n                            vnode.anchor = nextNode;\r\n                        }\r\n                        nextNode = nextSibling(nextNode);\r\n                    }\r\n                    return nextNode;\r\n                }\r\n                break;\r\n            case Fragment:\r\n                if (!isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                }\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    if (domType !== 1 /* ELEMENT */ ||\r\n                        vnode.type.toLowerCase() !==\r\n                            node.tagName.toLowerCase()) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    // when setting up the render effect, if the initial vnode already\r\n                    // has .el set, the component will perform hydration instead of mount\r\n                    // on its sub-tree.\r\n                    vnode.slotScopeIds = slotScopeIds;\r\n                    const container = parentNode(node);\r\n                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);\r\n                    // component may be async, so in the case of fragments we cannot rely\r\n                    // on component's rendered output to determine the end of the fragment\r\n                    // instead, we do a lookahead to find the end anchor node.\r\n                    nextNode = isFragmentStart\r\n                        ? locateClosingAsyncAnchor(node)\r\n                        : nextSibling(node);\r\n                    // #3787\r\n                    // if component is async, it may get moved / unmounted before its\r\n                    // inner component is loaded, so we need to give it a placeholder\r\n                    // vnode that matches its adopted DOM.\r\n                    if (isAsyncWrapper(vnode)) {\r\n                        let subTree;\r\n                        if (isFragmentStart) {\r\n                            subTree = createVNode(Fragment);\r\n                            subTree.anchor = nextNode\r\n                                ? nextNode.previousSibling\r\n                                : container.lastChild;\r\n                        }\r\n                        else {\r\n                            subTree =\r\n                                node.nodeType === 3 ? createTextVNode('') : createVNode('div');\r\n                        }\r\n                        subTree.el = node;\r\n                        vnode.component.subTree = subTree;\r\n                    }\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    if (domType !== 8 /* COMMENT */) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid HostVNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode);\r\n        }\r\n        return nextNode;\r\n    };\r\n    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!vnode.dynamicChildren;\r\n        const { type, props, patchFlag, shapeFlag, dirs } = vnode;\r\n        // #4006 for form elements with non-string v-model value bindings\r\n        // e.g. <option :value=\"obj\">, <input type=\"checkbox\" :true-value=\"1\">\r\n        const forcePatchValue = (type === 'input' && dirs) || type === 'option';\r\n        // skip props & children if this is hoisted static nodes\r\n        if (forcePatchValue || patchFlag !== -1 /* HOISTED */) {\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                if (forcePatchValue ||\r\n                    !optimized ||\r\n                    patchFlag & (16 /* FULL_PROPS */ | 32 /* HYDRATE_EVENTS */)) {\r\n                    for (const key in props) {\r\n                        if ((forcePatchValue && key.endsWith('value')) ||\r\n                            (isOn(key) && !isReservedProp(key))) {\r\n                            patchProp(el, key, null, props[key], false, undefined, parentComponent);\r\n                        }\r\n                    }\r\n                }\r\n                else if (props.onClick) {\r\n                    // Fast path for click listeners (which is most often) to avoid\r\n                    // iterating through props.\r\n                    patchProp(el, 'onClick', null, props.onClick, false, undefined, parentComponent);\r\n                }\r\n            }\r\n            // vnode / directive hooks\r\n            let vnodeHooks;\r\n            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {\r\n                invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n            }\r\n            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {\r\n                queueEffectWithSuspense(() => {\r\n                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n                    dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n                }, parentSuspense);\r\n            }\r\n            // children\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */ &&\r\n                // skip if element has innerHTML / textContent\r\n                !(props && (props.innerHTML || props.textContent))) {\r\n                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                let hasWarned = false;\r\n                while (next) {\r\n                    hasMismatch = true;\r\n                    if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                        warn(`Hydration children mismatch in <${vnode.type}>: ` +\r\n                            `server rendered element contains more child nodes than client vdom.`);\r\n                        hasWarned = true;\r\n                    }\r\n                    // The SSRed DOM contains more nodes than it should. Remove them.\r\n                    const cur = next;\r\n                    next = next.nextSibling;\r\n                    remove(cur);\r\n                }\r\n            }\r\n            else if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                if (el.textContent !== vnode.children) {\r\n                    hasMismatch = true;\r\n                    (process.env.NODE_ENV !== 'production') &&\r\n                        warn(`Hydration text content mismatch in <${vnode.type}>:\\n` +\r\n                            `- Client: ${el.textContent}\\n` +\r\n                            `- Server: ${vnode.children}`);\r\n                    el.textContent = vnode.children;\r\n                }\r\n            }\r\n        }\r\n        return el.nextSibling;\r\n    };\r\n    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!parentVNode.dynamicChildren;\r\n        const children = parentVNode.children;\r\n        const l = children.length;\r\n        let hasWarned = false;\r\n        for (let i = 0; i < l; i++) {\r\n            const vnode = optimized\r\n                ? children[i]\r\n                : (children[i] = normalizeVNode(children[i]));\r\n            if (node) {\r\n                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            else if (vnode.type === Text && !vnode.children) {\r\n                continue;\r\n            }\r\n            else {\r\n                hasMismatch = true;\r\n                if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` +\r\n                        `server rendered element contains fewer child nodes than client vdom.`);\r\n                    hasWarned = true;\r\n                }\r\n                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.\r\n                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        const { slotScopeIds: fragmentSlotScopeIds } = vnode;\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        const container = parentNode(node);\r\n        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n        if (next && isComment(next) && next.data === ']') {\r\n            return nextSibling((vnode.anchor = next));\r\n        }\r\n        else {\r\n            // fragment didn't hydrate successfully, since we didn't get a end anchor\r\n            // back. This should have led to node/children mismatch warnings.\r\n            hasMismatch = true;\r\n            // since the anchor is missing, we need to create one and insert it\r\n            insert((vnode.anchor = createComment(`]`)), container, next);\r\n            return next;\r\n        }\r\n    };\r\n    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {\r\n        hasMismatch = true;\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`Hydration node mismatch:\\n- Client vnode:`, vnode.type, `\\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */\r\n                ? `(text)`\r\n                : isComment(node) && node.data === '['\r\n                    ? `(start of fragment)`\r\n                    : ``);\r\n        vnode.el = null;\r\n        if (isFragment) {\r\n            // remove excessive fragment nodes\r\n            const end = locateClosingAsyncAnchor(node);\r\n            while (true) {\r\n                const next = nextSibling(node);\r\n                if (next && next !== end) {\r\n                    remove(next);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const next = nextSibling(node);\r\n        const container = parentNode(node);\r\n        remove(node);\r\n        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n        return next;\r\n    };\r\n    const locateClosingAsyncAnchor = (node) => {\r\n        let match = 0;\r\n        while (node) {\r\n            node = nextSibling(node);\r\n            if (node && isComment(node)) {\r\n                if (node.data === '[')\r\n                    match++;\r\n                if (node.data === ']') {\r\n                    if (match === 0) {\r\n                        return nextSibling(node);\r\n                    }\r\n                    else {\r\n                        match--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    return [hydrate, hydrateNode];\r\n}\n\nlet supported;\r\nlet perf;\r\nfunction startMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        perf.mark(`vue-${type}-${instance.uid}`);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());\r\n    }\r\n}\r\nfunction endMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        const startTag = `vue-${type}-${instance.uid}`;\r\n        const endTag = startTag + `:end`;\r\n        perf.mark(endTag);\r\n        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\r\n        perf.clearMarks(startTag);\r\n        perf.clearMarks(endTag);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());\r\n    }\r\n}\r\nfunction isSupported() {\r\n    if (supported !== undefined) {\r\n        return supported;\r\n    }\r\n    /* eslint-disable no-restricted-globals */\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n        supported = true;\r\n        perf = window.performance;\r\n    }\r\n    else {\r\n        supported = false;\r\n    }\r\n    /* eslint-enable no-restricted-globals */\r\n    return supported;\r\n}\n\n/**\r\n * This is only called in esm-bundler builds.\r\n * It is called when a renderer is created, in `baseCreateRenderer` so that\r\n * importing runtime-core is side-effects free.\r\n *\r\n * istanbul-ignore-next\r\n */\r\nfunction initFeatureFlags() {\r\n    let needWarn = false;\r\n    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_OPTIONS_API__ = true;\r\n    }\r\n    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && needWarn) {\r\n        console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` +\r\n            `configure your bundler to explicitly replace feature flag globals ` +\r\n            `with boolean literals to get proper tree-shaking in the final bundle. ` +\r\n            `See http://link.vuejs.org/feature-flags for more details.`);\r\n    }\r\n}\n\nconst queuePostRenderEffect = queueEffectWithSuspense\r\n    ;\r\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\r\nfunction createRenderer(options) {\r\n    return baseCreateRenderer(options);\r\n}\r\n// Separate API for creating hydration-enabled renderer.\r\n// Hydration logic is only used when calling this function, making it\r\n// tree-shakable.\r\nfunction createHydrationRenderer(options) {\r\n    return baseCreateRenderer(options, createHydrationFunctions);\r\n}\r\n// implementation\r\nfunction baseCreateRenderer(options, createHydrationFns) {\r\n    // compile-time feature flags check\r\n    {\r\n        initFeatureFlags();\r\n    }\r\n    const target = getGlobalThis();\r\n    target.__VUE__ = true;\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);\r\n    }\r\n    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;\r\n    // Note: functions inside this closure should use `const xxx = () => {}`\r\n    // style in order to prevent being inlined by minifiers.\r\n    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = (process.env.NODE_ENV !== 'production') && isHmrUpdating ? false : !!n2.dynamicChildren) => {\r\n        if (n1 === n2) {\r\n            return;\r\n        }\r\n        // patching & not same type, unmount old tree\r\n        if (n1 && !isSameVNodeType(n1, n2)) {\r\n            anchor = getNextHostNode(n1);\r\n            unmount(n1, parentComponent, parentSuspense, true);\r\n            n1 = null;\r\n        }\r\n        if (n2.patchFlag === -2 /* BAIL */) {\r\n            optimized = false;\r\n            n2.dynamicChildren = null;\r\n        }\r\n        const { type, ref, shapeFlag } = n2;\r\n        switch (type) {\r\n            case Text:\r\n                processText(n1, n2, container, anchor);\r\n                break;\r\n            case Comment:\r\n                processCommentNode(n1, n2, container, anchor);\r\n                break;\r\n            case Static:\r\n                if (n1 == null) {\r\n                    mountStaticNode(n2, container, anchor, isSVG);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    patchStaticNode(n1, n2, container, isSVG);\r\n                }\r\n                break;\r\n            case Fragment:\r\n                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid VNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        // set ref\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);\r\n        }\r\n    };\r\n    const processText = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);\r\n        }\r\n        else {\r\n            const el = (n2.el = n1.el);\r\n            if (n2.children !== n1.children) {\r\n                hostSetText(el, n2.children);\r\n            }\r\n        }\r\n    };\r\n    const processCommentNode = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);\r\n        }\r\n        else {\r\n            // there's no support for dynamic comments\r\n            n2.el = n1.el;\r\n        }\r\n    };\r\n    const mountStaticNode = (n2, container, anchor, isSVG) => {\r\n        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const patchStaticNode = (n1, n2, container, isSVG) => {\r\n        // static nodes are only patched during dev for HMR\r\n        if (n2.children !== n1.children) {\r\n            const anchor = hostNextSibling(n1.anchor);\r\n            // remove existing\r\n            removeStaticNode(n1);\r\n            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n        }\r\n        else {\r\n            n2.el = n1.el;\r\n            n2.anchor = n1.anchor;\r\n        }\r\n    };\r\n    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostInsert(el, container, nextSibling);\r\n            el = next;\r\n        }\r\n        hostInsert(anchor, container, nextSibling);\r\n    };\r\n    const removeStaticNode = ({ el, anchor }) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostRemove(el);\r\n            el = next;\r\n        }\r\n        hostRemove(anchor);\r\n    };\r\n    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        isSVG = isSVG || n2.type === 'svg';\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let el;\r\n        let vnodeHook;\r\n        const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;\r\n        if (!(process.env.NODE_ENV !== 'production') &&\r\n            vnode.el &&\r\n            hostCloneNode !== undefined &&\r\n            patchFlag === -1 /* HOISTED */) {\r\n            // If a vnode has non-null el, it means it's being reused.\r\n            // Only static vnodes can be reused, so its mounted DOM nodes should be\r\n            // exactly the same, and we can simply do a clone here.\r\n            // only do this in production since cloned trees cannot be HMR updated.\r\n            el = vnode.el = hostCloneNode(vnode.el);\r\n        }\r\n        else {\r\n            el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);\r\n            // mount children first, since some props may rely on child content\r\n            // being already rendered, e.g. `<select value>`\r\n            if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                hostSetElementText(el, vnode.children);\r\n            }\r\n            else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                for (const key in props) {\r\n                    if (key !== 'value' && !isReservedProp(key)) {\r\n                        hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n                /**\r\n                 * Special case for setting value on DOM elements:\r\n                 * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)\r\n                 * - it needs to be forced (#1471)\r\n                 * #2353 proposes adding another renderer option to configure this, but\r\n                 * the properties affects are so finite it is worth special casing it\r\n                 * here to reduce the complexity. (Special casing it also should not\r\n                 * affect non-DOM renderers)\r\n                 */\r\n                if ('value' in props) {\r\n                    hostPatchProp(el, 'value', null, props.value);\r\n                }\r\n                if ((vnodeHook = props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                }\r\n            }\r\n            // scopeId\r\n            setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            Object.defineProperty(el, '__vnode', {\r\n                value: vnode,\r\n                enumerable: false\r\n            });\r\n            Object.defineProperty(el, '__vueParentComponent', {\r\n                value: parentComponent,\r\n                enumerable: false\r\n            });\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n        }\r\n        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved\r\n        // #1689 For inside suspense + suspense resolved case, just call it\r\n        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&\r\n            transition &&\r\n            !transition.persisted;\r\n        if (needCallTransitionHooks) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        hostInsert(el, container, anchor);\r\n        if ((vnodeHook = props && props.onVnodeMounted) ||\r\n            needCallTransitionHooks ||\r\n            dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                needCallTransitionHooks && transition.enter(el);\r\n                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {\r\n        if (scopeId) {\r\n            hostSetScopeId(el, scopeId);\r\n        }\r\n        if (slotScopeIds) {\r\n            for (let i = 0; i < slotScopeIds.length; i++) {\r\n                hostSetScopeId(el, slotScopeIds[i]);\r\n            }\r\n        }\r\n        if (parentComponent) {\r\n            let subTree = parentComponent.subTree;\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                subTree.patchFlag > 0 &&\r\n                subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n                subTree =\r\n                    filterSingleRoot(subTree.children) || subTree;\r\n            }\r\n            if (vnode === subTree) {\r\n                const parentVNode = parentComponent.vnode;\r\n                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);\r\n            }\r\n        }\r\n    };\r\n    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            const child = (children[i] = optimized\r\n                ? cloneIfMounted(children[i])\r\n                : normalizeVNode(children[i]));\r\n            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const el = (n2.el = n1.el);\r\n        let { patchFlag, dynamicChildren, dirs } = n2;\r\n        // #1426 take the old vnode's patch flag into account since user may clone a\r\n        // compiler-generated vnode, which de-opts to FULL_PROPS\r\n        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */;\r\n        const oldProps = n1.props || EMPTY_OBJ;\r\n        const newProps = n2.props || EMPTY_OBJ;\r\n        let vnodeHook;\r\n        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';\r\n        if (dynamicChildren) {\r\n            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);\r\n            if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                traverseStaticChildren(n1, n2);\r\n            }\r\n        }\r\n        else if (!optimized) {\r\n            // full diff\r\n            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);\r\n        }\r\n        if (patchFlag > 0) {\r\n            // the presence of a patchFlag means this element's render code was\r\n            // generated by the compiler and can take the fast path.\r\n            // in this path old node and new node are guaranteed to have the same shape\r\n            // (i.e. at the exact same position in the source template)\r\n            if (patchFlag & 16 /* FULL_PROPS */) {\r\n                // element props contain dynamic keys, full diff needed\r\n                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else {\r\n                // class\r\n                // this flag is matched when the element has dynamic class bindings.\r\n                if (patchFlag & 2 /* CLASS */) {\r\n                    if (oldProps.class !== newProps.class) {\r\n                        hostPatchProp(el, 'class', null, newProps.class, isSVG);\r\n                    }\r\n                }\r\n                // style\r\n                // this flag is matched when the element has dynamic style bindings\r\n                if (patchFlag & 4 /* STYLE */) {\r\n                    hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);\r\n                }\r\n                // props\r\n                // This flag is matched when the element has dynamic prop/attr bindings\r\n                // other than class and style. The keys of dynamic prop/attrs are saved for\r\n                // faster iteration.\r\n                // Note dynamic keys like :[foo]=\"bar\" will cause this optimization to\r\n                // bail out and go through a full diff because we need to unset the old key\r\n                if (patchFlag & 8 /* PROPS */) {\r\n                    // if the flag is present then dynamicProps must be non-null\r\n                    const propsToUpdate = n2.dynamicProps;\r\n                    for (let i = 0; i < propsToUpdate.length; i++) {\r\n                        const key = propsToUpdate[i];\r\n                        const prev = oldProps[key];\r\n                        const next = newProps[key];\r\n                        // #1471 force patch value\r\n                        if (next !== prev || key === 'value') {\r\n                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // text\r\n            // This flag is matched when the element has only dynamic text children.\r\n            if (patchFlag & 1 /* TEXT */) {\r\n                if (n1.children !== n2.children) {\r\n                    hostSetElementText(el, n2.children);\r\n                }\r\n            }\r\n        }\r\n        else if (!optimized && dynamicChildren == null) {\r\n            // unoptimized, full diff\r\n            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n                dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    // The fast path for blocks.\r\n    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {\r\n        for (let i = 0; i < newChildren.length; i++) {\r\n            const oldVNode = oldChildren[i];\r\n            const newVNode = newChildren[i];\r\n            // Determine the container (parent element) for the patch.\r\n            const container = \r\n            // oldVNode may be an errored async setup() component inside Suspense\r\n            // which will not have a mounted element\r\n            oldVNode.el &&\r\n                // - In the case of a Fragment, we need to provide the actual parent\r\n                // of the Fragment itself so it can move its children.\r\n                (oldVNode.type === Fragment ||\r\n                    // - In the case of different nodes, there is going to be a replacement\r\n                    // which also requires the correct parent container\r\n                    !isSameVNodeType(oldVNode, newVNode) ||\r\n                    // - In the case of a component, it could contain anything.\r\n                    oldVNode.shapeFlag & (6 /* COMPONENT */ | 64 /* TELEPORT */))\r\n                ? hostParentNode(oldVNode.el)\r\n                : // In other cases, the parent container is not actually used so we\r\n                    // just pass the block element here to avoid a DOM parentNode call.\r\n                    fallbackContainer;\r\n            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);\r\n        }\r\n    };\r\n    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {\r\n        if (oldProps !== newProps) {\r\n            for (const key in newProps) {\r\n                // empty string is not valid prop\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                const next = newProps[key];\r\n                const prev = oldProps[key];\r\n                // defer patching value\r\n                if (next !== prev && key !== 'value') {\r\n                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                }\r\n            }\r\n            if (oldProps !== EMPTY_OBJ) {\r\n                for (const key in oldProps) {\r\n                    if (!isReservedProp(key) && !(key in newProps)) {\r\n                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n            }\r\n            if ('value' in newProps) {\r\n                hostPatchProp(el, 'value', oldProps.value, newProps.value);\r\n            }\r\n        }\r\n    };\r\n    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''));\r\n        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''));\r\n        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        // check if this is a slot fragment with :slotted scope ids\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        if (n1 == null) {\r\n            hostInsert(fragmentStartAnchor, container, anchor);\r\n            hostInsert(fragmentEndAnchor, container, anchor);\r\n            // a fragment can only have array children\r\n            // since they are either generated by the compiler, or implicitly created\r\n            // from arrays.\r\n            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            if (patchFlag > 0 &&\r\n                patchFlag & 64 /* STABLE_FRAGMENT */ &&\r\n                dynamicChildren &&\r\n                // #2715 the previous fragment could've been a BAILed one as a result\r\n                // of renderSlot() with no valid children\r\n                n1.dynamicChildren) {\r\n                // a stable fragment (template root or <template v-for>) doesn't need to\r\n                // patch children order, but it may contain dynamicChildren.\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                    traverseStaticChildren(n1, n2);\r\n                }\r\n                else if (\r\n                // #2080 if the stable fragment has a key, it's a <template v-for> that may\r\n                //  get moved around. Make sure all root level vnodes inherit el.\r\n                // #2134 or if it's a component root, it may also get moved around\r\n                // as the component is being moved.\r\n                n2.key != null ||\r\n                    (parentComponent && n2 === parentComponent.subTree)) {\r\n                    traverseStaticChildren(n1, n2, true /* shallow */);\r\n                }\r\n            }\r\n            else {\r\n                // keyed / unkeyed, or manual fragments.\r\n                // for keyed & unkeyed, since they are compiler generated from v-for,\r\n                // each child is guaranteed to be a block so the fragment will never\r\n                // have dynamicChildren.\r\n                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n        }\r\n    };\r\n    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        n2.slotScopeIds = slotScopeIds;\r\n        if (n1 == null) {\r\n            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\r\n            }\r\n            else {\r\n                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n        }\r\n        else {\r\n            updateComponent(n1, n2, optimized);\r\n        }\r\n    };\r\n    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            registerHMR(instance);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            pushWarningContext(initialVNode);\r\n            startMeasure(instance, `mount`);\r\n        }\r\n        // inject renderer internals for keepAlive\r\n        if (isKeepAlive(initialVNode)) {\r\n            instance.ctx.renderer = internals;\r\n        }\r\n        // resolve props and slots for setup context\r\n        {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                startMeasure(instance, `init`);\r\n            }\r\n            setupComponent(instance);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                endMeasure(instance, `init`);\r\n            }\r\n        }\r\n        // setup() is async. This component relies on async logic to be resolved\r\n        // before proceeding\r\n        if (instance.asyncDep) {\r\n            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);\r\n            // Give it a placeholder if this is not hydration\r\n            // TODO handle self-defined fallback\r\n            if (!initialVNode.el) {\r\n                const placeholder = (instance.subTree = createVNode(Comment));\r\n                processCommentNode(null, placeholder, container, anchor);\r\n            }\r\n            return;\r\n        }\r\n        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            popWarningContext();\r\n            endMeasure(instance, `mount`);\r\n        }\r\n    };\r\n    const updateComponent = (n1, n2, optimized) => {\r\n        const instance = (n2.component = n1.component);\r\n        if (shouldUpdateComponent(n1, n2, optimized)) {\r\n            if (instance.asyncDep &&\r\n                !instance.asyncResolved) {\r\n                // async & still pending - just update props and slots\r\n                // since the component's reactive effect for render isn't set-up yet\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(n2);\r\n                }\r\n                updateComponentPreRender(instance, n2, optimized);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                // normal update\r\n                instance.next = n2;\r\n                // in case the child component is also queued, remove it to avoid\r\n                // double updating the same child component in the same flush.\r\n                invalidateJob(instance.update);\r\n                // instance.update is the reactive effect.\r\n                instance.update();\r\n            }\r\n        }\r\n        else {\r\n            // no update needed. just copy over properties\r\n            n2.component = n1.component;\r\n            n2.el = n1.el;\r\n            instance.vnode = n2;\r\n        }\r\n    };\r\n    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\r\n        const componentUpdateFn = () => {\r\n            if (!instance.isMounted) {\r\n                let vnodeHook;\r\n                const { el, props } = initialVNode;\r\n                const { bm, m, parent } = instance;\r\n                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);\r\n                effect.allowRecurse = false;\r\n                // beforeMount hook\r\n                if (bm) {\r\n                    invokeArrayFns(bm);\r\n                }\r\n                // onVnodeBeforeMount\r\n                if (!isAsyncWrapperVNode &&\r\n                    (vnodeHook = props && props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parent, initialVNode);\r\n                }\r\n                effect.allowRecurse = true;\r\n                if (el && hydrateNode) {\r\n                    // vnode has adopted host node - perform hydration instead of mount.\r\n                    const hydrateSubTree = () => {\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            startMeasure(instance, `render`);\r\n                        }\r\n                        instance.subTree = renderComponentRoot(instance);\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            endMeasure(instance, `render`);\r\n                        }\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            startMeasure(instance, `hydrate`);\r\n                        }\r\n                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            endMeasure(instance, `hydrate`);\r\n                        }\r\n                    };\r\n                    if (isAsyncWrapperVNode) {\r\n                        initialVNode.type.__asyncLoader().then(\r\n                        // note: we are moving the render call into an async callback,\r\n                        // which means it won't track dependencies - but it's ok because\r\n                        // a server-rendered async wrapper is already in resolved state\r\n                        // and it will never need to change.\r\n                        () => !instance.isUnmounted && hydrateSubTree());\r\n                    }\r\n                    else {\r\n                        hydrateSubTree();\r\n                    }\r\n                }\r\n                else {\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `render`);\r\n                    }\r\n                    const subTree = (instance.subTree = renderComponentRoot(instance));\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `render`);\r\n                    }\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `patch`);\r\n                    }\r\n                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `patch`);\r\n                    }\r\n                    initialVNode.el = subTree.el;\r\n                }\r\n                // mounted hook\r\n                if (m) {\r\n                    queuePostRenderEffect(m, parentSuspense);\r\n                }\r\n                // onVnodeMounted\r\n                if (!isAsyncWrapperVNode &&\r\n                    (vnodeHook = props && props.onVnodeMounted)) {\r\n                    const scopedInitialVNode = initialVNode;\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);\r\n                }\r\n                // activated hook for keep-alive roots.\r\n                // #1742 activated hook must be accessed after first render\r\n                // since the hook may be injected by a child keep-alive\r\n                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n                    instance.a && queuePostRenderEffect(instance.a, parentSuspense);\r\n                }\r\n                instance.isMounted = true;\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentAdded(instance);\r\n                }\r\n                // #2458: deference mount-only object parameters to prevent memleaks\r\n                initialVNode = container = anchor = null;\r\n            }\r\n            else {\r\n                // updateComponent\r\n                // This is triggered by mutation of component's own state (next: null)\r\n                // OR parent calling processComponent (next: VNode)\r\n                let { next, bu, u, parent, vnode } = instance;\r\n                let originNext = next;\r\n                let vnodeHook;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(next || instance.vnode);\r\n                }\r\n                // Disallow component effect recursion during pre-lifecycle hooks.\r\n                effect.allowRecurse = false;\r\n                if (next) {\r\n                    next.el = vnode.el;\r\n                    updateComponentPreRender(instance, next, optimized);\r\n                }\r\n                else {\r\n                    next = vnode;\r\n                }\r\n                // beforeUpdate hook\r\n                if (bu) {\r\n                    invokeArrayFns(bu);\r\n                }\r\n                // onVnodeBeforeUpdate\r\n                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {\r\n                    invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                }\r\n                effect.allowRecurse = true;\r\n                // render\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `render`);\r\n                }\r\n                const nextTree = renderComponentRoot(instance);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `render`);\r\n                }\r\n                const prevTree = instance.subTree;\r\n                instance.subTree = nextTree;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `patch`);\r\n                }\r\n                patch(prevTree, nextTree, \r\n                // parent may have changed if it's in a teleport\r\n                hostParentNode(prevTree.el), \r\n                // anchor may have changed if it's in a fragment\r\n                getNextHostNode(prevTree), instance, parentSuspense, isSVG);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `patch`);\r\n                }\r\n                next.el = nextTree.el;\r\n                if (originNext === null) {\r\n                    // self-triggered update. In case of HOC, update parent component\r\n                    // vnode el. HOC is indicated by parent instance's subTree pointing\r\n                    // to child component's vnode\r\n                    updateHOCHostEl(instance, nextTree.el);\r\n                }\r\n                // updated hook\r\n                if (u) {\r\n                    queuePostRenderEffect(u, parentSuspense);\r\n                }\r\n                // onVnodeUpdated\r\n                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentUpdated(instance);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n            }\r\n        };\r\n        // create reactive effect for rendering\r\n        const effect = new ReactiveEffect(componentUpdateFn, () => queueJob(instance.update), instance.scope // track it in component's effect scope\r\n        );\r\n        const update = (instance.update = effect.run.bind(effect));\r\n        update.id = instance.uid;\r\n        // allowRecurse\r\n        // #1801, #2043 component render effects should allow recursive updates\r\n        effect.allowRecurse = update.allowRecurse = true;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            effect.onTrack = instance.rtc\r\n                ? e => invokeArrayFns(instance.rtc, e)\r\n                : void 0;\r\n            effect.onTrigger = instance.rtg\r\n                ? e => invokeArrayFns(instance.rtg, e)\r\n                : void 0;\r\n            // @ts-ignore (for scheduler)\r\n            update.ownerInstance = instance;\r\n        }\r\n        update();\r\n    };\r\n    const updateComponentPreRender = (instance, nextVNode, optimized) => {\r\n        nextVNode.component = instance;\r\n        const prevProps = instance.vnode.props;\r\n        instance.vnode = nextVNode;\r\n        instance.next = null;\r\n        updateProps(instance, nextVNode.props, prevProps, optimized);\r\n        updateSlots(instance, nextVNode.children, optimized);\r\n        pauseTracking();\r\n        // props update may have triggered pre-flush watchers.\r\n        // flush them before the render update.\r\n        flushPreFlushCbs(undefined, instance.update);\r\n        resetTracking();\r\n    };\r\n    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {\r\n        const c1 = n1 && n1.children;\r\n        const prevShapeFlag = n1 ? n1.shapeFlag : 0;\r\n        const c2 = n2.children;\r\n        const { patchFlag, shapeFlag } = n2;\r\n        // fast path\r\n        if (patchFlag > 0) {\r\n            if (patchFlag & 128 /* KEYED_FRAGMENT */) {\r\n                // this could be either fully-keyed or mixed (some keyed some not)\r\n                // presence of patchFlag means children are guaranteed to be arrays\r\n                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n            else if (patchFlag & 256 /* UNKEYED_FRAGMENT */) {\r\n                // unkeyed\r\n                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n        }\r\n        // children has 3 possibilities: text, array or no children.\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            // text children fast path\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                unmountChildren(c1, parentComponent, parentSuspense);\r\n            }\r\n            if (c2 !== c1) {\r\n                hostSetElementText(container, c2);\r\n            }\r\n        }\r\n        else {\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                // prev children was array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    // two arrays, cannot assume anything, do full diff\r\n                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else {\r\n                    // no new children, just unmount old\r\n                    unmountChildren(c1, parentComponent, parentSuspense, true);\r\n                }\r\n            }\r\n            else {\r\n                // prev children was text OR null\r\n                // new children is array OR null\r\n                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(container, '');\r\n                }\r\n                // mount new if array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        c1 = c1 || EMPTY_ARR;\r\n        c2 = c2 || EMPTY_ARR;\r\n        const oldLength = c1.length;\r\n        const newLength = c2.length;\r\n        const commonLength = Math.min(oldLength, newLength);\r\n        let i;\r\n        for (i = 0; i < commonLength; i++) {\r\n            const nextChild = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        if (oldLength > newLength) {\r\n            // remove old\r\n            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);\r\n        }\r\n        else {\r\n            // mount new\r\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);\r\n        }\r\n    };\r\n    // can be all-keyed or mixed\r\n    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let i = 0;\r\n        const l2 = c2.length;\r\n        let e1 = c1.length - 1; // prev ending index\r\n        let e2 = l2 - 1; // next ending index\r\n        // 1. sync from start\r\n        // (a b) c\r\n        // (a b) d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // 2. sync from end\r\n        // a (b c)\r\n        // d e (b c)\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = (c2[e2] = optimized\r\n                ? cloneIfMounted(c2[e2])\r\n                : normalizeVNode(c2[e2]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 3. common sequence + mount\r\n        // (a b)\r\n        // (a b) c\r\n        // i = 2, e1 = 1, e2 = 2\r\n        // (a b)\r\n        // c (a b)\r\n        // i = 0, e1 = -1, e2 = 0\r\n        if (i > e1) {\r\n            if (i <= e2) {\r\n                const nextPos = e2 + 1;\r\n                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\r\n                while (i <= e2) {\r\n                    patch(null, (c2[i] = optimized\r\n                        ? cloneIfMounted(c2[i])\r\n                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // 4. common sequence + unmount\r\n        // (a b) c\r\n        // (a b)\r\n        // i = 2, e1 = 2, e2 = 1\r\n        // a (b c)\r\n        // (b c)\r\n        // i = 0, e1 = 0, e2 = -1\r\n        else if (i > e2) {\r\n            while (i <= e1) {\r\n                unmount(c1[i], parentComponent, parentSuspense, true);\r\n                i++;\r\n            }\r\n        }\r\n        // 5. unknown sequence\r\n        // [i ... e1 + 1]: a b [c d e] f g\r\n        // [i ... e2 + 1]: a b [e d c h] f g\r\n        // i = 2, e1 = 4, e2 = 5\r\n        else {\r\n            const s1 = i; // prev starting index\r\n            const s2 = i; // next starting index\r\n            // 5.1 build key:index map for newChildren\r\n            const keyToNewIndexMap = new Map();\r\n            for (i = s2; i <= e2; i++) {\r\n                const nextChild = (c2[i] = optimized\r\n                    ? cloneIfMounted(c2[i])\r\n                    : normalizeVNode(c2[i]));\r\n                if (nextChild.key != null) {\r\n                    if ((process.env.NODE_ENV !== 'production') && keyToNewIndexMap.has(nextChild.key)) {\r\n                        warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\r\n                    }\r\n                    keyToNewIndexMap.set(nextChild.key, i);\r\n                }\r\n            }\r\n            // 5.2 loop through old children left to be patched and try to patch\r\n            // matching nodes & remove nodes that are no longer present\r\n            let j;\r\n            let patched = 0;\r\n            const toBePatched = e2 - s2 + 1;\r\n            let moved = false;\r\n            // used to track whether any node has moved\r\n            let maxNewIndexSoFar = 0;\r\n            // works as Map<newIndex, oldIndex>\r\n            // Note that oldIndex is offset by +1\r\n            // and oldIndex = 0 is a special value indicating the new node has\r\n            // no corresponding old node.\r\n            // used for determining longest stable subsequence\r\n            const newIndexToOldIndexMap = new Array(toBePatched);\r\n            for (i = 0; i < toBePatched; i++)\r\n                newIndexToOldIndexMap[i] = 0;\r\n            for (i = s1; i <= e1; i++) {\r\n                const prevChild = c1[i];\r\n                if (patched >= toBePatched) {\r\n                    // all new children have been patched so this can only be a removal\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                    continue;\r\n                }\r\n                let newIndex;\r\n                if (prevChild.key != null) {\r\n                    newIndex = keyToNewIndexMap.get(prevChild.key);\r\n                }\r\n                else {\r\n                    // key-less node, try to locate a key-less node of the same type\r\n                    for (j = s2; j <= e2; j++) {\r\n                        if (newIndexToOldIndexMap[j - s2] === 0 &&\r\n                            isSameVNodeType(prevChild, c2[j])) {\r\n                            newIndex = j;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (newIndex === undefined) {\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                }\r\n                else {\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1;\r\n                    if (newIndex >= maxNewIndexSoFar) {\r\n                        maxNewIndexSoFar = newIndex;\r\n                    }\r\n                    else {\r\n                        moved = true;\r\n                    }\r\n                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    patched++;\r\n                }\r\n            }\r\n            // 5.3 move and mount\r\n            // generate longest stable subsequence only when nodes have moved\r\n            const increasingNewIndexSequence = moved\r\n                ? getSequence(newIndexToOldIndexMap)\r\n                : EMPTY_ARR;\r\n            j = increasingNewIndexSequence.length - 1;\r\n            // looping backwards so that we can use last patched node as anchor\r\n            for (i = toBePatched - 1; i >= 0; i--) {\r\n                const nextIndex = s2 + i;\r\n                const nextChild = c2[nextIndex];\r\n                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\r\n                if (newIndexToOldIndexMap[i] === 0) {\r\n                    // mount new\r\n                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (moved) {\r\n                    // move if:\r\n                    // There is no stable subsequence (e.g. a reverse)\r\n                    // OR current node is not among the stable sequence\r\n                    if (j < 0 || i !== increasingNewIndexSequence[j]) {\r\n                        move(nextChild, container, anchor, 2 /* REORDER */);\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\r\n        const { el, type, transition, children, shapeFlag } = vnode;\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            move(vnode.component.subTree, container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 128 /* SUSPENSE */) {\r\n            vnode.suspense.move(container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type.move(vnode, container, anchor, internals);\r\n            return;\r\n        }\r\n        if (type === Fragment) {\r\n            hostInsert(el, container, anchor);\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, anchor, moveType);\r\n            }\r\n            hostInsert(vnode.anchor, container, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            moveStaticNode(vnode, container, anchor);\r\n            return;\r\n        }\r\n        // single nodes\r\n        const needTransition = moveType !== 2 /* REORDER */ &&\r\n            shapeFlag & 1 /* ELEMENT */ &&\r\n            transition;\r\n        if (needTransition) {\r\n            if (moveType === 0 /* ENTER */) {\r\n                transition.beforeEnter(el);\r\n                hostInsert(el, container, anchor);\r\n                queuePostRenderEffect(() => transition.enter(el), parentSuspense);\r\n            }\r\n            else {\r\n                const { leave, delayLeave, afterLeave } = transition;\r\n                const remove = () => hostInsert(el, container, anchor);\r\n                const performLeave = () => {\r\n                    leave(el, () => {\r\n                        remove();\r\n                        afterLeave && afterLeave();\r\n                    });\r\n                };\r\n                if (delayLeave) {\r\n                    delayLeave(el, remove, performLeave);\r\n                }\r\n                else {\r\n                    performLeave();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            hostInsert(el, container, anchor);\r\n        }\r\n    };\r\n    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {\r\n        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;\r\n        // unset ref\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode, true);\r\n        }\r\n        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n            parentComponent.ctx.deactivate(vnode);\r\n            return;\r\n        }\r\n        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */ && dirs;\r\n        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);\r\n        let vnodeHook;\r\n        if (shouldInvokeVnodeHook &&\r\n            (vnodeHook = props && props.onVnodeBeforeUnmount)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n        }\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            unmountComponent(vnode.component, parentSuspense, doRemove);\r\n        }\r\n        else {\r\n            if (shapeFlag & 128 /* SUSPENSE */) {\r\n                vnode.suspense.unmount(parentSuspense, doRemove);\r\n                return;\r\n            }\r\n            if (shouldInvokeDirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');\r\n            }\r\n            if (shapeFlag & 64 /* TELEPORT */) {\r\n                vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);\r\n            }\r\n            else if (dynamicChildren &&\r\n                // #1153: fast path should not be taken for non-stable (v-for) fragments\r\n                (type !== Fragment ||\r\n                    (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */))) {\r\n                // fast path for block nodes: only need to unmount dynamic children.\r\n                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);\r\n            }\r\n            else if ((type === Fragment &&\r\n                patchFlag &\r\n                    (128 /* KEYED_FRAGMENT */ | 256 /* UNKEYED_FRAGMENT */)) ||\r\n                (!optimized && shapeFlag & 16 /* ARRAY_CHILDREN */)) {\r\n                unmountChildren(children, parentComponent, parentSuspense);\r\n            }\r\n            if (doRemove) {\r\n                remove(vnode);\r\n            }\r\n        }\r\n        if ((shouldInvokeVnodeHook &&\r\n            (vnodeHook = props && props.onVnodeUnmounted)) ||\r\n            shouldInvokeDirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                shouldInvokeDirs &&\r\n                    invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const remove = vnode => {\r\n        const { type, el, anchor, transition } = vnode;\r\n        if (type === Fragment) {\r\n            removeFragment(el, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            removeStaticNode(vnode);\r\n            return;\r\n        }\r\n        const performRemove = () => {\r\n            hostRemove(el);\r\n            if (transition && !transition.persisted && transition.afterLeave) {\r\n                transition.afterLeave();\r\n            }\r\n        };\r\n        if (vnode.shapeFlag & 1 /* ELEMENT */ &&\r\n            transition &&\r\n            !transition.persisted) {\r\n            const { leave, delayLeave } = transition;\r\n            const performLeave = () => leave(el, performRemove);\r\n            if (delayLeave) {\r\n                delayLeave(vnode.el, performRemove, performLeave);\r\n            }\r\n            else {\r\n                performLeave();\r\n            }\r\n        }\r\n        else {\r\n            performRemove();\r\n        }\r\n    };\r\n    const removeFragment = (cur, end) => {\r\n        // For fragments, directly remove all contained DOM nodes.\r\n        // (fragment child nodes cannot have transition)\r\n        let next;\r\n        while (cur !== end) {\r\n            next = hostNextSibling(cur);\r\n            hostRemove(cur);\r\n            cur = next;\r\n        }\r\n        hostRemove(end);\r\n    };\r\n    const unmountComponent = (instance, parentSuspense, doRemove) => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            unregisterHMR(instance);\r\n        }\r\n        const { bum, scope, update, subTree, um } = instance;\r\n        // beforeUnmount hook\r\n        if (bum) {\r\n            invokeArrayFns(bum);\r\n        }\r\n        // stop effects in component scope\r\n        scope.stop();\r\n        // update may be null if a component is unmounted before its async\r\n        // setup has resolved.\r\n        if (update) {\r\n            // so that scheduler will no longer invoke it\r\n            update.active = false;\r\n            unmount(subTree, instance, parentSuspense, doRemove);\r\n        }\r\n        // unmounted hook\r\n        if (um) {\r\n            queuePostRenderEffect(um, parentSuspense);\r\n        }\r\n        queuePostRenderEffect(() => {\r\n            instance.isUnmounted = true;\r\n        }, parentSuspense);\r\n        // A component with async dep inside a pending suspense is unmounted before\r\n        // its async dep resolves. This should remove the dep from the suspense, and\r\n        // cause the suspense to resolve immediately if that was the last dep.\r\n        if (parentSuspense &&\r\n            parentSuspense.pendingBranch &&\r\n            !parentSuspense.isUnmounted &&\r\n            instance.asyncDep &&\r\n            !instance.asyncResolved &&\r\n            instance.suspenseId === parentSuspense.pendingId) {\r\n            parentSuspense.deps--;\r\n            if (parentSuspense.deps === 0) {\r\n                parentSuspense.resolve();\r\n            }\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentRemoved(instance);\r\n        }\r\n    };\r\n    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);\r\n        }\r\n    };\r\n    const getNextHostNode = vnode => {\r\n        if (vnode.shapeFlag & 6 /* COMPONENT */) {\r\n            return getNextHostNode(vnode.component.subTree);\r\n        }\r\n        if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n            return vnode.suspense.next();\r\n        }\r\n        return hostNextSibling((vnode.anchor || vnode.el));\r\n    };\r\n    const render = (vnode, container, isSVG) => {\r\n        if (vnode == null) {\r\n            if (container._vnode) {\r\n                unmount(container._vnode, null, null, true);\r\n            }\r\n        }\r\n        else {\r\n            patch(container._vnode || null, vnode, container, null, null, null, isSVG);\r\n        }\r\n        flushPostFlushCbs();\r\n        container._vnode = vnode;\r\n    };\r\n    const internals = {\r\n        p: patch,\r\n        um: unmount,\r\n        m: move,\r\n        r: remove,\r\n        mt: mountComponent,\r\n        mc: mountChildren,\r\n        pc: patchChildren,\r\n        pbc: patchBlockChildren,\r\n        n: getNextHostNode,\r\n        o: options\r\n    };\r\n    let hydrate;\r\n    let hydrateNode;\r\n    if (createHydrationFns) {\r\n        [hydrate, hydrateNode] = createHydrationFns(internals);\r\n    }\r\n    return {\r\n        render,\r\n        hydrate,\r\n        createApp: createAppAPI(render, hydrate)\r\n    };\r\n}\r\nfunction setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {\r\n    if (isArray(rawRef)) {\r\n        rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));\r\n        return;\r\n    }\r\n    if (isAsyncWrapper(vnode) && !isUnmount) {\r\n        // when mounting async components, nothing needs to be done,\r\n        // because the template ref is forwarded to inner component\r\n        return;\r\n    }\r\n    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */\r\n        ? getExposeProxy(vnode.component) || vnode.component.proxy\r\n        : vnode.el;\r\n    const value = isUnmount ? null : refValue;\r\n    const { i: owner, r: ref } = rawRef;\r\n    if ((process.env.NODE_ENV !== 'production') && !owner) {\r\n        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` +\r\n            `A vnode with ref must be created inside the render function.`);\r\n        return;\r\n    }\r\n    const oldRef = oldRawRef && oldRawRef.r;\r\n    const refs = owner.refs === EMPTY_OBJ ? (owner.refs = {}) : owner.refs;\r\n    const setupState = owner.setupState;\r\n    // dynamic ref changed. unset old ref\r\n    if (oldRef != null && oldRef !== ref) {\r\n        if (isString(oldRef)) {\r\n            refs[oldRef] = null;\r\n            if (hasOwn(setupState, oldRef)) {\r\n                setupState[oldRef] = null;\r\n            }\r\n        }\r\n        else if (isRef(oldRef)) {\r\n            oldRef.value = null;\r\n        }\r\n    }\r\n    if (isString(ref)) {\r\n        const doSet = () => {\r\n            {\r\n                refs[ref] = value;\r\n            }\r\n            if (hasOwn(setupState, ref)) {\r\n                setupState[ref] = value;\r\n            }\r\n        };\r\n        // #1789: for non-null values, set them after render\r\n        // null values means this is unmount and it should not overwrite another\r\n        // ref with the same key\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isRef(ref)) {\r\n        const doSet = () => {\r\n            ref.value = value;\r\n        };\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isFunction$1(ref)) {\r\n        callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */, [value, refs]);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn('Invalid template ref type:', value, `(${typeof value})`);\r\n    }\r\n}\r\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\r\n    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */, [\r\n        vnode,\r\n        prevVNode\r\n    ]);\r\n}\r\n/**\r\n * #1156\r\n * When a component is HMR-enabled, we need to make sure that all static nodes\r\n * inside a block also inherit the DOM element from the previous tree so that\r\n * HMR updates (which are full updates) can retrieve the element for patching.\r\n *\r\n * #2080\r\n * Inside keyed `template` fragment static children, if a fragment is moved,\r\n * the children will always moved so that need inherit el form previous nodes\r\n * to ensure correct moved position.\r\n */\r\nfunction traverseStaticChildren(n1, n2, shallow = false) {\r\n    const ch1 = n1.children;\r\n    const ch2 = n2.children;\r\n    if (isArray(ch1) && isArray(ch2)) {\r\n        for (let i = 0; i < ch1.length; i++) {\r\n            // this is only called in the optimized path so array children are\r\n            // guaranteed to be vnodes\r\n            const c1 = ch1[i];\r\n            let c2 = ch2[i];\r\n            if (c2.shapeFlag & 1 /* ELEMENT */ && !c2.dynamicChildren) {\r\n                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */) {\r\n                    c2 = ch2[i] = cloneIfMounted(ch2[i]);\r\n                    c2.el = c1.el;\r\n                }\r\n                if (!shallow)\r\n                    traverseStaticChildren(c1, c2);\r\n            }\r\n            // also inherit for comment nodes, but not placeholders (e.g. v-if which\r\n            // would have received .el during block patch)\r\n            if ((process.env.NODE_ENV !== 'production') && c2.type === Comment && !c2.el) {\r\n                c2.el = c1.el;\r\n            }\r\n        }\r\n    }\r\n}\r\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction getSequence(arr) {\r\n    const p = arr.slice();\r\n    const result = [0];\r\n    let i, j, u, v, c;\r\n    const len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        const arrI = arr[i];\r\n        if (arrI !== 0) {\r\n            j = result[result.length - 1];\r\n            if (arr[j] < arrI) {\r\n                p[i] = j;\r\n                result.push(i);\r\n                continue;\r\n            }\r\n            u = 0;\r\n            v = result.length - 1;\r\n            while (u < v) {\r\n                c = (u + v) >> 1;\r\n                if (arr[result[c]] < arrI) {\r\n                    u = c + 1;\r\n                }\r\n                else {\r\n                    v = c;\r\n                }\r\n            }\r\n            if (arrI < arr[result[u]]) {\r\n                if (u > 0) {\r\n                    p[i] = result[u - 1];\r\n                }\r\n                result[u] = i;\r\n            }\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\n\nconst isTeleport = (type) => type.__isTeleport;\r\nconst isTeleportDisabled = (props) => props && (props.disabled || props.disabled === '');\r\nconst isTargetSVG = (target) => typeof SVGElement !== 'undefined' && target instanceof SVGElement;\r\nconst resolveTarget = (props, select) => {\r\n    const targetSelector = props && props.to;\r\n    if (isString(targetSelector)) {\r\n        if (!select) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current renderer does not support string target for Teleports. ` +\r\n                    `(missing querySelector renderer option)`);\r\n            return null;\r\n        }\r\n        else {\r\n            const target = select(targetSelector);\r\n            if (!target) {\r\n                (process.env.NODE_ENV !== 'production') &&\r\n                    warn(`Failed to locate Teleport target with selector \"${targetSelector}\". ` +\r\n                        `Note the target element must exist before the component is mounted - ` +\r\n                        `i.e. the target cannot be rendered by the component itself, and ` +\r\n                        `ideally should be outside of the entire Vue component tree.`);\r\n            }\r\n            return target;\r\n        }\r\n    }\r\n    else {\r\n        if ((process.env.NODE_ENV !== 'production') && !targetSelector && !isTeleportDisabled(props)) {\r\n            warn(`Invalid Teleport target: ${targetSelector}`);\r\n        }\r\n        return targetSelector;\r\n    }\r\n};\r\nconst TeleportImpl = {\r\n    __isTeleport: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {\r\n        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;\r\n        const disabled = isTeleportDisabled(n2.props);\r\n        let { shapeFlag, children, dynamicChildren } = n2;\r\n        // #3302\r\n        // HMR updated, force full diff\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            // insert anchors in the main view\r\n            const placeholder = (n2.el = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport start')\r\n                : createText(''));\r\n            const mainAnchor = (n2.anchor = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport end')\r\n                : createText(''));\r\n            insert(placeholder, container, anchor);\r\n            insert(mainAnchor, container, anchor);\r\n            const target = (n2.target = resolveTarget(n2.props, querySelector));\r\n            const targetAnchor = (n2.targetAnchor = createText(''));\r\n            if (target) {\r\n                insert(targetAnchor, target);\r\n                // #2652 we could be teleporting from a non-SVG tree into an SVG tree\r\n                isSVG = isSVG || isTargetSVG(target);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production') && !disabled) {\r\n                warn('Invalid Teleport target on mount:', target, `(${typeof target})`);\r\n            }\r\n            const mount = (container, anchor) => {\r\n                // Teleport *always* has Array children. This is enforced in both the\r\n                // compiler and vnode children normalization.\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            };\r\n            if (disabled) {\r\n                mount(container, mainAnchor);\r\n            }\r\n            else if (target) {\r\n                mount(target, targetAnchor);\r\n            }\r\n        }\r\n        else {\r\n            // update content\r\n            n2.el = n1.el;\r\n            const mainAnchor = (n2.anchor = n1.anchor);\r\n            const target = (n2.target = n1.target);\r\n            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);\r\n            const wasDisabled = isTeleportDisabled(n1.props);\r\n            const currentContainer = wasDisabled ? container : target;\r\n            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\r\n            isSVG = isSVG || isTargetSVG(target);\r\n            if (dynamicChildren) {\r\n                // fast path when the teleport happens to be a block root\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                // even in block tree mode we need to make sure all root-level nodes\r\n                // in the teleport inherit previous DOM references so that they can\r\n                // be moved in future patches.\r\n                traverseStaticChildren(n1, n2, true);\r\n            }\r\n            else if (!optimized) {\r\n                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);\r\n            }\r\n            if (disabled) {\r\n                if (!wasDisabled) {\r\n                    // enabled -> disabled\r\n                    // move into main container\r\n                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n            else {\r\n                // target changed\r\n                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\r\n                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));\r\n                    if (nextTarget) {\r\n                        moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Invalid Teleport target on update:', target, `(${typeof target})`);\r\n                    }\r\n                }\r\n                else if (wasDisabled) {\r\n                    // disabled -> enabled\r\n                    // move into teleport target\r\n                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {\r\n        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;\r\n        if (target) {\r\n            hostRemove(targetAnchor);\r\n        }\r\n        // an unmounted teleport should always remove its children if not disabled\r\n        if (doRemove || !isTeleportDisabled(props)) {\r\n            hostRemove(anchor);\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                for (let i = 0; i < children.length; i++) {\r\n                    const child = children[i];\r\n                    unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    move: moveTeleport,\r\n    hydrate: hydrateTeleport\r\n};\r\nfunction moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* REORDER */) {\r\n    // move target anchor if this is a target change.\r\n    if (moveType === 0 /* TARGET_CHANGE */) {\r\n        insert(vnode.targetAnchor, container, parentAnchor);\r\n    }\r\n    const { el, anchor, shapeFlag, children, props } = vnode;\r\n    const isReorder = moveType === 2 /* REORDER */;\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(el, container, parentAnchor);\r\n    }\r\n    // if this is a re-order and teleport is enabled (content is in target)\r\n    // do not move children. So the opposite is: only move children if this\r\n    // is not a reorder, or the teleport is disabled\r\n    if (!isReorder || isTeleportDisabled(props)) {\r\n        // Teleport has either Array children or no children.\r\n        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, parentAnchor, 2 /* REORDER */);\r\n            }\r\n        }\r\n    }\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(anchor, container, parentAnchor);\r\n    }\r\n}\r\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {\r\n    const target = (vnode.target = resolveTarget(vnode.props, querySelector));\r\n    if (target) {\r\n        // if multiple teleports rendered to the same target element, we need to\r\n        // pick up from where the last teleport finished instead of the first node\r\n        const targetNode = target._lpa || target.firstChild;\r\n        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            if (isTeleportDisabled(vnode.props)) {\r\n                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                vnode.targetAnchor = targetNode;\r\n            }\r\n            else {\r\n                vnode.anchor = nextSibling(node);\r\n                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            target._lpa =\r\n                vnode.targetAnchor && nextSibling(vnode.targetAnchor);\r\n        }\r\n    }\r\n    return vnode.anchor && nextSibling(vnode.anchor);\r\n}\r\n// Force-casted public typing for h and TSX props inference\r\nconst Teleport = TeleportImpl;\n\nconst COMPONENTS = 'components';\r\nconst DIRECTIVES = 'directives';\r\n/**\r\n * @private\r\n */\r\nfunction resolveComponent(name, maybeSelfReference) {\r\n    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;\r\n}\r\nconst NULL_DYNAMIC_COMPONENT = Symbol();\r\n/**\r\n * @private\r\n */\r\nfunction resolveDynamicComponent(component) {\r\n    if (isString(component)) {\r\n        return resolveAsset(COMPONENTS, component, false) || component;\r\n    }\r\n    else {\r\n        // invalid types will fallthrough to createVNode and raise warning\r\n        return (component || NULL_DYNAMIC_COMPONENT);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction resolveDirective(name) {\r\n    return resolveAsset(DIRECTIVES, name);\r\n}\r\n// implementation\r\nfunction resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {\r\n    const instance = currentRenderingInstance || currentInstance;\r\n    if (instance) {\r\n        const Component = instance.type;\r\n        // explicit self name has highest priority\r\n        if (type === COMPONENTS) {\r\n            const selfName = getComponentName(Component);\r\n            if (selfName &&\r\n                (selfName === name ||\r\n                    selfName === camelize(name) ||\r\n                    selfName === capitalize(camelize(name)))) {\r\n                return Component;\r\n            }\r\n        }\r\n        const res = \r\n        // local registration\r\n        // check instance[type] first which is resolved for options API\r\n        resolve(instance[type] || Component[type], name) ||\r\n            // global registration\r\n            resolve(instance.appContext[type], name);\r\n        if (!res && maybeSelfReference) {\r\n            // fallback to implicit self-reference\r\n            return Component;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && warnMissing && !res) {\r\n            const extra = type === COMPONENTS\r\n                ? `\\nIf this is a native custom element, make sure to exclude it from ` +\r\n                    `component resolution via compilerOptions.isCustomElement.`\r\n                : ``;\r\n            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);\r\n        }\r\n        return res;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`resolve${capitalize(type.slice(0, -1))} ` +\r\n            `can only be used in render() or setup().`);\r\n    }\r\n}\r\nfunction resolve(registry, name) {\r\n    return (registry &&\r\n        (registry[name] ||\r\n            registry[camelize(name)] ||\r\n            registry[capitalize(camelize(name))]));\r\n}\n\nconst Fragment = Symbol((process.env.NODE_ENV !== 'production') ? 'Fragment' : undefined);\r\nconst Text = Symbol((process.env.NODE_ENV !== 'production') ? 'Text' : undefined);\r\nconst Comment = Symbol((process.env.NODE_ENV !== 'production') ? 'Comment' : undefined);\r\nconst Static = Symbol((process.env.NODE_ENV !== 'production') ? 'Static' : undefined);\r\n// Since v-if and v-for are the two possible ways node structure can dynamically\r\n// change, once we consider v-if branches and each v-for fragment a block, we\r\n// can divide a template into nested blocks, and within each block the node\r\n// structure would be stable. This allows us to skip most children diffing\r\n// and only worry about the dynamic nodes (indicated by patch flags).\r\nconst blockStack = [];\r\nlet currentBlock = null;\r\n/**\r\n * Open a block.\r\n * This must be called before `createBlock`. It cannot be part of `createBlock`\r\n * because the children of the block are evaluated before `createBlock` itself\r\n * is called. The generated code typically looks like this:\r\n *\r\n * ```js\r\n * function render() {\r\n *   return (openBlock(),createBlock('div', null, [...]))\r\n * }\r\n * ```\r\n * disableTracking is true when creating a v-for fragment block, since a v-for\r\n * fragment always diffs its children.\r\n *\r\n * @private\r\n */\r\nfunction openBlock(disableTracking = false) {\r\n    blockStack.push((currentBlock = disableTracking ? null : []));\r\n}\r\nfunction closeBlock() {\r\n    blockStack.pop();\r\n    currentBlock = blockStack[blockStack.length - 1] || null;\r\n}\r\n// Whether we should be tracking dynamic child nodes inside a block.\r\n// Only tracks when this value is > 0\r\n// We are not using a simple boolean because this value may need to be\r\n// incremented/decremented by nested usage of v-once (see below)\r\nlet isBlockTreeEnabled = 1;\r\n/**\r\n * Block tracking sometimes needs to be disabled, for example during the\r\n * creation of a tree that needs to be cached by v-once. The compiler generates\r\n * code like this:\r\n *\r\n * ``` js\r\n * _cache[1] || (\r\n *   setBlockTracking(-1),\r\n *   _cache[1] = createVNode(...),\r\n *   setBlockTracking(1),\r\n *   _cache[1]\r\n * )\r\n * ```\r\n *\r\n * @private\r\n */\r\nfunction setBlockTracking(value) {\r\n    isBlockTreeEnabled += value;\r\n}\r\nfunction setupBlock(vnode) {\r\n    // save current block children on the block vnode\r\n    vnode.dynamicChildren =\r\n        isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;\r\n    // close block\r\n    closeBlock();\r\n    // a block is always going to be patched, so track it as a child of its\r\n    // parent block\r\n    if (isBlockTreeEnabled > 0 && currentBlock) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {\r\n    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true /* isBlock */));\r\n}\r\n/**\r\n * Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n * A block root keeps track of dynamic nodes within the block in the\r\n * `dynamicChildren` array.\r\n *\r\n * @private\r\n */\r\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\r\n    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */));\r\n}\r\nfunction isVNode(value) {\r\n    return value ? value.__v_isVNode === true : false;\r\n}\r\nfunction isSameVNodeType(n1, n2) {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        n2.shapeFlag & 6 /* COMPONENT */ &&\r\n        hmrDirtyComponents.has(n2.type)) {\r\n        // HMR only: if the component has been hot-updated, force a reload.\r\n        return false;\r\n    }\r\n    return n1.type === n2.type && n1.key === n2.key;\r\n}\r\nlet vnodeArgsTransformer;\r\n/**\r\n * Internal API for registering an arguments transform for createVNode\r\n * used for creating stubs in the test-utils\r\n * It is *internal* but needs to be exposed for test-utils to pick up proper\r\n * typings\r\n */\r\nfunction transformVNodeArgs(transformer) {\r\n    vnodeArgsTransformer = transformer;\r\n}\r\nconst createVNodeWithArgsTransform = (...args) => {\r\n    return _createVNode(...(vnodeArgsTransformer\r\n        ? vnodeArgsTransformer(args, currentRenderingInstance)\r\n        : args));\r\n};\r\nconst InternalObjectKey = `__vInternal`;\r\nconst normalizeKey = ({ key }) => key != null ? key : null;\r\nconst normalizeRef = ({ ref }) => {\r\n    return (ref != null\r\n        ? isString(ref) || isRef(ref) || isFunction$1(ref)\r\n            ? { i: currentRenderingInstance, r: ref }\r\n            : ref\r\n        : null);\r\n};\r\nfunction createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1 /* ELEMENT */, isBlockNode = false, needFullChildrenNormalization = false) {\r\n    const vnode = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type,\r\n        props,\r\n        key: props && normalizeKey(props),\r\n        ref: props && normalizeRef(props),\r\n        scopeId: currentScopeId,\r\n        slotScopeIds: null,\r\n        children,\r\n        component: null,\r\n        suspense: null,\r\n        ssContent: null,\r\n        ssFallback: null,\r\n        dirs: null,\r\n        transition: null,\r\n        el: null,\r\n        anchor: null,\r\n        target: null,\r\n        targetAnchor: null,\r\n        staticCount: 0,\r\n        shapeFlag,\r\n        patchFlag,\r\n        dynamicProps,\r\n        dynamicChildren: null,\r\n        appContext: null\r\n    };\r\n    if (needFullChildrenNormalization) {\r\n        normalizeChildren(vnode, children);\r\n        // normalize suspense children\r\n        if (shapeFlag & 128 /* SUSPENSE */) {\r\n            type.normalize(vnode);\r\n        }\r\n    }\r\n    else if (children) {\r\n        // compiled element vnode - if children is passed, only possible types are\r\n        // string or Array.\r\n        vnode.shapeFlag |= isString(children)\r\n            ? 8 /* TEXT_CHILDREN */\r\n            : 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    // validate key\r\n    if ((process.env.NODE_ENV !== 'production') && vnode.key !== vnode.key) {\r\n        warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);\r\n    }\r\n    // track vnode for block tree\r\n    if (isBlockTreeEnabled > 0 &&\r\n        // avoid a block node from tracking itself\r\n        !isBlockNode &&\r\n        // has current parent block\r\n        currentBlock &&\r\n        // presence of a patch flag indicates this node needs patching on updates.\r\n        // component nodes also should always be patched, because even if the\r\n        // component doesn't need to update, it needs to persist the instance on to\r\n        // the next vnode so that it can be properly unmounted later.\r\n        (vnode.patchFlag > 0 || shapeFlag & 6 /* COMPONENT */) &&\r\n        // the EVENTS flag is only for hydration and if it is the only flag, the\r\n        // vnode should not be considered dynamic due to handler caching.\r\n        vnode.patchFlag !== 32 /* HYDRATE_EVENTS */) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nconst createVNode = ((process.env.NODE_ENV !== 'production') ? createVNodeWithArgsTransform : _createVNode);\r\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\r\n    if (!type || type === NULL_DYNAMIC_COMPONENT) {\r\n        if ((process.env.NODE_ENV !== 'production') && !type) {\r\n            warn(`Invalid vnode type when creating vnode: ${type}.`);\r\n        }\r\n        type = Comment;\r\n    }\r\n    if (isVNode(type)) {\r\n        // createVNode receiving an existing vnode. This happens in cases like\r\n        // <component :is=\"vnode\"/>\r\n        // #2078 make sure to merge refs during the clone instead of overwriting it\r\n        const cloned = cloneVNode(type, props, true /* mergeRef: true */);\r\n        if (children) {\r\n            normalizeChildren(cloned, children);\r\n        }\r\n        return cloned;\r\n    }\r\n    // class component normalization.\r\n    if (isClassComponent(type)) {\r\n        type = type.__vccOpts;\r\n    }\r\n    // class & style normalization.\r\n    if (props) {\r\n        // for reactive or proxy objects, we need to clone it to enable mutation.\r\n        props = guardReactiveProps(props);\r\n        let { class: klass, style } = props;\r\n        if (klass && !isString(klass)) {\r\n            props.class = normalizeClass(klass);\r\n        }\r\n        if (isObject$1(style)) {\r\n            // reactive state objects need to be cloned since they are likely to be\r\n            // mutated\r\n            if (isProxy(style) && !isArray(style)) {\r\n                style = extend({}, style);\r\n            }\r\n            props.style = normalizeStyle(style);\r\n        }\r\n    }\r\n    // encode the vnode type information into a bitmap\r\n    const shapeFlag = isString(type)\r\n        ? 1 /* ELEMENT */\r\n        : isSuspense(type)\r\n            ? 128 /* SUSPENSE */\r\n            : isTeleport(type)\r\n                ? 64 /* TELEPORT */\r\n                : isObject$1(type)\r\n                    ? 4 /* STATEFUL_COMPONENT */\r\n                    : isFunction$1(type)\r\n                        ? 2 /* FUNCTIONAL_COMPONENT */\r\n                        : 0;\r\n    if ((process.env.NODE_ENV !== 'production') && shapeFlag & 4 /* STATEFUL_COMPONENT */ && isProxy(type)) {\r\n        type = toRaw(type);\r\n        warn(`Vue received a Component which was made a reactive object. This can ` +\r\n            `lead to unnecessary performance overhead, and should be avoided by ` +\r\n            `marking the component with \\`markRaw\\` or using \\`shallowRef\\` ` +\r\n            `instead of \\`ref\\`.`, `\\nComponent that was made reactive: `, type);\r\n    }\r\n    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);\r\n}\r\nfunction guardReactiveProps(props) {\r\n    if (!props)\r\n        return null;\r\n    return isProxy(props) || InternalObjectKey in props\r\n        ? extend({}, props)\r\n        : props;\r\n}\r\nfunction cloneVNode(vnode, extraProps, mergeRef = false) {\r\n    // This is intentionally NOT using spread or extend to avoid the runtime\r\n    // key enumeration cost.\r\n    const { props, ref, patchFlag, children } = vnode;\r\n    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;\r\n    const cloned = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type: vnode.type,\r\n        props: mergedProps,\r\n        key: mergedProps && normalizeKey(mergedProps),\r\n        ref: extraProps && extraProps.ref\r\n            ? // #2078 in the case of <component :is=\"vnode\" ref=\"extra\"/>\r\n                // if the vnode itself already has a ref, cloneVNode will need to merge\r\n                // the refs so the single vnode can be set on multiple refs\r\n                mergeRef && ref\r\n                    ? isArray(ref)\r\n                        ? ref.concat(normalizeRef(extraProps))\r\n                        : [ref, normalizeRef(extraProps)]\r\n                    : normalizeRef(extraProps)\r\n            : ref,\r\n        scopeId: vnode.scopeId,\r\n        slotScopeIds: vnode.slotScopeIds,\r\n        children: (process.env.NODE_ENV !== 'production') && patchFlag === -1 /* HOISTED */ && isArray(children)\r\n            ? children.map(deepCloneVNode)\r\n            : children,\r\n        target: vnode.target,\r\n        targetAnchor: vnode.targetAnchor,\r\n        staticCount: vnode.staticCount,\r\n        shapeFlag: vnode.shapeFlag,\r\n        // if the vnode is cloned with extra props, we can no longer assume its\r\n        // existing patch flag to be reliable and need to add the FULL_PROPS flag.\r\n        // note: perserve flag for fragments since they use the flag for children\r\n        // fast paths only.\r\n        patchFlag: extraProps && vnode.type !== Fragment\r\n            ? patchFlag === -1 // hoisted node\r\n                ? 16 /* FULL_PROPS */\r\n                : patchFlag | 16 /* FULL_PROPS */\r\n            : patchFlag,\r\n        dynamicProps: vnode.dynamicProps,\r\n        dynamicChildren: vnode.dynamicChildren,\r\n        appContext: vnode.appContext,\r\n        dirs: vnode.dirs,\r\n        transition: vnode.transition,\r\n        // These should technically only be non-null on mounted VNodes. However,\r\n        // they *should* be copied for kept-alive vnodes. So we just always copy\r\n        // them since them being non-null during a mount doesn't affect the logic as\r\n        // they will simply be overwritten.\r\n        component: vnode.component,\r\n        suspense: vnode.suspense,\r\n        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),\r\n        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),\r\n        el: vnode.el,\r\n        anchor: vnode.anchor\r\n    };\r\n    return cloned;\r\n}\r\n/**\r\n * Dev only, for HMR of hoisted vnodes reused in v-for\r\n * https://github.com/vitejs/vite/issues/2022\r\n */\r\nfunction deepCloneVNode(vnode) {\r\n    const cloned = cloneVNode(vnode);\r\n    if (isArray(vnode.children)) {\r\n        cloned.children = vnode.children.map(deepCloneVNode);\r\n    }\r\n    return cloned;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createTextVNode(text = ' ', flag = 0) {\r\n    return createVNode(Text, null, text, flag);\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createStaticVNode(content, numberOfNodes) {\r\n    // A static vnode can contain multiple stringified elements, and the number\r\n    // of elements is necessary for hydration.\r\n    const vnode = createVNode(Static, null, content);\r\n    vnode.staticCount = numberOfNodes;\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createCommentVNode(text = '', \r\n// when used as the v-else branch, the comment node must be created as a\r\n// block to ensure correct updates.\r\nasBlock = false) {\r\n    return asBlock\r\n        ? (openBlock(), createBlock(Comment, null, text))\r\n        : createVNode(Comment, null, text);\r\n}\r\nfunction normalizeVNode(child) {\r\n    if (child == null || typeof child === 'boolean') {\r\n        // empty placeholder\r\n        return createVNode(Comment);\r\n    }\r\n    else if (isArray(child)) {\r\n        // fragment\r\n        return createVNode(Fragment, null, \r\n        // #3666, avoid reference pollution when reusing vnode\r\n        child.slice());\r\n    }\r\n    else if (typeof child === 'object') {\r\n        // already vnode, this should be the most common since compiled templates\r\n        // always produce all-vnode children arrays\r\n        return cloneIfMounted(child);\r\n    }\r\n    else {\r\n        // strings and numbers\r\n        return createVNode(Text, null, String(child));\r\n    }\r\n}\r\n// optimized normalization for template-compiled render fns\r\nfunction cloneIfMounted(child) {\r\n    return child.el === null || child.memo ? child : cloneVNode(child);\r\n}\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0;\r\n    const { shapeFlag } = vnode;\r\n    if (children == null) {\r\n        children = null;\r\n    }\r\n    else if (isArray(children)) {\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else if (typeof children === 'object') {\r\n        if (shapeFlag & (1 /* ELEMENT */ | 64 /* TELEPORT */)) {\r\n            // Normalize slot to plain children for plain element and Teleport\r\n            const slot = children.default;\r\n            if (slot) {\r\n                // _c marker is added by withCtx() indicating this is a compiled slot\r\n                slot._c && (slot._d = false);\r\n                normalizeChildren(vnode, slot());\r\n                slot._c && (slot._d = true);\r\n            }\r\n            return;\r\n        }\r\n        else {\r\n            type = 32 /* SLOTS_CHILDREN */;\r\n            const slotFlag = children._;\r\n            if (!slotFlag && !(InternalObjectKey in children)) {\r\n                children._ctx = currentRenderingInstance;\r\n            }\r\n            else if (slotFlag === 3 /* FORWARDED */ && currentRenderingInstance) {\r\n                // a child component receives forwarded slots from the parent.\r\n                // its slot type is determined by its parent's slot type.\r\n                if (currentRenderingInstance.slots._ === 1 /* STABLE */) {\r\n                    children._ = 1 /* STABLE */;\r\n                }\r\n                else {\r\n                    children._ = 2 /* DYNAMIC */;\r\n                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (isFunction$1(children)) {\r\n        children = { default: children, _ctx: currentRenderingInstance };\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else {\r\n        children = String(children);\r\n        // force teleport children to array so it can be moved around\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type = 16 /* ARRAY_CHILDREN */;\r\n            children = [createTextVNode(children)];\r\n        }\r\n        else {\r\n            type = 8 /* TEXT_CHILDREN */;\r\n        }\r\n    }\r\n    vnode.children = children;\r\n    vnode.shapeFlag |= type;\r\n}\r\nfunction mergeProps(...args) {\r\n    const ret = {};\r\n    for (let i = 0; i < args.length; i++) {\r\n        const toMerge = args[i];\r\n        for (const key in toMerge) {\r\n            if (key === 'class') {\r\n                if (ret.class !== toMerge.class) {\r\n                    ret.class = normalizeClass([ret.class, toMerge.class]);\r\n                }\r\n            }\r\n            else if (key === 'style') {\r\n                ret.style = normalizeStyle([ret.style, toMerge.style]);\r\n            }\r\n            else if (isOn(key)) {\r\n                const existing = ret[key];\r\n                const incoming = toMerge[key];\r\n                if (existing !== incoming) {\r\n                    ret[key] = existing\r\n                        ? [].concat(existing, incoming)\r\n                        : incoming;\r\n                }\r\n            }\r\n            else if (key !== '') {\r\n                ret[key] = toMerge[key];\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Actual implementation\r\n */\r\nfunction renderList(source, renderItem, cache, index) {\r\n    let ret;\r\n    const cached = (cache && cache[index]);\r\n    if (isArray(source) || isString(source)) {\r\n        ret = new Array(source.length);\r\n        for (let i = 0, l = source.length; i < l; i++) {\r\n            ret[i] = renderItem(source[i], i, undefined, cached && cached[i]);\r\n        }\r\n    }\r\n    else if (typeof source === 'number') {\r\n        if ((process.env.NODE_ENV !== 'production') && !Number.isInteger(source)) {\r\n            warn(`The v-for range expect an integer value but got ${source}.`);\r\n            return [];\r\n        }\r\n        ret = new Array(source);\r\n        for (let i = 0; i < source; i++) {\r\n            ret[i] = renderItem(i + 1, i, undefined, cached && cached[i]);\r\n        }\r\n    }\r\n    else if (isObject$1(source)) {\r\n        if (source[Symbol.iterator]) {\r\n            ret = Array.from(source, (item, i) => renderItem(item, i, undefined, cached && cached[i]));\r\n        }\r\n        else {\r\n            const keys = Object.keys(source);\r\n            ret = new Array(keys.length);\r\n            for (let i = 0, l = keys.length; i < l; i++) {\r\n                const key = keys[i];\r\n                ret[i] = renderItem(source[key], key, i, cached && cached[i]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ret = [];\r\n    }\r\n    if (cache) {\r\n        cache[index] = ret;\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Compiler runtime helper for creating dynamic slots object\r\n * @private\r\n */\r\nfunction createSlots(slots, dynamicSlots) {\r\n    for (let i = 0; i < dynamicSlots.length; i++) {\r\n        const slot = dynamicSlots[i];\r\n        // array of dynamic slot generated by <template v-for=\"...\" #[...]>\r\n        if (isArray(slot)) {\r\n            for (let j = 0; j < slot.length; j++) {\r\n                slots[slot[j].name] = slot[j].fn;\r\n            }\r\n        }\r\n        else if (slot) {\r\n            // conditional single slot generated by <template v-if=\"...\" #foo>\r\n            slots[slot.name] = slot.fn;\r\n        }\r\n    }\r\n    return slots;\r\n}\n\n/**\r\n * Compiler runtime helper for rendering `<slot/>`\r\n * @private\r\n */\r\nfunction renderSlot(slots, name, props = {}, \r\n// this is not a user-facing function, so the fallback is always generated by\r\n// the compiler and guaranteed to be a function returning an array\r\nfallback, noSlotted) {\r\n    if (currentRenderingInstance.isCE) {\r\n        return createVNode('slot', name === 'default' ? null : { name }, fallback && fallback());\r\n    }\r\n    let slot = slots[name];\r\n    if ((process.env.NODE_ENV !== 'production') && slot && slot.length > 1) {\r\n        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` +\r\n            `function. You need to mark this component with $dynamic-slots in the ` +\r\n            `parent template.`);\r\n        slot = () => [];\r\n    }\r\n    // a compiled slot disables block tracking by default to avoid manual\r\n    // invocation interfering with template-based block tracking, but in\r\n    // `renderSlot` we can be sure that it's template-based so we can force\r\n    // enable it.\r\n    if (slot && slot._c) {\r\n        slot._d = false;\r\n    }\r\n    openBlock();\r\n    const validSlotContent = slot && ensureValidVNode(slot(props));\r\n    const rendered = createBlock(Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */\r\n        ? 64 /* STABLE_FRAGMENT */\r\n        : -2 /* BAIL */);\r\n    if (!noSlotted && rendered.scopeId) {\r\n        rendered.slotScopeIds = [rendered.scopeId + '-s'];\r\n    }\r\n    if (slot && slot._c) {\r\n        slot._d = true;\r\n    }\r\n    return rendered;\r\n}\r\nfunction ensureValidVNode(vnodes) {\r\n    return vnodes.some(child => {\r\n        if (!isVNode(child))\r\n            return true;\r\n        if (child.type === Comment)\r\n            return false;\r\n        if (child.type === Fragment &&\r\n            !ensureValidVNode(child.children))\r\n            return false;\r\n        return true;\r\n    })\r\n        ? vnodes\r\n        : null;\r\n}\n\n/**\r\n * For prefixing keys in v-on=\"obj\" with \"on\"\r\n * @private\r\n */\r\nfunction toHandlers(obj) {\r\n    const ret = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isObject$1(obj)) {\r\n        warn(`v-on with no argument expects an object value.`);\r\n        return ret;\r\n    }\r\n    for (const key in obj) {\r\n        ret[toHandlerKey(key)] = obj[key];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * #2437 In Vue 3, functional components do not have a public instance proxy but\r\n * they exist in the internal parent chain. For code that relies on traversing\r\n * public $parent chains, skip functional ones and go to the parent instead.\r\n */\r\nconst getPublicInstance = (i) => {\r\n    if (!i)\r\n        return null;\r\n    if (isStatefulComponent(i))\r\n        return getExposeProxy(i) || i.proxy;\r\n    return getPublicInstance(i.parent);\r\n};\r\nconst publicPropertiesMap = extend(Object.create(null), {\r\n    $: i => i,\r\n    $el: i => i.vnode.el,\r\n    $data: i => i.data,\r\n    $props: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.props) : i.props),\r\n    $attrs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.attrs) : i.attrs),\r\n    $slots: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.slots) : i.slots),\r\n    $refs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.refs) : i.refs),\r\n    $parent: i => getPublicInstance(i.parent),\r\n    $root: i => getPublicInstance(i.root),\r\n    $emit: i => i.emit,\r\n    $options: i => (__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type),\r\n    $forceUpdate: i => () => queueJob(i.update),\r\n    $nextTick: i => nextTick.bind(i.proxy),\r\n    $watch: i => (__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP)\r\n});\r\nconst PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;\r\n        // for internal formatters to know that this is a Vue instance\r\n        if ((process.env.NODE_ENV !== 'production') && key === '__isVue') {\r\n            return true;\r\n        }\r\n        // prioritize <script setup> bindings during dev.\r\n        // this allows even properties that start with _ or $ to be used - so that\r\n        // it aligns with the production behavior where the render fn is inlined and\r\n        // indeed has access to all declared variables.\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            setupState !== EMPTY_OBJ &&\r\n            setupState.__isScriptSetup &&\r\n            hasOwn(setupState, key)) {\r\n            return setupState[key];\r\n        }\r\n        // data / props / ctx\r\n        // This getter gets called for every property access on the render context\r\n        // during render and is a major hotspot. The most expensive part of this\r\n        // is the multiple hasOwn() calls. It's much faster to do a simple property\r\n        // access on a plain object, so we use an accessCache object (with null\r\n        // prototype) to memoize what access type a key corresponds to.\r\n        let normalizedProps;\r\n        if (key[0] !== '$') {\r\n            const n = accessCache[key];\r\n            if (n !== undefined) {\r\n                switch (n) {\r\n                    case 0 /* SETUP */:\r\n                        return setupState[key];\r\n                    case 1 /* DATA */:\r\n                        return data[key];\r\n                    case 3 /* CONTEXT */:\r\n                        return ctx[key];\r\n                    case 2 /* PROPS */:\r\n                        return props[key];\r\n                    // default: just fallthrough\r\n                }\r\n            }\r\n            else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n                accessCache[key] = 0 /* SETUP */;\r\n                return setupState[key];\r\n            }\r\n            else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n                accessCache[key] = 1 /* DATA */;\r\n                return data[key];\r\n            }\r\n            else if (\r\n            // only cache other properties when instance has declared (thus stable)\r\n            // props\r\n            (normalizedProps = instance.propsOptions[0]) &&\r\n                hasOwn(normalizedProps, key)) {\r\n                accessCache[key] = 2 /* PROPS */;\r\n                return props[key];\r\n            }\r\n            else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n                accessCache[key] = 3 /* CONTEXT */;\r\n                return ctx[key];\r\n            }\r\n            else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {\r\n                accessCache[key] = 4 /* OTHER */;\r\n            }\r\n        }\r\n        const publicGetter = publicPropertiesMap[key];\r\n        let cssModule, globalProperties;\r\n        // public $xxx properties\r\n        if (publicGetter) {\r\n            if (key === '$attrs') {\r\n                track(instance, \"get\" /* GET */, key);\r\n                (process.env.NODE_ENV !== 'production') && markAttrsAccessed();\r\n            }\r\n            return publicGetter(instance);\r\n        }\r\n        else if (\r\n        // css module (injected by vue-loader)\r\n        (cssModule = type.__cssModules) &&\r\n            (cssModule = cssModule[key])) {\r\n            return cssModule;\r\n        }\r\n        else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n            // user may set custom properties to `this` that start with `$`\r\n            accessCache[key] = 3 /* CONTEXT */;\r\n            return ctx[key];\r\n        }\r\n        else if (\r\n        // global properties\r\n        ((globalProperties = appContext.config.globalProperties),\r\n            hasOwn(globalProperties, key))) {\r\n            {\r\n                return globalProperties[key];\r\n            }\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production') &&\r\n            currentRenderingInstance &&\r\n            (!isString(key) ||\r\n                // #1091 avoid internal isRef/isVNode checks on component instance leading\r\n                // to infinite warning loop\r\n                key.indexOf('__v') !== 0)) {\r\n            if (data !== EMPTY_OBJ &&\r\n                (key[0] === '$' || key[0] === '_') &&\r\n                hasOwn(data, key)) {\r\n                warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` +\r\n                    `character (\"$\" or \"_\") and is not proxied on the render context.`);\r\n            }\r\n            else if (instance === currentRenderingInstance) {\r\n                warn(`Property ${JSON.stringify(key)} was accessed during render ` +\r\n                    `but is not defined on instance.`);\r\n            }\r\n        }\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { data, setupState, ctx } = instance;\r\n        if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n            setupState[key] = value;\r\n        }\r\n        else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        else if (hasOwn(instance.props, key)) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate prop \"${key}\". Props are readonly.`, instance);\r\n            return false;\r\n        }\r\n        if (key[0] === '$' && key.slice(1) in instance) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate public property \"${key}\". ` +\r\n                    `Properties starting with $ are reserved and readonly.`, instance);\r\n            return false;\r\n        }\r\n        else {\r\n            if ((process.env.NODE_ENV !== 'production') && key in instance.appContext.config.globalProperties) {\r\n                Object.defineProperty(ctx, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    value\r\n                });\r\n            }\r\n            else {\r\n                ctx[key] = value;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {\r\n        let normalizedProps;\r\n        return (accessCache[key] !== undefined ||\r\n            (data !== EMPTY_OBJ && hasOwn(data, key)) ||\r\n            (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) ||\r\n            ((normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key)) ||\r\n            hasOwn(ctx, key) ||\r\n            hasOwn(publicPropertiesMap, key) ||\r\n            hasOwn(appContext.config.globalProperties, key));\r\n    }\r\n};\r\nif ((process.env.NODE_ENV !== 'production') && !false) {\r\n    PublicInstanceProxyHandlers.ownKeys = (target) => {\r\n        warn(`Avoid app logic that relies on enumerating keys on a component instance. ` +\r\n            `The keys will be empty in production mode to avoid performance overhead.`);\r\n        return Reflect.ownKeys(target);\r\n    };\r\n}\r\nconst RuntimeCompiledPublicInstanceProxyHandlers = /*#__PURE__*/ extend({}, PublicInstanceProxyHandlers, {\r\n    get(target, key) {\r\n        // fast path for unscopables when using `with` block\r\n        if (key === Symbol.unscopables) {\r\n            return;\r\n        }\r\n        return PublicInstanceProxyHandlers.get(target, key, target);\r\n    },\r\n    has(_, key) {\r\n        const has = key[0] !== '_' && !isGloballyWhitelisted(key);\r\n        if ((process.env.NODE_ENV !== 'production') && !has && PublicInstanceProxyHandlers.has(_, key)) {\r\n            warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);\r\n        }\r\n        return has;\r\n    }\r\n});\r\n// dev only\r\n// In dev mode, the proxy target exposes the same properties as seen on `this`\r\n// for easier console inspection. In prod mode it will be an empty object so\r\n// these properties definitions can be skipped.\r\nfunction createDevRenderContext(instance) {\r\n    const target = {};\r\n    // expose internal instance for proxy handlers\r\n    Object.defineProperty(target, `_`, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        get: () => instance\r\n    });\r\n    // expose public properties\r\n    Object.keys(publicPropertiesMap).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => publicPropertiesMap[key](instance),\r\n            // intercepted by the proxy so no need for implementation,\r\n            // but needed to prevent set errors\r\n            set: NOOP\r\n        });\r\n    });\r\n    return target;\r\n}\r\n// dev only\r\nfunction exposePropsOnRenderContext(instance) {\r\n    const { ctx, propsOptions: [propsOptions] } = instance;\r\n    if (propsOptions) {\r\n        Object.keys(propsOptions).forEach(key => {\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => instance.props[key],\r\n                set: NOOP\r\n            });\r\n        });\r\n    }\r\n}\r\n// dev only\r\nfunction exposeSetupStateOnRenderContext(instance) {\r\n    const { ctx, setupState } = instance;\r\n    Object.keys(toRaw(setupState)).forEach(key => {\r\n        if (!setupState.__isScriptSetup) {\r\n            if (key[0] === '$' || key[0] === '_') {\r\n                warn(`setup() return property ${JSON.stringify(key)} should not start with \"$\" or \"_\" ` +\r\n                    `which are reserved prefixes for Vue internals.`);\r\n                return;\r\n            }\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => setupState[key],\r\n                set: NOOP\r\n            });\r\n        }\r\n    });\r\n}\n\nconst emptyAppContext = createAppContext();\r\nlet uid$1 = 0;\r\nfunction createComponentInstance(vnode, parent, suspense) {\r\n    const type = vnode.type;\r\n    // inherit parent app context - or - if root, adopt from root vnode\r\n    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\r\n    const instance = {\r\n        uid: uid$1++,\r\n        vnode,\r\n        type,\r\n        parent,\r\n        appContext,\r\n        root: null,\r\n        next: null,\r\n        subTree: null,\r\n        update: null,\r\n        scope: new EffectScope(true /* detached */),\r\n        render: null,\r\n        proxy: null,\r\n        exposed: null,\r\n        exposeProxy: null,\r\n        withProxy: null,\r\n        provides: parent ? parent.provides : Object.create(appContext.provides),\r\n        accessCache: null,\r\n        renderCache: [],\r\n        // local resovled assets\r\n        components: null,\r\n        directives: null,\r\n        // resolved props and emits options\r\n        propsOptions: normalizePropsOptions(type, appContext),\r\n        emitsOptions: normalizeEmitsOptions(type, appContext),\r\n        // emit\r\n        emit: null,\r\n        emitted: null,\r\n        // props default value\r\n        propsDefaults: EMPTY_OBJ,\r\n        // inheritAttrs\r\n        inheritAttrs: type.inheritAttrs,\r\n        // state\r\n        ctx: EMPTY_OBJ,\r\n        data: EMPTY_OBJ,\r\n        props: EMPTY_OBJ,\r\n        attrs: EMPTY_OBJ,\r\n        slots: EMPTY_OBJ,\r\n        refs: EMPTY_OBJ,\r\n        setupState: EMPTY_OBJ,\r\n        setupContext: null,\r\n        // suspense related\r\n        suspense,\r\n        suspenseId: suspense ? suspense.pendingId : 0,\r\n        asyncDep: null,\r\n        asyncResolved: false,\r\n        // lifecycle hooks\r\n        // not using enums here because it results in computed properties\r\n        isMounted: false,\r\n        isUnmounted: false,\r\n        isDeactivated: false,\r\n        bc: null,\r\n        c: null,\r\n        bm: null,\r\n        m: null,\r\n        bu: null,\r\n        u: null,\r\n        um: null,\r\n        bum: null,\r\n        da: null,\r\n        a: null,\r\n        rtg: null,\r\n        rtc: null,\r\n        ec: null,\r\n        sp: null\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        instance.ctx = createDevRenderContext(instance);\r\n    }\r\n    else {\r\n        instance.ctx = { _: instance };\r\n    }\r\n    instance.root = parent ? parent.root : instance;\r\n    instance.emit = emit$1.bind(null, instance);\r\n    // apply custom element special handling\r\n    if (vnode.ce) {\r\n        vnode.ce(instance);\r\n    }\r\n    return instance;\r\n}\r\nlet currentInstance = null;\r\nconst getCurrentInstance = () => currentInstance || currentRenderingInstance;\r\nconst setCurrentInstance = (instance) => {\r\n    currentInstance = instance;\r\n    instance.scope.on();\r\n};\r\nconst unsetCurrentInstance = () => {\r\n    currentInstance && currentInstance.scope.off();\r\n    currentInstance = null;\r\n};\r\nconst isBuiltInTag = /*#__PURE__*/ makeMap('slot,component');\r\nfunction validateComponentName(name, config) {\r\n    const appIsNativeTag = config.isNativeTag || NO;\r\n    if (isBuiltInTag(name) || appIsNativeTag(name)) {\r\n        warn('Do not use built-in or reserved HTML elements as component id: ' + name);\r\n    }\r\n}\r\nfunction isStatefulComponent(instance) {\r\n    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */;\r\n}\r\nlet isInSSRComponentSetup = false;\r\nfunction setupComponent(instance, isSSR = false) {\r\n    isInSSRComponentSetup = isSSR;\r\n    const { props, children } = instance.vnode;\r\n    const isStateful = isStatefulComponent(instance);\r\n    initProps(instance, props, isStateful, isSSR);\r\n    initSlots(instance, children);\r\n    const setupResult = isStateful\r\n        ? setupStatefulComponent(instance, isSSR)\r\n        : undefined;\r\n    isInSSRComponentSetup = false;\r\n    return setupResult;\r\n}\r\nfunction setupStatefulComponent(instance, isSSR) {\r\n    const Component = instance.type;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        if (Component.name) {\r\n            validateComponentName(Component.name, instance.appContext.config);\r\n        }\r\n        if (Component.components) {\r\n            const names = Object.keys(Component.components);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateComponentName(names[i], instance.appContext.config);\r\n            }\r\n        }\r\n        if (Component.directives) {\r\n            const names = Object.keys(Component.directives);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateDirectiveName(names[i]);\r\n            }\r\n        }\r\n        if (Component.compilerOptions && isRuntimeOnly()) {\r\n            warn(`\"compilerOptions\" is only supported when using a build of Vue that ` +\r\n                `includes the runtime compiler. Since you are using a runtime-only ` +\r\n                `build, the options should be passed via your build tool config instead.`);\r\n        }\r\n    }\r\n    // 0. create render proxy property access cache\r\n    instance.accessCache = Object.create(null);\r\n    // 1. create public instance / render proxy\r\n    // also mark it raw so it's never observed\r\n    instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        exposePropsOnRenderContext(instance);\r\n    }\r\n    // 2. call setup()\r\n    const { setup } = Component;\r\n    if (setup) {\r\n        const setupContext = (instance.setupContext =\r\n            setup.length > 1 ? createSetupContext(instance) : null);\r\n        setCurrentInstance(instance);\r\n        pauseTracking();\r\n        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [(process.env.NODE_ENV !== 'production') ? shallowReadonly(instance.props) : instance.props, setupContext]);\r\n        resetTracking();\r\n        unsetCurrentInstance();\r\n        if (isPromise$1(setupResult)) {\r\n            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);\r\n            if (isSSR) {\r\n                // return the promise so server-renderer can wait on it\r\n                return setupResult\r\n                    .then((resolvedResult) => {\r\n                    handleSetupResult(instance, resolvedResult, isSSR);\r\n                })\r\n                    .catch(e => {\r\n                    handleError(e, instance, 0 /* SETUP_FUNCTION */);\r\n                });\r\n            }\r\n            else {\r\n                // async setup returned Promise.\r\n                // bail here and wait for re-entry.\r\n                instance.asyncDep = setupResult;\r\n            }\r\n        }\r\n        else {\r\n            handleSetupResult(instance, setupResult, isSSR);\r\n        }\r\n    }\r\n    else {\r\n        finishComponentSetup(instance, isSSR);\r\n    }\r\n}\r\nfunction handleSetupResult(instance, setupResult, isSSR) {\r\n    if (isFunction$1(setupResult)) {\r\n        // setup returned an inline render function\r\n        {\r\n            instance.render = setupResult;\r\n        }\r\n    }\r\n    else if (isObject$1(setupResult)) {\r\n        if ((process.env.NODE_ENV !== 'production') && isVNode(setupResult)) {\r\n            warn(`setup() should not return VNodes directly - ` +\r\n                `return a render function instead.`);\r\n        }\r\n        // setup returned bindings.\r\n        // assuming a render function compiled from template is present.\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.devtoolsRawSetupState = setupResult;\r\n        }\r\n        instance.setupState = proxyRefs(setupResult);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            exposeSetupStateOnRenderContext(instance);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production') && setupResult !== undefined) {\r\n        warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);\r\n    }\r\n    finishComponentSetup(instance, isSSR);\r\n}\r\nlet compile;\r\nlet installWithProxy;\r\n/**\r\n * For runtime-dom to register the compiler.\r\n * Note the exported method uses any to avoid d.ts relying on the compiler types.\r\n */\r\nfunction registerRuntimeCompiler(_compile) {\r\n    compile = _compile;\r\n    installWithProxy = i => {\r\n        if (i.render._rc) {\r\n            i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\r\n        }\r\n    };\r\n}\r\n// dev only\r\nconst isRuntimeOnly = () => !compile;\r\nfunction finishComponentSetup(instance, isSSR, skipOptions) {\r\n    const Component = instance.type;\r\n    // template / render function normalization\r\n    if (!instance.render) {\r\n        // could be set from setup()\r\n        if (compile && !Component.render) {\r\n            const template = Component.template;\r\n            if (template) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `compile`);\r\n                }\r\n                const { isCustomElement, compilerOptions } = instance.appContext.config;\r\n                const { delimiters, compilerOptions: componentCompilerOptions } = Component;\r\n                const finalCompilerOptions = extend(extend({\r\n                    isCustomElement,\r\n                    delimiters\r\n                }, compilerOptions), componentCompilerOptions);\r\n                Component.render = compile(template, finalCompilerOptions);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `compile`);\r\n                }\r\n            }\r\n        }\r\n        instance.render = (Component.render || NOOP);\r\n        // for runtime-compiled render functions using `with` blocks, the render\r\n        // proxy used needs a different `has` handler which is more performant and\r\n        // also only allows a whitelist of globals to fallthrough.\r\n        if (installWithProxy) {\r\n            installWithProxy(instance);\r\n        }\r\n    }\r\n    // support for 2.x options\r\n    if (__VUE_OPTIONS_API__ && !(false )) {\r\n        setCurrentInstance(instance);\r\n        pauseTracking();\r\n        applyOptions(instance);\r\n        resetTracking();\r\n        unsetCurrentInstance();\r\n    }\r\n    // warn missing template/render\r\n    // the runtime compilation of template in SSR is done by server-render\r\n    if ((process.env.NODE_ENV !== 'production') && !Component.render && instance.render === NOOP && !isSSR) {\r\n        /* istanbul ignore if */\r\n        if (!compile && Component.template) {\r\n            warn(`Component provided template option but ` +\r\n                `runtime compilation is not supported in this build of Vue.` +\r\n                (` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`\r\n                    ) /* should not happen */);\r\n        }\r\n        else {\r\n            warn(`Component is missing template or render function.`);\r\n        }\r\n    }\r\n}\r\nfunction createAttrsProxy(instance) {\r\n    return new Proxy(instance.attrs, (process.env.NODE_ENV !== 'production')\r\n        ? {\r\n            get(target, key) {\r\n                markAttrsAccessed();\r\n                track(instance, \"get\" /* GET */, '$attrs');\r\n                return target[key];\r\n            },\r\n            set() {\r\n                warn(`setupContext.attrs is readonly.`);\r\n                return false;\r\n            },\r\n            deleteProperty() {\r\n                warn(`setupContext.attrs is readonly.`);\r\n                return false;\r\n            }\r\n        }\r\n        : {\r\n            get(target, key) {\r\n                track(instance, \"get\" /* GET */, '$attrs');\r\n                return target[key];\r\n            }\r\n        });\r\n}\r\nfunction createSetupContext(instance) {\r\n    const expose = exposed => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.exposed) {\r\n            warn(`expose() should be called only once per setup().`);\r\n        }\r\n        instance.exposed = exposed || {};\r\n    };\r\n    let attrs;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        // We use getters in dev in case libs like test-utils overwrite instance\r\n        // properties (overwrites should not be done in prod)\r\n        return Object.freeze({\r\n            get attrs() {\r\n                return attrs || (attrs = createAttrsProxy(instance));\r\n            },\r\n            get slots() {\r\n                return shallowReadonly(instance.slots);\r\n            },\r\n            get emit() {\r\n                return (event, ...args) => instance.emit(event, ...args);\r\n            },\r\n            expose\r\n        });\r\n    }\r\n    else {\r\n        return {\r\n            get attrs() {\r\n                return attrs || (attrs = createAttrsProxy(instance));\r\n            },\r\n            slots: instance.slots,\r\n            emit: instance.emit,\r\n            expose\r\n        };\r\n    }\r\n}\r\nfunction getExposeProxy(instance) {\r\n    if (instance.exposed) {\r\n        return (instance.exposeProxy ||\r\n            (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {\r\n                get(target, key) {\r\n                    if (key in target) {\r\n                        return target[key];\r\n                    }\r\n                    else if (key in publicPropertiesMap) {\r\n                        return publicPropertiesMap[key](instance);\r\n                    }\r\n                }\r\n            })));\r\n    }\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\r\nfunction getComponentName(Component) {\r\n    return isFunction$1(Component)\r\n        ? Component.displayName || Component.name\r\n        : Component.name;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatComponentName(instance, Component, isRoot = false) {\r\n    let name = getComponentName(Component);\r\n    if (!name && Component.__file) {\r\n        const match = Component.__file.match(/([^/\\\\]+)\\.\\w+$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    if (!name && instance && instance.parent) {\r\n        // try to infer the name based on reverse resolution\r\n        const inferFromRegistry = (registry) => {\r\n            for (const key in registry) {\r\n                if (registry[key] === Component) {\r\n                    return key;\r\n                }\r\n            }\r\n        };\r\n        name =\r\n            inferFromRegistry(instance.components ||\r\n                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\r\n    }\r\n    return name ? classify(name) : isRoot ? `App` : `Anonymous`;\r\n}\r\nfunction isClassComponent(value) {\r\n    return isFunction$1(value) && '__vccOpts' in value;\r\n}\n\nconst stack = [];\r\nfunction pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nfunction popWarningContext() {\r\n    stack.pop();\r\n}\r\nfunction warn(msg, ...args) {\r\n    // avoid props formatting or warn handler tracking deps that might be mutated\r\n    // during patch, leading to infinite recursion.\r\n    pauseTracking();\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */, [\r\n            msg + args.join(''),\r\n            instance && instance.proxy,\r\n            trace\r\n                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)\r\n                .join('\\n'),\r\n            trace\r\n        ]);\r\n    }\r\n    else {\r\n        const warnArgs = [`[Vue warn]: ${msg}`, ...args];\r\n        /* istanbul ignore if */\r\n        if (trace.length &&\r\n            // avoid spamming console during tests\r\n            !false) {\r\n            warnArgs.push(`\\n`, ...formatTrace(trace));\r\n        }\r\n        console.warn(...warnArgs);\r\n    }\r\n    resetTracking();\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can't just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component && currentVNode.component.parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        logs.push(...(i === 0 ? [] : [`\\n`]), ...formatTraceEntry(entry));\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }) {\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const isRoot = vnode.component ? vnode.component.parent == null : false;\r\n    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\r\n    const close = `>` + postfix;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close]\r\n        : [open + close];\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    const keys = Object.keys(props);\r\n    keys.slice(0, 3).forEach(key => {\r\n        res.push(...formatProp(key, props[key]));\r\n    });\r\n    if (keys.length > 3) {\r\n        res.push(` ...`);\r\n    }\r\n    return res;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProp(key, value, raw) {\r\n    if (isString(value)) {\r\n        value = JSON.stringify(value);\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (typeof value === 'number' ||\r\n        typeof value === 'boolean' ||\r\n        value == null) {\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (isRef(value)) {\r\n        value = formatProp(key, toRaw(value.value), true);\r\n        return raw ? value : [`${key}=Ref<`, value, `>`];\r\n    }\r\n    else if (isFunction$1(value)) {\r\n        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\r\n    }\r\n    else {\r\n        value = toRaw(value);\r\n        return raw ? value : [`${key}=`, value];\r\n    }\r\n}\n\nconst ErrorTypeStrings = {\r\n    [\"sp\" /* SERVER_PREFETCH */]: 'serverPrefetch hook',\r\n    [\"bc\" /* BEFORE_CREATE */]: 'beforeCreate hook',\r\n    [\"c\" /* CREATED */]: 'created hook',\r\n    [\"bm\" /* BEFORE_MOUNT */]: 'beforeMount hook',\r\n    [\"m\" /* MOUNTED */]: 'mounted hook',\r\n    [\"bu\" /* BEFORE_UPDATE */]: 'beforeUpdate hook',\r\n    [\"u\" /* UPDATED */]: 'updated',\r\n    [\"bum\" /* BEFORE_UNMOUNT */]: 'beforeUnmount hook',\r\n    [\"um\" /* UNMOUNTED */]: 'unmounted hook',\r\n    [\"a\" /* ACTIVATED */]: 'activated hook',\r\n    [\"da\" /* DEACTIVATED */]: 'deactivated hook',\r\n    [\"ec\" /* ERROR_CAPTURED */]: 'errorCaptured hook',\r\n    [\"rtc\" /* RENDER_TRACKED */]: 'renderTracked hook',\r\n    [\"rtg\" /* RENDER_TRIGGERED */]: 'renderTriggered hook',\r\n    [0 /* SETUP_FUNCTION */]: 'setup function',\r\n    [1 /* RENDER_FUNCTION */]: 'render function',\r\n    [2 /* WATCH_GETTER */]: 'watcher getter',\r\n    [3 /* WATCH_CALLBACK */]: 'watcher callback',\r\n    [4 /* WATCH_CLEANUP */]: 'watcher cleanup function',\r\n    [5 /* NATIVE_EVENT_HANDLER */]: 'native event handler',\r\n    [6 /* COMPONENT_EVENT_HANDLER */]: 'component event handler',\r\n    [7 /* VNODE_HOOK */]: 'vnode hook',\r\n    [8 /* DIRECTIVE_HOOK */]: 'directive hook',\r\n    [9 /* TRANSITION_HOOK */]: 'transition hook',\r\n    [10 /* APP_ERROR_HANDLER */]: 'app errorHandler',\r\n    [11 /* APP_WARN_HANDLER */]: 'app warnHandler',\r\n    [12 /* FUNCTION_REF */]: 'ref function',\r\n    [13 /* ASYNC_COMPONENT_LOADER */]: 'async component loader',\r\n    [14 /* SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +\r\n        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next'\r\n};\r\nfunction callWithErrorHandling(fn, instance, type, args) {\r\n    let res;\r\n    try {\r\n        res = args ? fn(...args) : fn();\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, type);\r\n    }\r\n    return res;\r\n}\r\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\r\n    if (isFunction$1(fn)) {\r\n        const res = callWithErrorHandling(fn, instance, type, args);\r\n        if (res && isPromise$1(res)) {\r\n            res.catch(err => {\r\n                handleError(err, instance, type);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    const values = [];\r\n    for (let i = 0; i < fn.length; i++) {\r\n        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\r\n    }\r\n    return values;\r\n}\r\nfunction handleError(err, instance, type, throwInDev = true) {\r\n    const contextVNode = instance ? instance.vnode : null;\r\n    if (instance) {\r\n        let cur = instance.parent;\r\n        // the exposed instance is the render proxy to keep it consistent with 2.x\r\n        const exposedInstance = instance.proxy;\r\n        // in production the hook receives only the error code\r\n        const errorInfo = (process.env.NODE_ENV !== 'production') ? ErrorTypeStrings[type] : type;\r\n        while (cur) {\r\n            const errorCapturedHooks = cur.ec;\r\n            if (errorCapturedHooks) {\r\n                for (let i = 0; i < errorCapturedHooks.length; i++) {\r\n                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.parent;\r\n        }\r\n        // app-level handling\r\n        const appErrorHandler = instance.appContext.config.errorHandler;\r\n        if (appErrorHandler) {\r\n            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);\r\n            return;\r\n        }\r\n    }\r\n    logError(err, type, contextVNode, throwInDev);\r\n}\r\nfunction logError(err, type, contextVNode, throwInDev = true) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const info = ErrorTypeStrings[type];\r\n        if (contextVNode) {\r\n            pushWarningContext(contextVNode);\r\n        }\r\n        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\r\n        if (contextVNode) {\r\n            popWarningContext();\r\n        }\r\n        // crash in dev by default so it's more noticeable\r\n        if (throwInDev) {\r\n            throw err;\r\n        }\r\n        else {\r\n            console.error(err);\r\n        }\r\n    }\r\n    else {\r\n        // recover in prod to reduce the impact on end-user\r\n        console.error(err);\r\n    }\r\n}\n\nlet isFlushing = false;\r\nlet isFlushPending = false;\r\nconst queue = [];\r\nlet flushIndex = 0;\r\nconst pendingPreFlushCbs = [];\r\nlet activePreFlushCbs = null;\r\nlet preFlushIndex = 0;\r\nconst pendingPostFlushCbs = [];\r\nlet activePostFlushCbs = null;\r\nlet postFlushIndex = 0;\r\nconst resolvedPromise = Promise.resolve();\r\nlet currentFlushPromise = null;\r\nlet currentPreFlushParentJob = null;\r\nconst RECURSION_LIMIT = 100;\r\nfunction nextTick(fn) {\r\n    const p = currentFlushPromise || resolvedPromise;\r\n    return fn ? p.then(this ? fn.bind(this) : fn) : p;\r\n}\r\n// #2768\r\n// Use binary-search to find a suitable position in the queue,\r\n// so that the queue maintains the increasing order of job's id,\r\n// which can prevent the job from being skipped and also can avoid repeated patching.\r\nfunction findInsertionIndex(id) {\r\n    // the start index should be `flushIndex + 1`\r\n    let start = flushIndex + 1;\r\n    let end = queue.length;\r\n    while (start < end) {\r\n        const middle = (start + end) >>> 1;\r\n        const middleJobId = getId(queue[middle]);\r\n        middleJobId < id ? (start = middle + 1) : (end = middle);\r\n    }\r\n    return start;\r\n}\r\nfunction queueJob(job) {\r\n    // the dedupe search uses the startIndex argument of Array.includes()\r\n    // by default the search index includes the current job that is being run\r\n    // so it cannot recursively trigger itself again.\r\n    // if the job is a watch() callback, the search will start with a +1 index to\r\n    // allow it recursively trigger itself - it is the user's responsibility to\r\n    // ensure it doesn't end up in an infinite loop.\r\n    if ((!queue.length ||\r\n        !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) &&\r\n        job !== currentPreFlushParentJob) {\r\n        if (job.id == null) {\r\n            queue.push(job);\r\n        }\r\n        else {\r\n            queue.splice(findInsertionIndex(job.id), 0, job);\r\n        }\r\n        queueFlush();\r\n    }\r\n}\r\nfunction queueFlush() {\r\n    if (!isFlushing && !isFlushPending) {\r\n        isFlushPending = true;\r\n        currentFlushPromise = resolvedPromise.then(flushJobs);\r\n    }\r\n}\r\nfunction invalidateJob(job) {\r\n    const i = queue.indexOf(job);\r\n    if (i > flushIndex) {\r\n        queue.splice(i, 1);\r\n    }\r\n}\r\nfunction queueCb(cb, activeQueue, pendingQueue, index) {\r\n    if (!isArray(cb)) {\r\n        if (!activeQueue ||\r\n            !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {\r\n            pendingQueue.push(cb);\r\n        }\r\n    }\r\n    else {\r\n        // if cb is an array, it is a component lifecycle hook which can only be\r\n        // triggered by a job, which is already deduped in the main queue, so\r\n        // we can skip duplicate check here to improve perf\r\n        pendingQueue.push(...cb);\r\n    }\r\n    queueFlush();\r\n}\r\nfunction queuePreFlushCb(cb) {\r\n    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);\r\n}\r\nfunction queuePostFlushCb(cb) {\r\n    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);\r\n}\r\nfunction flushPreFlushCbs(seen, parentJob = null) {\r\n    if (pendingPreFlushCbs.length) {\r\n        currentPreFlushParentJob = parentJob;\r\n        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];\r\n        pendingPreFlushCbs.length = 0;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) {\r\n                continue;\r\n            }\r\n            activePreFlushCbs[preFlushIndex]();\r\n        }\r\n        activePreFlushCbs = null;\r\n        preFlushIndex = 0;\r\n        currentPreFlushParentJob = null;\r\n        // recursively flush until it drains\r\n        flushPreFlushCbs(seen, parentJob);\r\n    }\r\n}\r\nfunction flushPostFlushCbs(seen) {\r\n    if (pendingPostFlushCbs.length) {\r\n        const deduped = [...new Set(pendingPostFlushCbs)];\r\n        pendingPostFlushCbs.length = 0;\r\n        // #1947 already has active queue, nested flushPostFlushCbs call\r\n        if (activePostFlushCbs) {\r\n            activePostFlushCbs.push(...deduped);\r\n            return;\r\n        }\r\n        activePostFlushCbs = deduped;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));\r\n        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {\r\n                continue;\r\n            }\r\n            activePostFlushCbs[postFlushIndex]();\r\n        }\r\n        activePostFlushCbs = null;\r\n        postFlushIndex = 0;\r\n    }\r\n}\r\nconst getId = (job) => job.id == null ? Infinity : job.id;\r\nfunction flushJobs(seen) {\r\n    isFlushPending = false;\r\n    isFlushing = true;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        seen = seen || new Map();\r\n    }\r\n    flushPreFlushCbs(seen);\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child so its render effect will have smaller\r\n    //    priority number)\r\n    // 2. If a component is unmounted during a parent component's update,\r\n    //    its update can be skipped.\r\n    queue.sort((a, b) => getId(a) - getId(b));\r\n    // conditional usage of checkRecursiveUpdate must be determined out of\r\n    // try ... catch block since Rollup by default de-optimizes treeshaking\r\n    // inside try-catch. This can leave all warning code unshaked. Although\r\n    // they would get eventually shaken by a minifier like terser, some minifiers\r\n    // would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)\r\n    const check = (process.env.NODE_ENV !== 'production')\r\n        ? (job) => checkRecursiveUpdates(seen, job)\r\n        : NOOP;\r\n    try {\r\n        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {\r\n            const job = queue[flushIndex];\r\n            if (job && job.active !== false) {\r\n                if ((process.env.NODE_ENV !== 'production') && check(job)) {\r\n                    continue;\r\n                }\r\n                // console.log(`running:`, job.id)\r\n                callWithErrorHandling(job, null, 14 /* SCHEDULER */);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        flushIndex = 0;\r\n        queue.length = 0;\r\n        flushPostFlushCbs(seen);\r\n        isFlushing = false;\r\n        currentFlushPromise = null;\r\n        // some postFlushCb queued jobs!\r\n        // keep flushing until it drains.\r\n        if (queue.length ||\r\n            pendingPreFlushCbs.length ||\r\n            pendingPostFlushCbs.length) {\r\n            flushJobs(seen);\r\n        }\r\n    }\r\n}\r\nfunction checkRecursiveUpdates(seen, fn) {\r\n    if (!seen.has(fn)) {\r\n        seen.set(fn, 1);\r\n    }\r\n    else {\r\n        const count = seen.get(fn);\r\n        if (count > RECURSION_LIMIT) {\r\n            const instance = fn.ownerInstance;\r\n            const componentName = instance && getComponentName(instance.type);\r\n            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` +\r\n                `This means you have a reactive effect that is mutating its own ` +\r\n                `dependencies and thus recursively triggering itself. Possible sources ` +\r\n                `include component template, render function, updated hook or ` +\r\n                `watcher source function.`);\r\n            return true;\r\n        }\r\n        else {\r\n            seen.set(fn, count + 1);\r\n        }\r\n    }\r\n}\n\n// Simple effect.\r\nfunction watchEffect(effect, options) {\r\n    return doWatch(effect, null, options);\r\n}\r\nfunction watchPostEffect(effect, options) {\r\n    return doWatch(effect, null, ((process.env.NODE_ENV !== 'production')\r\n        ? Object.assign(options || {}, { flush: 'post' })\r\n        : { flush: 'post' }));\r\n}\r\nfunction watchSyncEffect(effect, options) {\r\n    return doWatch(effect, null, ((process.env.NODE_ENV !== 'production')\r\n        ? Object.assign(options || {}, { flush: 'sync' })\r\n        : { flush: 'sync' }));\r\n}\r\n// initial value for watchers to trigger on undefined initial values\r\nconst INITIAL_WATCHER_VALUE = {};\r\n// implementation\r\nfunction watch(source, cb, options) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isFunction$1(cb)) {\r\n        warn(`\\`watch(fn, options?)\\` signature has been moved to a separate API. ` +\r\n            `Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only ` +\r\n            `supports \\`watch(source, cb, options?) signature.`);\r\n    }\r\n    return doWatch(source, cb, options);\r\n}\r\nfunction doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {\r\n    if ((process.env.NODE_ENV !== 'production') && !cb) {\r\n        if (immediate !== undefined) {\r\n            warn(`watch() \"immediate\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n        if (deep !== undefined) {\r\n            warn(`watch() \"deep\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n    }\r\n    const warnInvalidSource = (s) => {\r\n        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +\r\n            `a reactive object, or an array of these types.`);\r\n    };\r\n    const instance = currentInstance;\r\n    let getter;\r\n    let forceTrigger = false;\r\n    let isMultiSource = false;\r\n    if (isRef(source)) {\r\n        getter = () => source.value;\r\n        forceTrigger = !!source._shallow;\r\n    }\r\n    else if (isReactive(source)) {\r\n        getter = () => source;\r\n        deep = true;\r\n    }\r\n    else if (isArray(source)) {\r\n        isMultiSource = true;\r\n        forceTrigger = source.some(isReactive);\r\n        getter = () => source.map(s => {\r\n            if (isRef(s)) {\r\n                return s.value;\r\n            }\r\n            else if (isReactive(s)) {\r\n                return traverse(s);\r\n            }\r\n            else if (isFunction$1(s)) {\r\n                return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */);\r\n            }\r\n            else {\r\n                (process.env.NODE_ENV !== 'production') && warnInvalidSource(s);\r\n            }\r\n        });\r\n    }\r\n    else if (isFunction$1(source)) {\r\n        if (cb) {\r\n            // getter with cb\r\n            getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */);\r\n        }\r\n        else {\r\n            // no cb -> simple effect\r\n            getter = () => {\r\n                if (instance && instance.isUnmounted) {\r\n                    return;\r\n                }\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [onInvalidate]);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        getter = NOOP;\r\n        (process.env.NODE_ENV !== 'production') && warnInvalidSource(source);\r\n    }\r\n    if (cb && deep) {\r\n        const baseGetter = getter;\r\n        getter = () => traverse(baseGetter());\r\n    }\r\n    let cleanup;\r\n    let onInvalidate = (fn) => {\r\n        cleanup = effect.onStop = () => {\r\n            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);\r\n        };\r\n    };\r\n    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;\r\n    const job = () => {\r\n        if (!effect.active) {\r\n            return;\r\n        }\r\n        if (cb) {\r\n            // watch(source, cb)\r\n            const newValue = effect.run();\r\n            if (deep ||\r\n                forceTrigger ||\r\n                (isMultiSource\r\n                    ? newValue.some((v, i) => hasChanged(v, oldValue[i]))\r\n                    : hasChanged(newValue, oldValue)) ||\r\n                (false  )) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                    newValue,\r\n                    // pass undefined as the old value when it's changed for the first time\r\n                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\r\n                    onInvalidate\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        else {\r\n            // watchEffect\r\n            effect.run();\r\n        }\r\n    };\r\n    // important: mark the job as a watcher callback so that scheduler knows\r\n    // it is allowed to self-trigger (#1727)\r\n    job.allowRecurse = !!cb;\r\n    let scheduler;\r\n    if (flush === 'sync') {\r\n        scheduler = job; // the scheduler function gets called directly\r\n    }\r\n    else if (flush === 'post') {\r\n        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);\r\n    }\r\n    else {\r\n        // default: 'pre'\r\n        scheduler = () => {\r\n            if (!instance || instance.isMounted) {\r\n                queuePreFlushCb(job);\r\n            }\r\n            else {\r\n                // with 'pre' option, the first call must happen before\r\n                // the component is mounted so it is called synchronously.\r\n                job();\r\n            }\r\n        };\r\n    }\r\n    const effect = new ReactiveEffect(getter, scheduler);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        effect.onTrack = onTrack;\r\n        effect.onTrigger = onTrigger;\r\n    }\r\n    // initial run\r\n    if (cb) {\r\n        if (immediate) {\r\n            job();\r\n        }\r\n        else {\r\n            oldValue = effect.run();\r\n        }\r\n    }\r\n    else if (flush === 'post') {\r\n        queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);\r\n    }\r\n    else {\r\n        effect.run();\r\n    }\r\n    return () => {\r\n        effect.stop();\r\n        if (instance && instance.scope) {\r\n            remove(instance.scope.effects, effect);\r\n        }\r\n    };\r\n}\r\n// this.$watch\r\nfunction instanceWatch(source, value, options) {\r\n    const publicThis = this.proxy;\r\n    const getter = isString(source)\r\n        ? source.includes('.')\r\n            ? createPathGetter(publicThis, source)\r\n            : () => publicThis[source]\r\n        : source.bind(publicThis, publicThis);\r\n    let cb;\r\n    if (isFunction$1(value)) {\r\n        cb = value;\r\n    }\r\n    else {\r\n        cb = value.handler;\r\n        options = value;\r\n    }\r\n    const cur = currentInstance;\r\n    setCurrentInstance(this);\r\n    const res = doWatch(getter, cb.bind(publicThis), options);\r\n    if (cur) {\r\n        setCurrentInstance(cur);\r\n    }\r\n    else {\r\n        unsetCurrentInstance();\r\n    }\r\n    return res;\r\n}\r\nfunction createPathGetter(ctx, path) {\r\n    const segments = path.split('.');\r\n    return () => {\r\n        let cur = ctx;\r\n        for (let i = 0; i < segments.length && cur; i++) {\r\n            cur = cur[segments[i]];\r\n        }\r\n        return cur;\r\n    };\r\n}\r\nfunction traverse(value, seen) {\r\n    if (!isObject$1(value) || value[\"__v_skip\" /* SKIP */]) {\r\n        return value;\r\n    }\r\n    seen = seen || new Set();\r\n    if (seen.has(value)) {\r\n        return value;\r\n    }\r\n    seen.add(value);\r\n    if (isRef(value)) {\r\n        traverse(value.value, seen);\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            traverse(value[i], seen);\r\n        }\r\n    }\r\n    else if (isSet(value) || isMap(value)) {\r\n        value.forEach((v) => {\r\n            traverse(v, seen);\r\n        });\r\n    }\r\n    else if (isPlainObject(value)) {\r\n        for (const key in value) {\r\n            traverse(value[key], seen);\r\n        }\r\n    }\r\n    return value;\r\n}\n\n(process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\n(process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nconst isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\n\n// dev only\r\nconst warnRuntimeUsage = (method) => warn(`${method}() is a compiler-hint helper that is only usable inside ` +\r\n    `<script setup> of a single file component. Its arguments should be ` +\r\n    `compiled away and passing it at runtime has no effect.`);\r\n// implementation\r\nfunction defineProps() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineProps`);\r\n    }\r\n    return null;\r\n}\r\n// implementation\r\nfunction defineEmits() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineEmits`);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Vue `<script setup>` compiler macro for declaring a component's exposed\r\n * instance properties when it is accessed by a parent component via template\r\n * refs.\r\n *\r\n * `<script setup>` components are closed by default - i.e. varaibles inside\r\n * the `<script setup>` scope is not exposed to parent unless explicitly exposed\r\n * via `defineExpose`.\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the\r\n * output and should **not** be actually called at runtime.\r\n */\r\nfunction defineExpose(exposed) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineExpose`);\r\n    }\r\n}\r\n/**\r\n * Vue `<script setup>` compiler macro for providing props default values when\r\n * using type-based `defineProps` declaration.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * withDefaults(defineProps<{\r\n *   size?: number\r\n *   labels?: string[]\r\n * }>(), {\r\n *   size: 3,\r\n *   labels: () => ['default label']\r\n * })\r\n * ```\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the output\r\n * and should **not** be actually called at runtime.\r\n */\r\nfunction withDefaults(props, defaults) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`withDefaults`);\r\n    }\r\n    return null;\r\n}\r\nfunction useSlots() {\r\n    return getContext().slots;\r\n}\r\nfunction useAttrs() {\r\n    return getContext().attrs;\r\n}\r\nfunction getContext() {\r\n    const i = getCurrentInstance();\r\n    if ((process.env.NODE_ENV !== 'production') && !i) {\r\n        warn(`useContext() called without active instance.`);\r\n    }\r\n    return i.setupContext || (i.setupContext = createSetupContext(i));\r\n}\r\n/**\r\n * Runtime helper for merging default declarations. Imported by compiled code\r\n * only.\r\n * @internal\r\n */\r\nfunction mergeDefaults(\r\n// the base props is compiler-generated and guaranteed to be in this shape.\r\nprops, defaults) {\r\n    for (const key in defaults) {\r\n        const val = props[key];\r\n        if (val) {\r\n            val.default = defaults[key];\r\n        }\r\n        else if (val === null) {\r\n            props[key] = { default: defaults[key] };\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`props default key \"${key}\" has no corresponding declaration.`);\r\n        }\r\n    }\r\n    return props;\r\n}\r\n/**\r\n * `<script setup>` helper for persisting the current instance context over\r\n * async/await flows.\r\n *\r\n * `@vue/compiler-sfc` converts the following:\r\n *\r\n * ```ts\r\n * const x = await foo()\r\n * ```\r\n *\r\n * into:\r\n *\r\n * ```ts\r\n * let __temp, __restore\r\n * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)\r\n * ```\r\n * @internal\r\n */\r\nfunction withAsyncContext(getAwaitable) {\r\n    const ctx = getCurrentInstance();\r\n    if ((process.env.NODE_ENV !== 'production') && !ctx) {\r\n        warn(`withAsyncContext called without active current instance. ` +\r\n            `This is likely a bug.`);\r\n    }\r\n    let awaitable = getAwaitable();\r\n    unsetCurrentInstance();\r\n    if (isPromise(awaitable)) {\r\n        awaitable = awaitable.catch(e => {\r\n            setCurrentInstance(ctx);\r\n            throw e;\r\n        });\r\n    }\r\n    return [awaitable, () => setCurrentInstance(ctx)];\r\n}\n\n// Actual implementation\r\nfunction h(type, propsOrChildren, children) {\r\n    const l = arguments.length;\r\n    if (l === 2) {\r\n        if (isObject$1(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            // single vnode without props\r\n            if (isVNode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]);\r\n            }\r\n            // props without children\r\n            return createVNode(type, propsOrChildren);\r\n        }\r\n        else {\r\n            // omit props\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }\r\n    else {\r\n        if (l > 3) {\r\n            children = Array.prototype.slice.call(arguments, 2);\r\n        }\r\n        else if (l === 3 && isVNode(children)) {\r\n            children = [children];\r\n        }\r\n        return createVNode(type, propsOrChildren, children);\r\n    }\r\n}\n\nconst ssrContextKey = Symbol((process.env.NODE_ENV !== 'production') ? `ssrContext` : ``);\r\nconst useSSRContext = () => {\r\n    {\r\n        const ctx = inject(ssrContextKey);\r\n        if (!ctx) {\r\n            warn(`Server rendering context not provided. Make sure to only call ` +\r\n                `useSSRContext() conditionally in the server build.`);\r\n        }\r\n        return ctx;\r\n    }\r\n};\n\nfunction initCustomFormatter() {\r\n    /* eslint-disable no-restricted-globals */\r\n    if (!(process.env.NODE_ENV !== 'production') || typeof window === 'undefined') {\r\n        return;\r\n    }\r\n    const vueStyle = { style: 'color:#3ba776' };\r\n    const numberStyle = { style: 'color:#0b1bc9' };\r\n    const stringStyle = { style: 'color:#b62e24' };\r\n    const keywordStyle = { style: 'color:#9d288c' };\r\n    // custom formatter for Chrome\r\n    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html\r\n    const formatter = {\r\n        header(obj) {\r\n            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup\r\n            if (!isObject$1(obj)) {\r\n                return null;\r\n            }\r\n            if (obj.__isVue) {\r\n                return ['div', vueStyle, `VueInstance`];\r\n            }\r\n            else if (isRef(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, genRefFlag(obj)],\r\n                    '<',\r\n                    formatValue(obj.value),\r\n                    `>`\r\n                ];\r\n            }\r\n            else if (isReactive(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Reactive'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    `>${isReadonly(obj) ? ` (readonly)` : ``}`\r\n                ];\r\n            }\r\n            else if (isReadonly(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Readonly'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    '>'\r\n                ];\r\n            }\r\n            return null;\r\n        },\r\n        hasBody(obj) {\r\n            return obj && obj.__isVue;\r\n        },\r\n        body(obj) {\r\n            if (obj && obj.__isVue) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ...formatInstance(obj.$)\r\n                ];\r\n            }\r\n        }\r\n    };\r\n    function formatInstance(instance) {\r\n        const blocks = [];\r\n        if (instance.type.props && instance.props) {\r\n            blocks.push(createInstanceBlock('props', toRaw(instance.props)));\r\n        }\r\n        if (instance.setupState !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('setup', instance.setupState));\r\n        }\r\n        if (instance.data !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('data', toRaw(instance.data)));\r\n        }\r\n        const computed = extractKeys(instance, 'computed');\r\n        if (computed) {\r\n            blocks.push(createInstanceBlock('computed', computed));\r\n        }\r\n        const injected = extractKeys(instance, 'inject');\r\n        if (injected) {\r\n            blocks.push(createInstanceBlock('injected', injected));\r\n        }\r\n        blocks.push([\r\n            'div',\r\n            {},\r\n            [\r\n                'span',\r\n                {\r\n                    style: keywordStyle.style + ';opacity:0.66'\r\n                },\r\n                '$ (internal): '\r\n            ],\r\n            ['object', { object: instance }]\r\n        ]);\r\n        return blocks;\r\n    }\r\n    function createInstanceBlock(type, target) {\r\n        target = extend({}, target);\r\n        if (!Object.keys(target).length) {\r\n            return ['span', {}];\r\n        }\r\n        return [\r\n            'div',\r\n            { style: 'line-height:1.25em;margin-bottom:0.6em' },\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'color:#476582'\r\n                },\r\n                type\r\n            ],\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'padding-left:1.25em'\r\n                },\r\n                ...Object.keys(target).map(key => {\r\n                    return [\r\n                        'div',\r\n                        {},\r\n                        ['span', keywordStyle, key + ': '],\r\n                        formatValue(target[key], false)\r\n                    ];\r\n                })\r\n            ]\r\n        ];\r\n    }\r\n    function formatValue(v, asRaw = true) {\r\n        if (typeof v === 'number') {\r\n            return ['span', numberStyle, v];\r\n        }\r\n        else if (typeof v === 'string') {\r\n            return ['span', stringStyle, JSON.stringify(v)];\r\n        }\r\n        else if (typeof v === 'boolean') {\r\n            return ['span', keywordStyle, v];\r\n        }\r\n        else if (isObject$1(v)) {\r\n            return ['object', { object: asRaw ? toRaw(v) : v }];\r\n        }\r\n        else {\r\n            return ['span', stringStyle, String(v)];\r\n        }\r\n    }\r\n    function extractKeys(instance, type) {\r\n        const Comp = instance.type;\r\n        if (isFunction$1(Comp)) {\r\n            return;\r\n        }\r\n        const extracted = {};\r\n        for (const key in instance.ctx) {\r\n            if (isKeyOfType(Comp, key, type)) {\r\n                extracted[key] = instance.ctx[key];\r\n            }\r\n        }\r\n        return extracted;\r\n    }\r\n    function isKeyOfType(Comp, key, type) {\r\n        const opts = Comp[type];\r\n        if ((isArray(opts) && opts.includes(key)) ||\r\n            (isObject$1(opts) && key in opts)) {\r\n            return true;\r\n        }\r\n        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {\r\n            return true;\r\n        }\r\n        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {\r\n            return true;\r\n        }\r\n    }\r\n    function genRefFlag(v) {\r\n        if (v._shallow) {\r\n            return `ShallowRef`;\r\n        }\r\n        if (v.effect) {\r\n            return `ComputedRef`;\r\n        }\r\n        return `Ref`;\r\n    }\r\n    if (window.devtoolsFormatters) {\r\n        window.devtoolsFormatters.push(formatter);\r\n    }\r\n    else {\r\n        window.devtoolsFormatters = [formatter];\r\n    }\r\n}\n\nfunction withMemo(memo, render, cache, index) {\r\n    const cached = cache[index];\r\n    if (cached && isMemoSame(cached, memo)) {\r\n        return cached;\r\n    }\r\n    const ret = render();\r\n    // shallow clone\r\n    ret.memo = memo.slice();\r\n    return (cache[index] = ret);\r\n}\r\nfunction isMemoSame(cached, memo) {\r\n    const prev = cached.memo;\r\n    if (prev.length != memo.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < prev.length; i++) {\r\n        if (prev[i] !== memo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    // make sure to let parent block track it when returning cached\r\n    if (isBlockTreeEnabled > 0 && currentBlock) {\r\n        currentBlock.push(cached);\r\n    }\r\n    return true;\r\n}\n\n// Core API ------------------------------------------------------------------\r\nconst version = \"3.2.14\";\r\nconst _ssrUtils = {\r\n    createComponentInstance,\r\n    setupComponent,\r\n    renderComponentRoot,\r\n    setCurrentRenderingInstance,\r\n    isVNode,\r\n    normalizeVNode\r\n};\r\n/**\r\n * SSR utils for \\@vue/server-renderer. Only exposed in cjs builds.\r\n * @internal\r\n */\r\nconst ssrUtils = (_ssrUtils );\r\n/**\r\n * @internal only exposed in compat builds\r\n */\r\nconst resolveFilter = null;\r\n/**\r\n * @internal only exposed in compat builds.\r\n */\r\nconst compatUtils = (null);\n\nexport { BaseTransition, Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, compatUtils, createBlock, createCommentVNode, createElementBlock, createBaseVNode as createElementVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, defineEmits, defineExpose, defineProps, devtools, getCurrentInstance, getTransitionRawChildren, guardReactiveProps, h, handleError, initCustomFormatter, inject, isMemoSame, isRuntimeOnly, isVNode, mergeDefaults, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveFilter, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useAttrs, useSSRContext, useSlots, useTransitionState, version, warn, watch, watchEffect, watchPostEffect, watchSyncEffect, withAsyncContext, withCtx, withDefaults, withDirectives, withMemo, withScopeId };\n", "import { camelize, warn, callWithAsyncErrorHandling, defineComponent, nextTick, createVNode, getCurrentInstance, watchPostEffect, onMounted, onUnmounted, Fragment, Static, h, BaseTransition, useTransitionState, onUpdated, toRaw, getTransitionRawChildren, setTransitionHooks, resolveTransitionHooks, createRenderer, isRuntimeOnly, createHydrationRenderer } from '@vue/runtime-core';\nexport * from '@vue/runtime-core';\nimport { isString, isArray, hyphenate, capitalize, isSpecialBooleanAttr, includeBooleanAttr, isOn, isModelListener, isFunction, toNumber, camelize as camelize$1, extend, EMPTY_OBJ, isObject, invokeArrayFns, looseIndexOf, isSet, looseEqual, isHTMLTag, isSVGTag } from '@vue/shared';\n\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst doc = (typeof document !== 'undefined' ? document : null);\r\nconst staticTemplateCache = new Map();\r\nconst nodeOps = {\r\n    insert: (child, parent, anchor) => {\r\n        parent.insertBefore(child, anchor || null);\r\n    },\r\n    remove: child => {\r\n        const parent = child.parentNode;\r\n        if (parent) {\r\n            parent.removeChild(child);\r\n        }\r\n    },\r\n    createElement: (tag, isSVG, is, props) => {\r\n        const el = isSVG\r\n            ? doc.createElementNS(svgNS, tag)\r\n            : doc.createElement(tag, is ? { is } : undefined);\r\n        if (tag === 'select' && props && props.multiple != null) {\r\n            el.setAttribute('multiple', props.multiple);\r\n        }\r\n        return el;\r\n    },\r\n    createText: text => doc.createTextNode(text),\r\n    createComment: text => doc.createComment(text),\r\n    setText: (node, text) => {\r\n        node.nodeValue = text;\r\n    },\r\n    setElementText: (el, text) => {\r\n        el.textContent = text;\r\n    },\r\n    parentNode: node => node.parentNode,\r\n    nextSibling: node => node.nextSibling,\r\n    querySelector: selector => doc.querySelector(selector),\r\n    setScopeId(el, id) {\r\n        el.setAttribute(id, '');\r\n    },\r\n    cloneNode(el) {\r\n        const cloned = el.cloneNode(true);\r\n        // #3072\r\n        // - in `patchDOMProp`, we store the actual value in the `el._value` property.\r\n        // - normally, elements using `:value` bindings will not be hoisted, but if\r\n        //   the bound value is a constant, e.g. `:value=\"true\"` - they do get\r\n        //   hoisted.\r\n        // - in production, hoisted nodes are cloned when subsequent inserts, but\r\n        //   cloneNode() does not copy the custom property we attached.\r\n        // - This may need to account for other custom DOM properties we attach to\r\n        //   elements in addition to `_value` in the future.\r\n        if (`_value` in el) {\r\n            cloned._value = el._value;\r\n        }\r\n        return cloned;\r\n    },\r\n    // __UNSAFE__\r\n    // Reason: innerHTML.\r\n    // Static content here can only come from compiled templates.\r\n    // As long as the user only uses trusted templates, this is safe.\r\n    insertStaticContent(content, parent, anchor, isSVG) {\r\n        // <parent> before | first ... last | anchor </parent>\r\n        const before = anchor ? anchor.previousSibling : parent.lastChild;\r\n        let template = staticTemplateCache.get(content);\r\n        if (!template) {\r\n            const t = doc.createElement('template');\r\n            t.innerHTML = isSVG ? `<svg>${content}</svg>` : content;\r\n            template = t.content;\r\n            if (isSVG) {\r\n                // remove outer svg wrapper\r\n                const wrapper = template.firstChild;\r\n                while (wrapper.firstChild) {\r\n                    template.appendChild(wrapper.firstChild);\r\n                }\r\n                template.removeChild(wrapper);\r\n            }\r\n            staticTemplateCache.set(content, template);\r\n        }\r\n        parent.insertBefore(template.cloneNode(true), anchor);\r\n        return [\r\n            // first\r\n            before ? before.nextSibling : parent.firstChild,\r\n            // last\r\n            anchor ? anchor.previousSibling : parent.lastChild\r\n        ];\r\n    }\r\n};\n\n// compiler should normalize class + :class bindings on the same element\r\n// into a single binding ['staticClass', dynamic]\r\nfunction patchClass(el, value, isSVG) {\r\n    // directly setting className should be faster than setAttribute in theory\r\n    // if this is an element during a transition, take the temporary transition\r\n    // classes into account.\r\n    const transitionClasses = el._vtc;\r\n    if (transitionClasses) {\r\n        value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(' ');\r\n    }\r\n    if (value == null) {\r\n        el.removeAttribute('class');\r\n    }\r\n    else if (isSVG) {\r\n        el.setAttribute('class', value);\r\n    }\r\n    else {\r\n        el.className = value;\r\n    }\r\n}\n\nfunction patchStyle(el, prev, next) {\r\n    const style = el.style;\r\n    const currentDisplay = style.display;\r\n    if (!next) {\r\n        el.removeAttribute('style');\r\n    }\r\n    else if (isString(next)) {\r\n        if (prev !== next) {\r\n            style.cssText = next;\r\n        }\r\n    }\r\n    else {\r\n        for (const key in next) {\r\n            setStyle(style, key, next[key]);\r\n        }\r\n        if (prev && !isString(prev)) {\r\n            for (const key in prev) {\r\n                if (next[key] == null) {\r\n                    setStyle(style, key, '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // indicates that the `display` of the element is controlled by `v-show`,\r\n    // so we always keep the current `display` value regardless of the `style` value,\r\n    // thus handing over control to `v-show`.\r\n    if ('_vod' in el) {\r\n        style.display = currentDisplay;\r\n    }\r\n}\r\nconst importantRE = /\\s*!important$/;\r\nfunction setStyle(style, name, val) {\r\n    if (isArray(val)) {\r\n        val.forEach(v => setStyle(style, name, v));\r\n    }\r\n    else {\r\n        if (name.startsWith('--')) {\r\n            // custom property definition\r\n            style.setProperty(name, val);\r\n        }\r\n        else {\r\n            const prefixed = autoPrefix(style, name);\r\n            if (importantRE.test(val)) {\r\n                // !important\r\n                style.setProperty(hyphenate(prefixed), val.replace(importantRE, ''), 'important');\r\n            }\r\n            else {\r\n                style[prefixed] = val;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst prefixes = ['Webkit', 'Moz', 'ms'];\r\nconst prefixCache = {};\r\nfunction autoPrefix(style, rawName) {\r\n    const cached = prefixCache[rawName];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    let name = camelize(rawName);\r\n    if (name !== 'filter' && name in style) {\r\n        return (prefixCache[rawName] = name);\r\n    }\r\n    name = capitalize(name);\r\n    for (let i = 0; i < prefixes.length; i++) {\r\n        const prefixed = prefixes[i] + name;\r\n        if (prefixed in style) {\r\n            return (prefixCache[rawName] = prefixed);\r\n        }\r\n    }\r\n    return rawName;\r\n}\n\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\r\nfunction patchAttr(el, key, value, isSVG, instance) {\r\n    if (isSVG && key.startsWith('xlink:')) {\r\n        if (value == null) {\r\n            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\r\n        }\r\n        else {\r\n            el.setAttributeNS(xlinkNS, key, value);\r\n        }\r\n    }\r\n    else {\r\n        // note we are only checking boolean attributes that don't have a\r\n        // corresponding dom prop of the same name here.\r\n        const isBoolean = isSpecialBooleanAttr(key);\r\n        if (value == null || (isBoolean && !includeBooleanAttr(value))) {\r\n            el.removeAttribute(key);\r\n        }\r\n        else {\r\n            el.setAttribute(key, isBoolean ? '' : value);\r\n        }\r\n    }\r\n}\n\n// __UNSAFE__\r\n// functions. The user is responsible for using them with only trusted content.\r\nfunction patchDOMProp(el, key, value, \r\n// the following args are passed only due to potential innerHTML/textContent\r\n// overriding existing VNodes, in which case the old tree must be properly\r\n// unmounted.\r\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\r\n    if (key === 'innerHTML' || key === 'textContent') {\r\n        if (prevChildren) {\r\n            unmountChildren(prevChildren, parentComponent, parentSuspense);\r\n        }\r\n        el[key] = value == null ? '' : value;\r\n        return;\r\n    }\r\n    if (key === 'value' && el.tagName !== 'PROGRESS') {\r\n        // store value as _value as well since\r\n        // non-string values will be stringified.\r\n        el._value = value;\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n        if (value == null) {\r\n            el.removeAttribute(key);\r\n        }\r\n        return;\r\n    }\r\n    if (value === '' || value == null) {\r\n        const type = typeof el[key];\r\n        if (type === 'boolean') {\r\n            // e.g. <select multiple> compiles to { multiple: '' }\r\n            el[key] = includeBooleanAttr(value);\r\n            return;\r\n        }\r\n        else if (value == null && type === 'string') {\r\n            // e.g. <div :id=\"null\">\r\n            el[key] = '';\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n        else if (type === 'number') {\r\n            // e.g. <img :width=\"null\">\r\n            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error\r\n            try {\r\n                el[key] = 0;\r\n            }\r\n            catch (_a) { }\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n    }\r\n    // some properties perform value validation and throw\r\n    try {\r\n        el[key] = value;\r\n    }\r\n    catch (e) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Failed setting prop \"${key}\" on <${el.tagName.toLowerCase()}>: ` +\r\n                `value ${value} is invalid.`, e);\r\n        }\r\n    }\r\n}\n\n// Async edge case fix requires storing an event listener's attach timestamp.\r\nlet _getNow = Date.now;\r\nlet skipTimestampCheck = false;\r\nif (typeof window !== 'undefined') {\r\n    // Determine what event timestamp the browser is using. Annoyingly, the\r\n    // timestamp can either be hi-res (relative to page load) or low-res\r\n    // (relative to UNIX epoch), so in order to compare time we have to use the\r\n    // same timestamp type when saving the flush timestamp.\r\n    if (_getNow() > document.createEvent('Event').timeStamp) {\r\n        // if the low-res timestamp which is bigger than the event timestamp\r\n        // (which is evaluated AFTER) it means the event is using a hi-res timestamp,\r\n        // and we need to use the hi-res version for event listeners as well.\r\n        _getNow = () => performance.now();\r\n    }\r\n    // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation\r\n    // and does not fire microtasks in between event propagation, so safe to exclude.\r\n    const ffMatch = navigator.userAgent.match(/firefox\\/(\\d+)/i);\r\n    skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);\r\n}\r\n// To avoid the overhead of repeatedly calling performance.now(), we cache\r\n// and use the same timestamp for all event listeners attached in the same tick.\r\nlet cachedNow = 0;\r\nconst p = Promise.resolve();\r\nconst reset = () => {\r\n    cachedNow = 0;\r\n};\r\nconst getNow = () => cachedNow || (p.then(reset), (cachedNow = _getNow()));\r\nfunction addEventListener(el, event, handler, options) {\r\n    el.addEventListener(event, handler, options);\r\n}\r\nfunction removeEventListener(el, event, handler, options) {\r\n    el.removeEventListener(event, handler, options);\r\n}\r\nfunction patchEvent(el, rawName, prevValue, nextValue, instance = null) {\r\n    // vei = vue event invokers\r\n    const invokers = el._vei || (el._vei = {});\r\n    const existingInvoker = invokers[rawName];\r\n    if (nextValue && existingInvoker) {\r\n        // patch\r\n        existingInvoker.value = nextValue;\r\n    }\r\n    else {\r\n        const [name, options] = parseName(rawName);\r\n        if (nextValue) {\r\n            // add\r\n            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));\r\n            addEventListener(el, name, invoker, options);\r\n        }\r\n        else if (existingInvoker) {\r\n            // remove\r\n            removeEventListener(el, name, existingInvoker, options);\r\n            invokers[rawName] = undefined;\r\n        }\r\n    }\r\n}\r\nconst optionsModifierRE = /(?:Once|Passive|Capture)$/;\r\nfunction parseName(name) {\r\n    let options;\r\n    if (optionsModifierRE.test(name)) {\r\n        options = {};\r\n        let m;\r\n        while ((m = name.match(optionsModifierRE))) {\r\n            name = name.slice(0, name.length - m[0].length);\r\n            options[m[0].toLowerCase()] = true;\r\n        }\r\n    }\r\n    return [hyphenate(name.slice(2)), options];\r\n}\r\nfunction createInvoker(initialValue, instance) {\r\n    const invoker = (e) => {\r\n        // async edge case #6566: inner click event triggers patch, event handler\r\n        // attached to outer element during patch, and triggered again. This\r\n        // happens because browsers fire microtask ticks between event propagation.\r\n        // the solution is simple: we save the timestamp when a handler is attached,\r\n        // and the handler would only fire if the event passed to it was fired\r\n        // AFTER it was attached.\r\n        const timeStamp = e.timeStamp || _getNow();\r\n        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {\r\n            callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */, [e]);\r\n        }\r\n    };\r\n    invoker.value = initialValue;\r\n    invoker.attached = getNow();\r\n    return invoker;\r\n}\r\nfunction patchStopImmediatePropagation(e, value) {\r\n    if (isArray(value)) {\r\n        const originalStop = e.stopImmediatePropagation;\r\n        e.stopImmediatePropagation = () => {\r\n            originalStop.call(e);\r\n            e._stopped = true;\r\n        };\r\n        return value.map(fn => (e) => !e._stopped && fn(e));\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\n\nconst nativeOnRE = /^on[a-z]/;\r\nconst patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {\r\n    if (key === 'class') {\r\n        patchClass(el, nextValue, isSVG);\r\n    }\r\n    else if (key === 'style') {\r\n        patchStyle(el, prevValue, nextValue);\r\n    }\r\n    else if (isOn(key)) {\r\n        // ignore v-model listeners\r\n        if (!isModelListener(key)) {\r\n            patchEvent(el, key, prevValue, nextValue, parentComponent);\r\n        }\r\n    }\r\n    else if (key[0] === '.'\r\n        ? ((key = key.slice(1)), true)\r\n        : key[0] === '^'\r\n            ? ((key = key.slice(1)), false)\r\n            : shouldSetAsProp(el, key, nextValue, isSVG)) {\r\n        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\r\n    }\r\n    else {\r\n        // special case for <input v-model type=\"checkbox\"> with\r\n        // :true-value & :false-value\r\n        // store value as dom properties since non-string values will be\r\n        // stringified.\r\n        if (key === 'true-value') {\r\n            el._trueValue = nextValue;\r\n        }\r\n        else if (key === 'false-value') {\r\n            el._falseValue = nextValue;\r\n        }\r\n        patchAttr(el, key, nextValue, isSVG);\r\n    }\r\n};\r\nfunction shouldSetAsProp(el, key, value, isSVG) {\r\n    if (isSVG) {\r\n        // most keys must be set as attribute on svg elements to work\r\n        // ...except innerHTML & textContent\r\n        if (key === 'innerHTML' || key === 'textContent') {\r\n            return true;\r\n        }\r\n        // or native onclick with function values\r\n        if (key in el && nativeOnRE.test(key) && isFunction(value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // spellcheck and draggable are numerated attrs, however their\r\n    // corresponding DOM properties are actually booleans - this leads to\r\n    // setting it with a string \"false\" value leading it to be coerced to\r\n    // `true`, so we need to always treat them as attributes.\r\n    // Note that `contentEditable` doesn't have this problem: its DOM\r\n    // property is also enumerated string values.\r\n    if (key === 'spellcheck' || key === 'draggable') {\r\n        return false;\r\n    }\r\n    // #1787, #2840 form property on form elements is readonly and must be set as\r\n    // attribute.\r\n    if (key === 'form') {\r\n        return false;\r\n    }\r\n    // #1526 <input list> must be set as attribute\r\n    if (key === 'list' && el.tagName === 'INPUT') {\r\n        return false;\r\n    }\r\n    // #2766 <textarea type> must be set as attribute\r\n    if (key === 'type' && el.tagName === 'TEXTAREA') {\r\n        return false;\r\n    }\r\n    // native onclick with string value, must be set as attribute\r\n    if (nativeOnRE.test(key) && isString(value)) {\r\n        return false;\r\n    }\r\n    return key in el;\r\n}\n\nfunction defineCustomElement(options, hydate) {\r\n    const Comp = defineComponent(options);\r\n    class VueCustomElement extends VueElement {\r\n        constructor(initialProps) {\r\n            super(Comp, initialProps, hydate);\r\n        }\r\n    }\r\n    VueCustomElement.def = Comp;\r\n    return VueCustomElement;\r\n}\r\nconst defineSSRCustomElement = ((options) => {\r\n    // @ts-ignore\r\n    return defineCustomElement(options, hydrate);\r\n});\r\nconst BaseClass = (typeof HTMLElement !== 'undefined' ? HTMLElement : class {\r\n});\r\nclass VueElement extends BaseClass {\r\n    constructor(_def, _props = {}, hydrate) {\r\n        super();\r\n        this._def = _def;\r\n        this._props = _props;\r\n        /**\r\n         * @internal\r\n         */\r\n        this._instance = null;\r\n        this._connected = false;\r\n        this._resolved = false;\r\n        this._numberProps = null;\r\n        if (this.shadowRoot && hydrate) {\r\n            hydrate(this._createVNode(), this.shadowRoot);\r\n        }\r\n        else {\r\n            if ((process.env.NODE_ENV !== 'production') && this.shadowRoot) {\r\n                warn(`Custom element has pre-rendered declarative shadow root but is not ` +\r\n                    `defined as hydratable. Use \\`defineSSRCustomElement\\`.`);\r\n            }\r\n            this.attachShadow({ mode: 'open' });\r\n        }\r\n        // set initial attrs\r\n        for (let i = 0; i < this.attributes.length; i++) {\r\n            this._setAttr(this.attributes[i].name);\r\n        }\r\n        // watch future attr changes\r\n        new MutationObserver(mutations => {\r\n            for (const m of mutations) {\r\n                this._setAttr(m.attributeName);\r\n            }\r\n        }).observe(this, { attributes: true });\r\n    }\r\n    connectedCallback() {\r\n        this._connected = true;\r\n        if (!this._instance) {\r\n            this._resolveDef();\r\n            this._update();\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        this._connected = false;\r\n        nextTick(() => {\r\n            if (!this._connected) {\r\n                render(null, this.shadowRoot);\r\n                this._instance = null;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * resolve inner component definition (handle possible async component)\r\n     */\r\n    _resolveDef() {\r\n        if (this._resolved) {\r\n            return;\r\n        }\r\n        const resolve = (def) => {\r\n            this._resolved = true;\r\n            const { props, styles } = def;\r\n            const hasOptions = !isArray(props);\r\n            const rawKeys = props ? (hasOptions ? Object.keys(props) : props) : [];\r\n            // cast Number-type props set before resolve\r\n            let numberProps;\r\n            if (hasOptions) {\r\n                for (const key in this._props) {\r\n                    const opt = props[key];\r\n                    if (opt === Number || (opt && opt.type === Number)) {\r\n                        this._props[key] = toNumber(this._props[key]);\r\n                        (numberProps || (numberProps = Object.create(null)))[key] = true;\r\n                    }\r\n                }\r\n            }\r\n            if (numberProps) {\r\n                this._numberProps = numberProps;\r\n                this._update();\r\n            }\r\n            // check if there are props set pre-upgrade or connect\r\n            for (const key of Object.keys(this)) {\r\n                if (key[0] !== '_') {\r\n                    this._setProp(key, this[key]);\r\n                }\r\n            }\r\n            // defining getter/setters on prototype\r\n            for (const key of rawKeys.map(camelize$1)) {\r\n                Object.defineProperty(this, key, {\r\n                    get() {\r\n                        return this._getProp(key);\r\n                    },\r\n                    set(val) {\r\n                        this._setProp(key, val);\r\n                    }\r\n                });\r\n            }\r\n            this._applyStyles(styles);\r\n        };\r\n        const asyncDef = this._def.__asyncLoader;\r\n        if (asyncDef) {\r\n            asyncDef().then(resolve);\r\n        }\r\n        else {\r\n            resolve(this._def);\r\n        }\r\n    }\r\n    _setAttr(key) {\r\n        let value = this.getAttribute(key);\r\n        if (this._numberProps && this._numberProps[key]) {\r\n            value = toNumber(value);\r\n        }\r\n        this._setProp(camelize$1(key), value, false);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _getProp(key) {\r\n        return this._props[key];\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _setProp(key, val, shouldReflect = true) {\r\n        if (val !== this._props[key]) {\r\n            this._props[key] = val;\r\n            if (this._instance) {\r\n                this._update();\r\n            }\r\n            // reflect\r\n            if (shouldReflect) {\r\n                if (val === true) {\r\n                    this.setAttribute(hyphenate(key), '');\r\n                }\r\n                else if (typeof val === 'string' || typeof val === 'number') {\r\n                    this.setAttribute(hyphenate(key), val + '');\r\n                }\r\n                else if (!val) {\r\n                    this.removeAttribute(hyphenate(key));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _update() {\r\n        render(this._createVNode(), this.shadowRoot);\r\n    }\r\n    _createVNode() {\r\n        const vnode = createVNode(this._def, extend({}, this._props));\r\n        if (!this._instance) {\r\n            vnode.ce = instance => {\r\n                this._instance = instance;\r\n                instance.isCE = true;\r\n                // HMR\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    instance.ceReload = newStyles => {\r\n                        // alawys reset styles\r\n                        if (this._styles) {\r\n                            this._styles.forEach(s => this.shadowRoot.removeChild(s));\r\n                            this._styles.length = 0;\r\n                        }\r\n                        this._applyStyles(newStyles);\r\n                        // if this is an async component, ceReload is called from the inner\r\n                        // component so no need to reload the async wrapper\r\n                        if (!this._def.__asyncLoader) {\r\n                            // reload\r\n                            this._instance = null;\r\n                            this._update();\r\n                        }\r\n                    };\r\n                }\r\n                // intercept emit\r\n                instance.emit = (event, ...args) => {\r\n                    this.dispatchEvent(new CustomEvent(event, {\r\n                        detail: args\r\n                    }));\r\n                };\r\n                // locate nearest Vue custom element parent for provide/inject\r\n                let parent = this;\r\n                while ((parent =\r\n                    parent && (parent.parentNode || parent.host))) {\r\n                    if (parent instanceof VueElement) {\r\n                        instance.parent = parent._instance;\r\n                        break;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        return vnode;\r\n    }\r\n    _applyStyles(styles) {\r\n        if (styles) {\r\n            styles.forEach(css => {\r\n                const s = document.createElement('style');\r\n                s.textContent = css;\r\n                this.shadowRoot.appendChild(s);\r\n                // record for HMR\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    (this._styles || (this._styles = [])).push(s);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\n\nfunction useCssModule(name = '$style') {\r\n    /* istanbul ignore else */\r\n    {\r\n        const instance = getCurrentInstance();\r\n        if (!instance) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`useCssModule must be called inside setup()`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const modules = instance.type.__cssModules;\r\n        if (!modules) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`Current instance does not have CSS modules injected.`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        const mod = modules[name];\r\n        if (!mod) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current instance does not have CSS module named \"${name}\".`);\r\n            return EMPTY_OBJ;\r\n        }\r\n        return mod;\r\n    }\r\n}\n\n/**\r\n * Runtime helper for SFC's CSS variable injection feature.\r\n * @private\r\n */\r\nfunction useCssVars(getter) {\r\n    const instance = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!instance) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`useCssVars is called without current active component instance.`);\r\n        return;\r\n    }\r\n    const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));\r\n    watchPostEffect(setVars);\r\n    onMounted(() => {\r\n        const ob = new MutationObserver(setVars);\r\n        ob.observe(instance.subTree.el.parentNode, { childList: true });\r\n        onUnmounted(() => ob.disconnect());\r\n    });\r\n}\r\nfunction setVarsOnVNode(vnode, vars) {\r\n    if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        const suspense = vnode.suspense;\r\n        vnode = suspense.activeBranch;\r\n        if (suspense.pendingBranch && !suspense.isHydrating) {\r\n            suspense.effects.push(() => {\r\n                setVarsOnVNode(suspense.activeBranch, vars);\r\n            });\r\n        }\r\n    }\r\n    // drill down HOCs until it's a non-component vnode\r\n    while (vnode.component) {\r\n        vnode = vnode.component.subTree;\r\n    }\r\n    if (vnode.shapeFlag & 1 /* ELEMENT */ && vnode.el) {\r\n        setVarsOnNode(vnode.el, vars);\r\n    }\r\n    else if (vnode.type === Fragment) {\r\n        vnode.children.forEach(c => setVarsOnVNode(c, vars));\r\n    }\r\n    else if (vnode.type === Static) {\r\n        let { el, anchor } = vnode;\r\n        while (el) {\r\n            setVarsOnNode(el, vars);\r\n            if (el === anchor)\r\n                break;\r\n            el = el.nextSibling;\r\n        }\r\n    }\r\n}\r\nfunction setVarsOnNode(el, vars) {\r\n    if (el.nodeType === 1) {\r\n        const style = el.style;\r\n        for (const key in vars) {\r\n            style.setProperty(`--${key}`, vars[key]);\r\n        }\r\n    }\r\n}\n\nconst TRANSITION = 'transition';\r\nconst ANIMATION = 'animation';\r\n// DOM Transition is a higher-order-component based on the platform-agnostic\r\n// base Transition component, with DOM-specific logic.\r\nconst Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);\r\nTransition.displayName = 'Transition';\r\nconst DOMTransitionPropsValidators = {\r\n    name: String,\r\n    type: String,\r\n    css: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n    duration: [String, Number, Object],\r\n    enterFromClass: String,\r\n    enterActiveClass: String,\r\n    enterToClass: String,\r\n    appearFromClass: String,\r\n    appearActiveClass: String,\r\n    appearToClass: String,\r\n    leaveFromClass: String,\r\n    leaveActiveClass: String,\r\n    leaveToClass: String\r\n};\r\nconst TransitionPropsValidators = (Transition.props =\r\n    /*#__PURE__*/ extend({}, BaseTransition.props, DOMTransitionPropsValidators));\r\n/**\r\n * #3227 Incoming hooks may be merged into arrays when wrapping Transition\r\n * with custom HOCs.\r\n */\r\nconst callHook = (hook, args = []) => {\r\n    if (isArray(hook)) {\r\n        hook.forEach(h => h(...args));\r\n    }\r\n    else if (hook) {\r\n        hook(...args);\r\n    }\r\n};\r\n/**\r\n * Check if a hook expects a callback (2nd arg), which means the user\r\n * intends to explicitly control the end of the transition.\r\n */\r\nconst hasExplicitCallback = (hook) => {\r\n    return hook\r\n        ? isArray(hook)\r\n            ? hook.some(h => h.length > 1)\r\n            : hook.length > 1\r\n        : false;\r\n};\r\nfunction resolveTransitionProps(rawProps) {\r\n    const baseProps = {};\r\n    for (const key in rawProps) {\r\n        if (!(key in DOMTransitionPropsValidators)) {\r\n            baseProps[key] = rawProps[key];\r\n        }\r\n    }\r\n    if (rawProps.css === false) {\r\n        return baseProps;\r\n    }\r\n    const { name = 'v', type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;\r\n    const durations = normalizeDuration(duration);\r\n    const enterDuration = durations && durations[0];\r\n    const leaveDuration = durations && durations[1];\r\n    const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;\r\n    const finishEnter = (el, isAppear, done) => {\r\n        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\r\n        done && done();\r\n    };\r\n    const finishLeave = (el, done) => {\r\n        removeTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveActiveClass);\r\n        done && done();\r\n    };\r\n    const makeEnterHook = (isAppear) => {\r\n        return (el, done) => {\r\n            const hook = isAppear ? onAppear : onEnter;\r\n            const resolve = () => finishEnter(el, isAppear, done);\r\n            callHook(hook, [el, resolve]);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\r\n                addTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n                if (!hasExplicitCallback(hook)) {\r\n                    whenTransitionEnds(el, type, enterDuration, resolve);\r\n                }\r\n            });\r\n        };\r\n    };\r\n    return extend(baseProps, {\r\n        onBeforeEnter(el) {\r\n            callHook(onBeforeEnter, [el]);\r\n            addTransitionClass(el, enterFromClass);\r\n            addTransitionClass(el, enterActiveClass);\r\n        },\r\n        onBeforeAppear(el) {\r\n            callHook(onBeforeAppear, [el]);\r\n            addTransitionClass(el, appearFromClass);\r\n            addTransitionClass(el, appearActiveClass);\r\n        },\r\n        onEnter: makeEnterHook(false),\r\n        onAppear: makeEnterHook(true),\r\n        onLeave(el, done) {\r\n            const resolve = () => finishLeave(el, done);\r\n            addTransitionClass(el, leaveFromClass);\r\n            // force reflow so *-leave-from classes immediately take effect (#2593)\r\n            forceReflow();\r\n            addTransitionClass(el, leaveActiveClass);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, leaveFromClass);\r\n                addTransitionClass(el, leaveToClass);\r\n                if (!hasExplicitCallback(onLeave)) {\r\n                    whenTransitionEnds(el, type, leaveDuration, resolve);\r\n                }\r\n            });\r\n            callHook(onLeave, [el, resolve]);\r\n        },\r\n        onEnterCancelled(el) {\r\n            finishEnter(el, false);\r\n            callHook(onEnterCancelled, [el]);\r\n        },\r\n        onAppearCancelled(el) {\r\n            finishEnter(el, true);\r\n            callHook(onAppearCancelled, [el]);\r\n        },\r\n        onLeaveCancelled(el) {\r\n            finishLeave(el);\r\n            callHook(onLeaveCancelled, [el]);\r\n        }\r\n    });\r\n}\r\nfunction normalizeDuration(duration) {\r\n    if (duration == null) {\r\n        return null;\r\n    }\r\n    else if (isObject(duration)) {\r\n        return [NumberOf(duration.enter), NumberOf(duration.leave)];\r\n    }\r\n    else {\r\n        const n = NumberOf(duration);\r\n        return [n, n];\r\n    }\r\n}\r\nfunction NumberOf(val) {\r\n    const res = toNumber(val);\r\n    if ((process.env.NODE_ENV !== 'production'))\r\n        validateDuration(res);\r\n    return res;\r\n}\r\nfunction validateDuration(val) {\r\n    if (typeof val !== 'number') {\r\n        warn(`<transition> explicit duration is not a valid number - ` +\r\n            `got ${JSON.stringify(val)}.`);\r\n    }\r\n    else if (isNaN(val)) {\r\n        warn(`<transition> explicit duration is NaN - ` +\r\n            'the duration expression might be incorrect.');\r\n    }\r\n}\r\nfunction addTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.add(c));\r\n    (el._vtc ||\r\n        (el._vtc = new Set())).add(cls);\r\n}\r\nfunction removeTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.remove(c));\r\n    const { _vtc } = el;\r\n    if (_vtc) {\r\n        _vtc.delete(cls);\r\n        if (!_vtc.size) {\r\n            el._vtc = undefined;\r\n        }\r\n    }\r\n}\r\nfunction nextFrame(cb) {\r\n    requestAnimationFrame(() => {\r\n        requestAnimationFrame(cb);\r\n    });\r\n}\r\nlet endId = 0;\r\nfunction whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {\r\n    const id = (el._endId = ++endId);\r\n    const resolveIfNotStale = () => {\r\n        if (id === el._endId) {\r\n            resolve();\r\n        }\r\n    };\r\n    if (explicitTimeout) {\r\n        return setTimeout(resolveIfNotStale, explicitTimeout);\r\n    }\r\n    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);\r\n    if (!type) {\r\n        return resolve();\r\n    }\r\n    const endEvent = type + 'end';\r\n    let ended = 0;\r\n    const end = () => {\r\n        el.removeEventListener(endEvent, onEnd);\r\n        resolveIfNotStale();\r\n    };\r\n    const onEnd = (e) => {\r\n        if (e.target === el && ++ended >= propCount) {\r\n            end();\r\n        }\r\n    };\r\n    setTimeout(() => {\r\n        if (ended < propCount) {\r\n            end();\r\n        }\r\n    }, timeout + 1);\r\n    el.addEventListener(endEvent, onEnd);\r\n}\r\nfunction getTransitionInfo(el, expectedType) {\r\n    const styles = window.getComputedStyle(el);\r\n    // JSDOM may return undefined for transition properties\r\n    const getStyleProperties = (key) => (styles[key] || '').split(', ');\r\n    const transitionDelays = getStyleProperties(TRANSITION + 'Delay');\r\n    const transitionDurations = getStyleProperties(TRANSITION + 'Duration');\r\n    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n    const animationDelays = getStyleProperties(ANIMATION + 'Delay');\r\n    const animationDurations = getStyleProperties(ANIMATION + 'Duration');\r\n    const animationTimeout = getTimeout(animationDelays, animationDurations);\r\n    let type = null;\r\n    let timeout = 0;\r\n    let propCount = 0;\r\n    /* istanbul ignore if */\r\n    if (expectedType === TRANSITION) {\r\n        if (transitionTimeout > 0) {\r\n            type = TRANSITION;\r\n            timeout = transitionTimeout;\r\n            propCount = transitionDurations.length;\r\n        }\r\n    }\r\n    else if (expectedType === ANIMATION) {\r\n        if (animationTimeout > 0) {\r\n            type = ANIMATION;\r\n            timeout = animationTimeout;\r\n            propCount = animationDurations.length;\r\n        }\r\n    }\r\n    else {\r\n        timeout = Math.max(transitionTimeout, animationTimeout);\r\n        type =\r\n            timeout > 0\r\n                ? transitionTimeout > animationTimeout\r\n                    ? TRANSITION\r\n                    : ANIMATION\r\n                : null;\r\n        propCount = type\r\n            ? type === TRANSITION\r\n                ? transitionDurations.length\r\n                : animationDurations.length\r\n            : 0;\r\n    }\r\n    const hasTransform = type === TRANSITION &&\r\n        /\\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);\r\n    return {\r\n        type,\r\n        timeout,\r\n        propCount,\r\n        hasTransform\r\n    };\r\n}\r\nfunction getTimeout(delays, durations) {\r\n    while (delays.length < durations.length) {\r\n        delays = delays.concat(delays);\r\n    }\r\n    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));\r\n}\r\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer\r\n// numbers in a locale-dependent way, using a comma instead of a dot.\r\n// If comma is not replaced with a dot, the input will be rounded down\r\n// (i.e. acting as a floor function) causing unexpected behaviors\r\nfunction toMs(s) {\r\n    return Number(s.slice(0, -1).replace(',', '.')) * 1000;\r\n}\r\n// synchronously force layout to put elements into a certain state\r\nfunction forceReflow() {\r\n    return document.body.offsetHeight;\r\n}\n\nconst positionMap = new WeakMap();\r\nconst newPositionMap = new WeakMap();\r\nconst TransitionGroupImpl = {\r\n    name: 'TransitionGroup',\r\n    props: /*#__PURE__*/ extend({}, TransitionPropsValidators, {\r\n        tag: String,\r\n        moveClass: String\r\n    }),\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevChildren;\r\n        let children;\r\n        onUpdated(() => {\r\n            // children is guaranteed to exist after initial render\r\n            if (!prevChildren.length) {\r\n                return;\r\n            }\r\n            const moveClass = props.moveClass || `${props.name || 'v'}-move`;\r\n            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\r\n                return;\r\n            }\r\n            // we divide the work into three loops to avoid mixing DOM reads and writes\r\n            // in each iteration - which helps prevent layout thrashing.\r\n            prevChildren.forEach(callPendingCbs);\r\n            prevChildren.forEach(recordPosition);\r\n            const movedChildren = prevChildren.filter(applyTranslation);\r\n            // force reflow to put everything in position\r\n            forceReflow();\r\n            movedChildren.forEach(c => {\r\n                const el = c.el;\r\n                const style = el.style;\r\n                addTransitionClass(el, moveClass);\r\n                style.transform = style.webkitTransform = style.transitionDuration = '';\r\n                const cb = (el._moveCb = (e) => {\r\n                    if (e && e.target !== el) {\r\n                        return;\r\n                    }\r\n                    if (!e || /transform$/.test(e.propertyName)) {\r\n                        el.removeEventListener('transitionend', cb);\r\n                        el._moveCb = null;\r\n                        removeTransitionClass(el, moveClass);\r\n                    }\r\n                });\r\n                el.addEventListener('transitionend', cb);\r\n            });\r\n        });\r\n        return () => {\r\n            const rawProps = toRaw(props);\r\n            const cssTransitionProps = resolveTransitionProps(rawProps);\r\n            let tag = rawProps.tag || Fragment;\r\n            prevChildren = children;\r\n            children = slots.default ? getTransitionRawChildren(slots.default()) : [];\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (child.key != null) {\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`<TransitionGroup> children must be keyed.`);\r\n                }\r\n            }\r\n            if (prevChildren) {\r\n                for (let i = 0; i < prevChildren.length; i++) {\r\n                    const child = prevChildren[i];\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                    positionMap.set(child, child.el.getBoundingClientRect());\r\n                }\r\n            }\r\n            return createVNode(tag, null, children);\r\n        };\r\n    }\r\n};\r\nconst TransitionGroup = TransitionGroupImpl;\r\nfunction callPendingCbs(c) {\r\n    const el = c.el;\r\n    if (el._moveCb) {\r\n        el._moveCb();\r\n    }\r\n    if (el._enterCb) {\r\n        el._enterCb();\r\n    }\r\n}\r\nfunction recordPosition(c) {\r\n    newPositionMap.set(c, c.el.getBoundingClientRect());\r\n}\r\nfunction applyTranslation(c) {\r\n    const oldPos = positionMap.get(c);\r\n    const newPos = newPositionMap.get(c);\r\n    const dx = oldPos.left - newPos.left;\r\n    const dy = oldPos.top - newPos.top;\r\n    if (dx || dy) {\r\n        const s = c.el.style;\r\n        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;\r\n        s.transitionDuration = '0s';\r\n        return c;\r\n    }\r\n}\r\nfunction hasCSSTransform(el, root, moveClass) {\r\n    // Detect whether an element with the move class applied has\r\n    // CSS transitions. Since the element may be inside an entering\r\n    // transition at this very moment, we make a clone of it and remove\r\n    // all other transition classes applied to ensure only the move class\r\n    // is applied.\r\n    const clone = el.cloneNode();\r\n    if (el._vtc) {\r\n        el._vtc.forEach(cls => {\r\n            cls.split(/\\s+/).forEach(c => c && clone.classList.remove(c));\r\n        });\r\n    }\r\n    moveClass.split(/\\s+/).forEach(c => c && clone.classList.add(c));\r\n    clone.style.display = 'none';\r\n    const container = (root.nodeType === 1 ? root : root.parentNode);\r\n    container.appendChild(clone);\r\n    const { hasTransform } = getTransitionInfo(clone);\r\n    container.removeChild(clone);\r\n    return hasTransform;\r\n}\n\nconst getModelAssigner = (vnode) => {\r\n    const fn = vnode.props['onUpdate:modelValue'];\r\n    return isArray(fn) ? value => invokeArrayFns(fn, value) : fn;\r\n};\r\nfunction onCompositionStart(e) {\r\n    e.target.composing = true;\r\n}\r\nfunction onCompositionEnd(e) {\r\n    const target = e.target;\r\n    if (target.composing) {\r\n        target.composing = false;\r\n        trigger(target, 'input');\r\n    }\r\n}\r\nfunction trigger(el, type) {\r\n    const e = document.createEvent('HTMLEvents');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n}\r\n// We are exporting the v-model runtime directly as vnode hooks so that it can\r\n// be tree-shaken in case v-model is never used.\r\nconst vModelText = {\r\n    created(el, { modifiers: { lazy, trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        const castToNumber = number || (vnode.props && vnode.props.type === 'number');\r\n        addEventListener(el, lazy ? 'change' : 'input', e => {\r\n            if (e.target.composing)\r\n                return;\r\n            let domValue = el.value;\r\n            if (trim) {\r\n                domValue = domValue.trim();\r\n            }\r\n            else if (castToNumber) {\r\n                domValue = toNumber(domValue);\r\n            }\r\n            el._assign(domValue);\r\n        });\r\n        if (trim) {\r\n            addEventListener(el, 'change', () => {\r\n                el.value = el.value.trim();\r\n            });\r\n        }\r\n        if (!lazy) {\r\n            addEventListener(el, 'compositionstart', onCompositionStart);\r\n            addEventListener(el, 'compositionend', onCompositionEnd);\r\n            // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n            // switching focus before confirming composition choice\r\n            // this also fixes the issue where some browsers e.g. iOS Chrome\r\n            // fires \"change\" instead of \"input\" on autocomplete.\r\n            addEventListener(el, 'change', onCompositionEnd);\r\n        }\r\n    },\r\n    // set value on mounted so it's after min/max for type=\"range\"\r\n    mounted(el, { value }) {\r\n        el.value = value == null ? '' : value;\r\n    },\r\n    beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        // avoid clearing unresolved text. #2302\r\n        if (el.composing)\r\n            return;\r\n        if (document.activeElement === el) {\r\n            if (lazy) {\r\n                return;\r\n            }\r\n            if (trim && el.value.trim() === value) {\r\n                return;\r\n            }\r\n            if ((number || el.type === 'number') && toNumber(el.value) === value) {\r\n                return;\r\n            }\r\n        }\r\n        const newValue = value == null ? '' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n    }\r\n};\r\nconst vModelCheckbox = {\r\n    // #4096 array checkboxes need to be deep traversed\r\n    deep: true,\r\n    created(el, _, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            const modelValue = el._modelValue;\r\n            const elementValue = getValue(el);\r\n            const checked = el.checked;\r\n            const assign = el._assign;\r\n            if (isArray(modelValue)) {\r\n                const index = looseIndexOf(modelValue, elementValue);\r\n                const found = index !== -1;\r\n                if (checked && !found) {\r\n                    assign(modelValue.concat(elementValue));\r\n                }\r\n                else if (!checked && found) {\r\n                    const filtered = [...modelValue];\r\n                    filtered.splice(index, 1);\r\n                    assign(filtered);\r\n                }\r\n            }\r\n            else if (isSet(modelValue)) {\r\n                const cloned = new Set(modelValue);\r\n                if (checked) {\r\n                    cloned.add(elementValue);\r\n                }\r\n                else {\r\n                    cloned.delete(elementValue);\r\n                }\r\n                assign(cloned);\r\n            }\r\n            else {\r\n                assign(getCheckboxValue(el, checked));\r\n            }\r\n        });\r\n    },\r\n    // set initial checked on mount to wait for true-value/false-value\r\n    mounted: setChecked,\r\n    beforeUpdate(el, binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        setChecked(el, binding, vnode);\r\n    }\r\n};\r\nfunction setChecked(el, { value, oldValue }, vnode) {\r\n    el._modelValue = value;\r\n    if (isArray(value)) {\r\n        el.checked = looseIndexOf(value, vnode.props.value) > -1;\r\n    }\r\n    else if (isSet(value)) {\r\n        el.checked = value.has(vnode.props.value);\r\n    }\r\n    else if (value !== oldValue) {\r\n        el.checked = looseEqual(value, getCheckboxValue(el, true));\r\n    }\r\n}\r\nconst vModelRadio = {\r\n    created(el, { value }, vnode) {\r\n        el.checked = looseEqual(value, vnode.props.value);\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            el._assign(getValue(el));\r\n        });\r\n    },\r\n    beforeUpdate(el, { value, oldValue }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        if (value !== oldValue) {\r\n            el.checked = looseEqual(value, vnode.props.value);\r\n        }\r\n    }\r\n};\r\nconst vModelSelect = {\r\n    // <select multiple> value need to be deep traversed\r\n    deep: true,\r\n    created(el, { value, modifiers: { number } }, vnode) {\r\n        const isSetModel = isSet(value);\r\n        addEventListener(el, 'change', () => {\r\n            const selectedVal = Array.prototype.filter\r\n                .call(el.options, (o) => o.selected)\r\n                .map((o) => number ? toNumber(getValue(o)) : getValue(o));\r\n            el._assign(el.multiple\r\n                ? isSetModel\r\n                    ? new Set(selectedVal)\r\n                    : selectedVal\r\n                : selectedVal[0]);\r\n        });\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    // set value in mounted & updated because <select> relies on its children\r\n    // <option>s.\r\n    mounted(el, { value }) {\r\n        setSelected(el, value);\r\n    },\r\n    beforeUpdate(el, _binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    updated(el, { value }) {\r\n        setSelected(el, value);\r\n    }\r\n};\r\nfunction setSelected(el, value) {\r\n    const isMultiple = el.multiple;\r\n    if (isMultiple && !isArray(value) && !isSet(value)) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`<select multiple v-model> expects an Array or Set value for its binding, ` +\r\n                `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);\r\n        return;\r\n    }\r\n    for (let i = 0, l = el.options.length; i < l; i++) {\r\n        const option = el.options[i];\r\n        const optionValue = getValue(option);\r\n        if (isMultiple) {\r\n            if (isArray(value)) {\r\n                option.selected = looseIndexOf(value, optionValue) > -1;\r\n            }\r\n            else {\r\n                option.selected = value.has(optionValue);\r\n            }\r\n        }\r\n        else {\r\n            if (looseEqual(getValue(option), value)) {\r\n                if (el.selectedIndex !== i)\r\n                    el.selectedIndex = i;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (!isMultiple && el.selectedIndex !== -1) {\r\n        el.selectedIndex = -1;\r\n    }\r\n}\r\n// retrieve raw value set via :value bindings\r\nfunction getValue(el) {\r\n    return '_value' in el ? el._value : el.value;\r\n}\r\n// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings\r\nfunction getCheckboxValue(el, checked) {\r\n    const key = checked ? '_trueValue' : '_falseValue';\r\n    return key in el ? el[key] : checked;\r\n}\r\nconst vModelDynamic = {\r\n    created(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'created');\r\n    },\r\n    mounted(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'mounted');\r\n    },\r\n    beforeUpdate(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');\r\n    },\r\n    updated(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'updated');\r\n    }\r\n};\r\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\r\n    let modelToUse;\r\n    switch (el.tagName) {\r\n        case 'SELECT':\r\n            modelToUse = vModelSelect;\r\n            break;\r\n        case 'TEXTAREA':\r\n            modelToUse = vModelText;\r\n            break;\r\n        default:\r\n            switch (vnode.props && vnode.props.type) {\r\n                case 'checkbox':\r\n                    modelToUse = vModelCheckbox;\r\n                    break;\r\n                case 'radio':\r\n                    modelToUse = vModelRadio;\r\n                    break;\r\n                default:\r\n                    modelToUse = vModelText;\r\n            }\r\n    }\r\n    const fn = modelToUse[hook];\r\n    fn && fn(el, binding, vnode, prevVNode);\r\n}\n\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => 'button' in e && e.button !== 0,\r\n    middle: e => 'button' in e && e.button !== 1,\r\n    right: e => 'button' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withModifiers = (fn, modifiers) => {\r\n    return (event, ...args) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event, ...args);\r\n    };\r\n};\r\n// Kept for 2.x compat.\r\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\r\nconst keyNames = {\r\n    esc: 'escape',\r\n    space: ' ',\r\n    up: 'arrow-up',\r\n    left: 'arrow-left',\r\n    right: 'arrow-right',\r\n    down: 'arrow-down',\r\n    delete: 'backspace'\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withKeys = (fn, modifiers) => {\r\n    return (event) => {\r\n        if (!('key' in event)) {\r\n            return;\r\n        }\r\n        const eventKey = hyphenate(event.key);\r\n        if (modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\r\n            return fn(event);\r\n        }\r\n    };\r\n};\n\nconst vShow = {\r\n    beforeMount(el, { value }, { transition }) {\r\n        el._vod = el.style.display === 'none' ? '' : el.style.display;\r\n        if (transition && value) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    mounted(el, { value }, { transition }) {\r\n        if (transition && value) {\r\n            transition.enter(el);\r\n        }\r\n    },\r\n    updated(el, { value, oldValue }, { transition }) {\r\n        if (!value === !oldValue)\r\n            return;\r\n        if (transition) {\r\n            if (value) {\r\n                transition.beforeEnter(el);\r\n                setDisplay(el, true);\r\n                transition.enter(el);\r\n            }\r\n            else {\r\n                transition.leave(el, () => {\r\n                    setDisplay(el, false);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    beforeUnmount(el, { value }) {\r\n        setDisplay(el, value);\r\n    }\r\n};\r\nfunction setDisplay(el, value) {\r\n    el.style.display = value ? el._vod : 'none';\r\n}\n\nconst rendererOptions = extend({ patchProp }, nodeOps);\r\n// lazy create the renderer - this makes core renderer logic tree-shakable\r\n// in case the user only imports reactivity utilities from Vue.\r\nlet renderer;\r\nlet enabledHydration = false;\r\nfunction ensureRenderer() {\r\n    return (renderer ||\r\n        (renderer = createRenderer(rendererOptions)));\r\n}\r\nfunction ensureHydrationRenderer() {\r\n    renderer = enabledHydration\r\n        ? renderer\r\n        : createHydrationRenderer(rendererOptions);\r\n    enabledHydration = true;\r\n    return renderer;\r\n}\r\n// use explicit type casts here to avoid import() calls in rolled-up d.ts\r\nconst render = ((...args) => {\r\n    ensureRenderer().render(...args);\r\n});\r\nconst hydrate = ((...args) => {\r\n    ensureHydrationRenderer().hydrate(...args);\r\n});\r\nconst createApp = ((...args) => {\r\n    const app = ensureRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n        injectCompilerOptionsCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (!container)\r\n            return;\r\n        const component = app._component;\r\n        if (!isFunction(component) && !component.render && !component.template) {\r\n            // __UNSAFE__\r\n            // Reason: potential execution of JS expressions in in-DOM template.\r\n            // The user must make sure the in-DOM template is trusted. If it's\r\n            // rendered by the server, the template should not contain any user data.\r\n            component.template = container.innerHTML;\r\n        }\r\n        // clear content before mounting\r\n        container.innerHTML = '';\r\n        const proxy = mount(container, false, container instanceof SVGElement);\r\n        if (container instanceof Element) {\r\n            container.removeAttribute('v-cloak');\r\n            container.setAttribute('data-v-app', '');\r\n        }\r\n        return proxy;\r\n    };\r\n    return app;\r\n});\r\nconst createSSRApp = ((...args) => {\r\n    const app = ensureHydrationRenderer().createApp(...args);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        injectNativeTagCheck(app);\r\n        injectCompilerOptionsCheck(app);\r\n    }\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (container) {\r\n            return mount(container, true, container instanceof SVGElement);\r\n        }\r\n    };\r\n    return app;\r\n});\r\nfunction injectNativeTagCheck(app) {\r\n    // Inject `isNativeTag`\r\n    // this is used for component name validation (dev only)\r\n    Object.defineProperty(app.config, 'isNativeTag', {\r\n        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),\r\n        writable: false\r\n    });\r\n}\r\n// dev only\r\nfunction injectCompilerOptionsCheck(app) {\r\n    if (isRuntimeOnly()) {\r\n        const isCustomElement = app.config.isCustomElement;\r\n        Object.defineProperty(app.config, 'isCustomElement', {\r\n            get() {\r\n                return isCustomElement;\r\n            },\r\n            set() {\r\n                warn(`The \\`isCustomElement\\` config option is deprecated. Use ` +\r\n                    `\\`compilerOptions.isCustomElement\\` instead.`);\r\n            }\r\n        });\r\n        const compilerOptions = app.config.compilerOptions;\r\n        const msg = `The \\`compilerOptions\\` config option is only respected when using ` +\r\n            `a build of Vue.js that includes the runtime compiler (aka \"full build\"). ` +\r\n            `Since you are using the runtime-only build, \\`compilerOptions\\` ` +\r\n            `must be passed to \\`@vue/compiler-dom\\` in the build setup instead.\\n` +\r\n            `- For vue-loader: pass it via vue-loader's \\`compilerOptions\\` loader option.\\n` +\r\n            `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\\n` +\r\n            `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;\r\n        Object.defineProperty(app.config, 'compilerOptions', {\r\n            get() {\r\n                warn(msg);\r\n                return compilerOptions;\r\n            },\r\n            set() {\r\n                warn(msg);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction normalizeContainer(container) {\r\n    if (isString(container)) {\r\n        const res = document.querySelector(container);\r\n        if ((process.env.NODE_ENV !== 'production') && !res) {\r\n            warn(`Failed to mount app: mount target selector \"${container}\" returned null.`);\r\n        }\r\n        return res;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        window.ShadowRoot &&\r\n        container instanceof window.ShadowRoot &&\r\n        container.mode === 'closed') {\r\n        warn(`mounting on a ShadowRoot with \\`{mode: \"closed\"}\\` may lead to unpredictable bugs`);\r\n    }\r\n    return container;\r\n}\n\nexport { Transition, TransitionGroup, VueElement, createApp, createSSRApp, defineCustomElement, defineSSRCustomElement, hydrate, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers };\n", "// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n", "// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n", "// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment> | void) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n}\n", "// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n", "// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with \u201CPipeline\u201D or \u201CPrimaryTopic\u201D\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField:\n      \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n", "// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype SyntaxPlugin = \"flow\" | \"typescript\" | \"jsx\" | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (number, ErrorTemplate, ...any) => void;\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    { code, reasonCode, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(pos, { code, reasonCode }, template, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n", "// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const value = stmt.expression.value;\n      const directive = super.stmtToDirective(stmt);\n\n      // Record the expression value as in estree mode we want\n      // the stmt to have the real value e.g. (\"use strict\") and\n      // not the raw value e.g. (\"use\\\\x20strict\")\n      this.addExtra(directive.value, \"expressionValue\", value);\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n", "// @flow\n\n// The token context is used to track whether the apostrophe \"`\"\n// starts or ends a string template\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true),\n};\n", "// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the \u201Cargument\u201D subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  regexp: createToken(\"regexp\", { startsExpr }),\n  string: createToken(\"string\", { startsExpr }),\n  name: createToken(\"name\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // This is only needed to support % as a Hack-pipe topic token. If the proposal\n  // ends up choosing a different token, it can be merged with tt.assign.\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n", "// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n", "// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ParsingError, ErrorTemplate } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false\n        ? false\n        : options.strictMode === true\n        ? true\n        : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorTemplate> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n", "// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: ErrorTemplate | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    if (curContext === ct.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: ErrorTemplate) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word) || tt.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        this.state.start,\n        Errors.InvalidEscapedReservedWord,\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // the prevType is required by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {\n    // Token-specific context update code\n    // Note that we should avoid accessing `this.prodParam` in context update,\n    // because it is executed immediately when last token is consumed, which may be\n    // before `this.prodParam` is updated. e.g.\n    // ```\n    // function *g() { () => yield / 2 }\n    // ```\n    // When `=>` is eaten, the context update of `yield` is executed, however,\n    // `this.prodParam` still has `[Yield]` production because it is not yet updated\n    const { context, type } = this.state;\n    switch (type) {\n      case tt.braceR:\n        context.pop();\n        break;\n      // we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\n      // ideally only dollarBraceL \"${\" needs a non-template context\n      // in order to indicate that the last \"`\" in `${`\" starts a new string template\n      // inside a template element within outer string template.\n      // but when we popped such context in `}`, we lost track of whether this\n      // `}` matches a `${` or other tokens matching `}`, so we have to push\n      // such context in every token that `}` will match.\n      case tt.braceL:\n      case tt.braceHashL:\n      case tt.dollarBraceL:\n        context.push(ct.brace);\n        break;\n      case tt.backQuote:\n        if (context[context.length - 1] === ct.template) {\n          context.pop();\n        } else {\n          context.push(ct.template);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n}\n", "// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n", "// @flow\n\nimport type { ErrorTemplate, raiseFunction } from \"../parser/error\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ ErrorTemplate> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, template: ErrorTemplate) {\n    this.errors.set(pos, template);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (template: ErrorTemplate, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, template);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    pos: number,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((template, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, template);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n", "// @flow\n\nimport {\n  isTokenType,\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, template?: ErrorTemplate): void {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message,\n      });\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: ErrorTemplate | TokenType = {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\",\n    },\n  ): empty {\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(\n          // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n          messageOrType,\n        )}\"`,\n      };\n    }\n\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto, optionalParameters } =\n      refExpressionErrors;\n    if (!andThrow) {\n      return (\n        shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0\n      );\n    }\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      tokenIsKeyword(this.state.type) ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/proposal-class-fields/#sec-private-names-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssign**: track initializer `=` position\n * - **doubleProto**: track the duplicate `__proto__` key position\n * - **optionalParameters**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n  optionalParameters = -1;\n}\n", "// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n", "// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart, isKeyword } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: { type: TokenType, value: any }): boolean {\n  return (\n    (state.type === tt.name || tokenIsKeyword(state.type)) &&\n    state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloPos = this.state.start;\n      this.next(); // eat `%`\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloPos + 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const lookahead = this.lookahead();\n        if (lookahead.type === tt.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(this.state.pos, Errors.InvalidIdentifier, fullWord);\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.PatternIsOptional);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentIsString = this.match(tt.string);\n      const firstIdent = this.parseModuleExportName();\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !tokenIsKeyword(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          (this.match(tt.name) || tokenIsKeyword(this.state.type))\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (firstIdentIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              specifier.start,\n              Errors.ImportBindingIsString,\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          specifier.start,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const curContext = context[context.length - 1];\n        if (curContext === tc.j_oTag) {\n          context.length -= 2;\n        } else if (curContext === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n", "// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport type { LookaheadState } from \"../../tokenizer/state\";\nimport State from \"../../tokenizer/state\";\n\ntype JSXLookaheadState = LookaheadState & { inPropertyName: boolean };\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore the contexts do always exist.\ntc.j_oTag = new TokContext(\"<tag\");\ntc.j_cTag = new TokContext(\"</tag\");\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(this.state.pos, {\n                code: ErrorCodes.SyntaxError,\n                reasonCode: \"UnexpectedToken\",\n                template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    createLookaheadState(state: State): JSXLookaheadState {\n      const lookaheadState = ((super.createLookaheadState(\n        state,\n      ): any): JSXLookaheadState);\n      lookaheadState.inPropertyName = state.inPropertyName;\n      return lookaheadState;\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      super.updateContext(prevType);\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.exprAllowed = false;\n      } else if (type === tt.jsxTagStart) {\n        context.push(\n          tc.j_expr, // treat as beginning of JSX expression\n          tc.j_oTag, // start opening tag context\n        );\n      } else if (type === tt.jsxTagEnd) {\n        const out = context.pop();\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.exprAllowed = context[context.length - 1] === tc.j_expr;\n        } else {\n          this.state.exprAllowed = true;\n        }\n      } else if (\n        tokenIsKeyword(type) &&\n        (prevType === tt.dot || prevType === tt.questionDot)\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        this.state.exprAllowed = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { tokenOperatorPrecedence, tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (pos, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n        }\n      };\n      const incompatible = (pos, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            enforceOrder(startPos, modifier, modifier, \"override\");\n            enforceOrder(startPos, modifier, modifier, \"static\");\n            enforceOrder(startPos, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          } else {\n            enforceOrder(startPos, modifier, \"static\", \"readonly\");\n            enforceOrder(startPos, modifier, \"static\", \"override\");\n            enforceOrder(startPos, modifier, \"override\", \"readonly\");\n            enforceOrder(startPos, modifier, \"abstract\", \"override\");\n\n            incompatible(startPos, modifier, \"declare\", \"override\");\n            incompatible(startPos, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.isRelational(\"<\")) {\n          this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        if (method.kind === \"get\") {\n          if (method.parameters.length > 0) {\n            this.raise(this.state.pos, Errors.BadGetterArity);\n            if (this.isThisParam(method.parameters[0])) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method.parameters.length !== 1) {\n            this.raise(this.state.pos, Errors.BadSetterArity);\n          } else {\n            const firstParameter = method.parameters[0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveRestParameter,\n              );\n            }\n          }\n          if (method.typeAnnotation) {\n            this.raise(\n              method.typeAnnotation.start,\n              TSErrors.SetAccesorCannotHaveReturnType,\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (!this.match(tt.name) || this.state.value !== \"asserts\") {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return this.isContextual(\"abstract\") && this.lookahead().type === tt._new;\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (this.match(tt.name)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(this.state.start, TSErrors.MissingInterfaceName);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(\"intrinsic\") &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt.name: {\n            const value = this.state.value;\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, /* next */ true);\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || this.match(tt.name))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.match(tt.name)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      if (this.isRelational(\"<\")) {\n        let missingParenErrorPos;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorPos = this.state.pos;\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorPos) {\n          this.unexpected(missingParenErrorPos, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\") &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          TSErrors.TypeImportCannotSpecifyDefaultAndNamed,\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(\"type\") &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(\"static\") &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n        if ((member: any).override) {\n          this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(member.start, TSErrors.OverrideNotInSubClass);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      if (\n        isDeclare &&\n        (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          this.state.start,\n          TSErrors.AbstractPropertyHasInitializer,\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(expr.start, Errors.InvalidLhs, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close) {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n      } else {\n        super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(\"interface\")) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n  };\n", "// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nconst PlaceHolderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n", "import type Parser from \"../parser\";\nimport { tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n", "// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash =\n      hasPlugin(plugins, \"recordAndTuple\") &&\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n", "// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n", "// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n", "// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts \u2014 that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsKeyword,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParameters =\n      resultError?.pos ?? this.state.start;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/proposal-private-fields-in-in\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n      const { start } = left;\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(start, Errors.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(\"yield\")) {\n                throw this.raise(\n                  this.state.start,\n                  Errors.PipeBodyIsTighter,\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { start } = this.state;\n\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        start,\n        Errors.PipeUnparenthesizedBody,\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(start, Errors.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (this.match(tt.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    const privateName =\n      !computed && this.match(tt.privateName) && this.state.value;\n    const property = computed\n      ? this.parseExpression()\n      : privateName\n      ? this.parsePrivateName()\n      : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    setInnerComments(node, call.innerComments);\n    // mark trailing comments of `async` to be inner comments\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression \u2014 either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        if (\n          this.isContextual(\"module\") &&\n          this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n          !this.hasFollowingLineBreak()\n        ) {\n          return this.parseModuleExpression();\n        }\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            this.resetPreviousNodeTrailingComments(id);\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            // If the next token begins with \"=\", commit to parsing an async\n            // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n            // expensive full-token lookahead on this common path.)\n            if (this.lookaheadCharCode() === charCodes.equalsTo) {\n              // although `id` is not used in async arrow unary function,\n              // we don't need to reset `async`'s trailing comments because\n              // it will be attached to the upcoming async arrow binding identifier\n              return this.parseAsyncArrowUnaryFunction(\n                this.startNodeAtNode(id),\n              );\n            } else {\n              // Otherwise, treat \"async\" as an identifier and let calling code\n              // deal with the current tt.name token.\n              return id;\n            }\n          } else if (this.match(tt._do)) {\n            this.resetPreviousNodeTrailingComments(id);\n            return this.parseDo(this.startNodeAtNode(id), true);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          this.state.start,\n          Errors.PrivateInExpectedIn,\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign:\n        if (\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" &&\n          this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\"\n        ) {\n          // If we find %= in an expression position, and the Hack-pipes proposal is active,\n          // then the % could be the topic token (e.g., in x |> %==y or x |> %===y), and so we\n          // reparse it as %.\n          // The next readToken() call will start parsing from =.\n\n          this.state.value = \"%\";\n          this.state.type = tt.modulo;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      // falls through\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          // A pipe-operator proposal is active,\n          // although its configuration might not match the current token\u2019s type.\n          node = this.startNode();\n          const start = this.state.start;\n          const tokenType = this.state.type;\n\n          // Consume the current token.\n          this.next();\n\n          // If the pipe-operator plugin\u2019s configuration matches the current token\u2019s type,\n          // then this will return `node`, will have been finished as a topic reference.\n          // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n          return this.finishTopicReference(\n            node,\n            start,\n            pipeProposal,\n            tokenType,\n          );\n        }\n      }\n\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin\u2019s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin\u2019s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    start: number,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      // The token matches the plugin\u2019s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      let nodeType;\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        // The proposal must otherwise be \"hack\",\n        // as enforced by testTopicReferenceConfiguration.\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        // The topic reference is not allowed in the current context:\n        // it is outside of a pipe body.\n        // Raise recoverable errors.\n        if (pipeProposal === \"smart\") {\n          this.raise(start, Errors.PrimaryTopicNotAllowed);\n        } else {\n          // In this case, `pipeProposal === \"hack\"` is true.\n          this.raise(start, Errors.PipeTopicUnbound);\n        }\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin\u2019s configuration.\n      throw this.raise(\n        start,\n        Errors.PipeTopicUnconfiguredToken,\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin\u2019s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration\u2019s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    start: number,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        const pluginTopicToken = this.getPluginOption(\n          \"pipelineOperator\",\n          \"topicToken\",\n        );\n        return tokenLabelName(tokenType) === pluginTopicToken;\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(start, Errors.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, Errors.UnexpectedPrivateField);\n      }\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrors.ImportMetaOutsideModule);\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParameters === -1\n            ? null\n            : refExpressionErrors.optionalParameters,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, Errors.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call \u2014 at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      const type = this.state.type;\n      (prop: $FlowFixMe).key =\n        type === tt.num ||\n        type === tt.string ||\n        type === tt.bigint ||\n        type === tt.decimal\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (tokenIsKeyword(type)) {\n      name = tokenLabelName(type);\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword(type), false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, Errors.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, Errors.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    return (\n      this.hasPrecedingLineBreak() ||\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      this.match(tt.plusMin) ||\n      this.match(tt.parenL) ||\n      this.match(tt.bracketL) ||\n      this.match(tt.backQuote) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      this.match(tt.regexp) ||\n      this.match(tt.slash) ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a Hack-style pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkHackPipeBodyEarlyErrors(startPos: number): void {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(startPos, Errors.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos: number): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, Errors.PipelineTopicUnused);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (proposal === \"smart\") {\n      // Reset the parser\u2019s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n}\n", "// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsLoop,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tt.privateName to tt.hash + tt.name for backward Babel 7 compat.\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (type === tt.privateName) {\n      if (!process.env.BABEL_8_BREAKING) {\n        const { loc, start, value, end } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(\n          i,\n          1,\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: getExportedToken(tt.hash),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc,\n          }),\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: getExportedToken(tt.name),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end,\n          }),\n        );\n        i++;\n        continue;\n      }\n    }\n    if (typeof type === \"number\") {\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        node.start,\n        Errors.IllegalBreakContinue,\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithUnescapedName =\n      this.match(tt.name) && !this.state.containsEsc;\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(init.start, Errors.ForOfLet);\n      } else if (\n        // `for await (async of []);` is allowed.\n        awaitAt === -1 &&\n        startsWithUnescapedName &&\n        init.type === \"Identifier\" &&\n        init.name === \"async\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(init.start, Errors.ForOfAsync);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual = this.match(tt.name) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, Errors.OverrideOnConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value, start } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(start, Errors.StaticPrototype);\n    }\n\n    if (type === tt.privateName && value === \"constructor\") {\n      this.raise(start, Errors.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(tt.string);\n      const local = this.parseModuleExportName();\n      node.local = local;\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          this.state.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    const importedIsString = this.match(tt.string);\n    specifier.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n", "// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n", "import { isString, hyphenate, babelParserDefaultPlugins, extend, isObject, NO, isArray, makeMap, isSymbol, NOOP, EMPTY_OBJ, capitalize, camelize as camelize$1, PatchFlagNames, slotFlagsText, isOn, isReservedProp, toHandlerKey } from '@vue/shared';\nexport { generateCodeFrame } from '@vue/shared';\nimport { parseExpression } from '@babel/parser';\n\nfunction defaultOnError(error) {\r\n    throw error;\r\n}\r\nfunction defaultOnWarn(msg) {\r\n    (process.env.NODE_ENV !== 'production') && console.warn(`[Vue warn] ${msg.message}`);\r\n}\r\nfunction createCompilerError(code, loc, messages, additionalMessage) {\r\n    const msg = (process.env.NODE_ENV !== 'production') || !true\r\n        ? (messages || errorMessages)[code] + (additionalMessage || ``)\r\n        : code;\r\n    const error = new SyntaxError(String(msg));\r\n    error.code = code;\r\n    error.loc = loc;\r\n    return error;\r\n}\r\nconst errorMessages = {\r\n    // parse errors\r\n    [0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */]: 'Illegal comment.',\r\n    [1 /* CDATA_IN_HTML_CONTENT */]: 'CDATA section is allowed only in XML context.',\r\n    [2 /* DUPLICATE_ATTRIBUTE */]: 'Duplicate attribute.',\r\n    [3 /* END_TAG_WITH_ATTRIBUTES */]: 'End tag cannot have attributes.',\r\n    [4 /* END_TAG_WITH_TRAILING_SOLIDUS */]: \"Illegal '/' in tags.\",\r\n    [5 /* EOF_BEFORE_TAG_NAME */]: 'Unexpected EOF in tag.',\r\n    [6 /* EOF_IN_CDATA */]: 'Unexpected EOF in CDATA section.',\r\n    [7 /* EOF_IN_COMMENT */]: 'Unexpected EOF in comment.',\r\n    [8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */]: 'Unexpected EOF in script.',\r\n    [9 /* EOF_IN_TAG */]: 'Unexpected EOF in tag.',\r\n    [10 /* INCORRECTLY_CLOSED_COMMENT */]: 'Incorrectly closed comment.',\r\n    [11 /* INCORRECTLY_OPENED_COMMENT */]: 'Incorrectly opened comment.',\r\n    [12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */]: \"Illegal tag name. Use '&lt;' to print '<'.\",\r\n    [13 /* MISSING_ATTRIBUTE_VALUE */]: 'Attribute value was expected.',\r\n    [14 /* MISSING_END_TAG_NAME */]: 'End tag name was expected.',\r\n    [15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */]: 'Whitespace was expected.',\r\n    [16 /* NESTED_COMMENT */]: \"Unexpected '<!--' in comment.\",\r\n    [17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */]: 'Attribute name cannot contain U+0022 (\"), U+0027 (\\'), and U+003C (<).',\r\n    [18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */]: 'Unquoted attribute value cannot contain U+0022 (\"), U+0027 (\\'), U+003C (<), U+003D (=), and U+0060 (`).',\r\n    [19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */]: \"Attribute name cannot start with '='.\",\r\n    [21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */]: \"'<?' is allowed only in XML context.\",\r\n    [20 /* UNEXPECTED_NULL_CHARACTER */]: `Unexpected null character.`,\r\n    [22 /* UNEXPECTED_SOLIDUS_IN_TAG */]: \"Illegal '/' in tags.\",\r\n    // Vue-specific parse errors\r\n    [23 /* X_INVALID_END_TAG */]: 'Invalid end tag.',\r\n    [24 /* X_MISSING_END_TAG */]: 'Element is missing end tag.',\r\n    [25 /* X_MISSING_INTERPOLATION_END */]: 'Interpolation end sign was not found.',\r\n    [27 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */]: 'End bracket for dynamic directive argument was not found. ' +\r\n        'Note that dynamic directive argument cannot contain spaces.',\r\n    [26 /* X_MISSING_DIRECTIVE_NAME */]: 'Legal directive name was expected.',\r\n    // transform errors\r\n    [28 /* X_V_IF_NO_EXPRESSION */]: `v-if/v-else-if is missing expression.`,\r\n    [29 /* X_V_IF_SAME_KEY */]: `v-if/else branches must use unique keys.`,\r\n    [30 /* X_V_ELSE_NO_ADJACENT_IF */]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,\r\n    [31 /* X_V_FOR_NO_EXPRESSION */]: `v-for is missing expression.`,\r\n    [32 /* X_V_FOR_MALFORMED_EXPRESSION */]: `v-for has invalid expression.`,\r\n    [33 /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */]: `<template v-for> key should be placed on the <template> tag.`,\r\n    [34 /* X_V_BIND_NO_EXPRESSION */]: `v-bind is missing expression.`,\r\n    [35 /* X_V_ON_NO_EXPRESSION */]: `v-on is missing expression.`,\r\n    [36 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */]: `Unexpected custom directive on <slot> outlet.`,\r\n    [37 /* X_V_SLOT_MIXED_SLOT_USAGE */]: `Mixed v-slot usage on both the component and nested <template>.` +\r\n        `When there are multiple named slots, all slots should use <template> ` +\r\n        `syntax to avoid scope ambiguity.`,\r\n    [38 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */]: `Duplicate slot names found. `,\r\n    [39 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */]: `Extraneous children found when component already has explicitly named ` +\r\n        `default slot. These children will be ignored.`,\r\n    [40 /* X_V_SLOT_MISPLACED */]: `v-slot can only be used on components or <template> tags.`,\r\n    [41 /* X_V_MODEL_NO_EXPRESSION */]: `v-model is missing expression.`,\r\n    [42 /* X_V_MODEL_MALFORMED_EXPRESSION */]: `v-model value must be a valid JavaScript member expression.`,\r\n    [43 /* X_V_MODEL_ON_SCOPE_VARIABLE */]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,\r\n    [44 /* X_INVALID_EXPRESSION */]: `Error parsing JavaScript expression: `,\r\n    [45 /* X_KEEP_ALIVE_INVALID_CHILDREN */]: `<KeepAlive> expects exactly one child component.`,\r\n    // generic errors\r\n    [46 /* X_PREFIX_ID_NOT_SUPPORTED */]: `\"prefixIdentifiers\" option is not supported in this build of compiler.`,\r\n    [47 /* X_MODULE_MODE_NOT_SUPPORTED */]: `ES module mode is not supported in this build of compiler.`,\r\n    [48 /* X_CACHE_HANDLER_NOT_SUPPORTED */]: `\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.`,\r\n    [49 /* X_SCOPE_ID_NOT_SUPPORTED */]: `\"scopeId\" option is only supported in module mode.`,\r\n    // just to fulfill types\r\n    [50 /* __EXTEND_POINT__ */]: ``\r\n};\n\nconst FRAGMENT = Symbol((process.env.NODE_ENV !== 'production') ? `Fragment` : ``);\r\nconst TELEPORT = Symbol((process.env.NODE_ENV !== 'production') ? `Teleport` : ``);\r\nconst SUSPENSE = Symbol((process.env.NODE_ENV !== 'production') ? `Suspense` : ``);\r\nconst KEEP_ALIVE = Symbol((process.env.NODE_ENV !== 'production') ? `KeepAlive` : ``);\r\nconst BASE_TRANSITION = Symbol((process.env.NODE_ENV !== 'production') ? `BaseTransition` : ``);\r\nconst OPEN_BLOCK = Symbol((process.env.NODE_ENV !== 'production') ? `openBlock` : ``);\r\nconst CREATE_BLOCK = Symbol((process.env.NODE_ENV !== 'production') ? `createBlock` : ``);\r\nconst CREATE_ELEMENT_BLOCK = Symbol((process.env.NODE_ENV !== 'production') ? `createElementBlock` : ``);\r\nconst CREATE_VNODE = Symbol((process.env.NODE_ENV !== 'production') ? `createVNode` : ``);\r\nconst CREATE_ELEMENT_VNODE = Symbol((process.env.NODE_ENV !== 'production') ? `createElementVNode` : ``);\r\nconst CREATE_COMMENT = Symbol((process.env.NODE_ENV !== 'production') ? `createCommentVNode` : ``);\r\nconst CREATE_TEXT = Symbol((process.env.NODE_ENV !== 'production') ? `createTextVNode` : ``);\r\nconst CREATE_STATIC = Symbol((process.env.NODE_ENV !== 'production') ? `createStaticVNode` : ``);\r\nconst RESOLVE_COMPONENT = Symbol((process.env.NODE_ENV !== 'production') ? `resolveComponent` : ``);\r\nconst RESOLVE_DYNAMIC_COMPONENT = Symbol((process.env.NODE_ENV !== 'production') ? `resolveDynamicComponent` : ``);\r\nconst RESOLVE_DIRECTIVE = Symbol((process.env.NODE_ENV !== 'production') ? `resolveDirective` : ``);\r\nconst RESOLVE_FILTER = Symbol((process.env.NODE_ENV !== 'production') ? `resolveFilter` : ``);\r\nconst WITH_DIRECTIVES = Symbol((process.env.NODE_ENV !== 'production') ? `withDirectives` : ``);\r\nconst RENDER_LIST = Symbol((process.env.NODE_ENV !== 'production') ? `renderList` : ``);\r\nconst RENDER_SLOT = Symbol((process.env.NODE_ENV !== 'production') ? `renderSlot` : ``);\r\nconst CREATE_SLOTS = Symbol((process.env.NODE_ENV !== 'production') ? `createSlots` : ``);\r\nconst TO_DISPLAY_STRING = Symbol((process.env.NODE_ENV !== 'production') ? `toDisplayString` : ``);\r\nconst MERGE_PROPS = Symbol((process.env.NODE_ENV !== 'production') ? `mergeProps` : ``);\r\nconst NORMALIZE_CLASS = Symbol((process.env.NODE_ENV !== 'production') ? `normalizeClass` : ``);\r\nconst NORMALIZE_STYLE = Symbol((process.env.NODE_ENV !== 'production') ? `normalizeStyle` : ``);\r\nconst NORMALIZE_PROPS = Symbol((process.env.NODE_ENV !== 'production') ? `normalizeProps` : ``);\r\nconst GUARD_REACTIVE_PROPS = Symbol((process.env.NODE_ENV !== 'production') ? `guardReactiveProps` : ``);\r\nconst TO_HANDLERS = Symbol((process.env.NODE_ENV !== 'production') ? `toHandlers` : ``);\r\nconst CAMELIZE = Symbol((process.env.NODE_ENV !== 'production') ? `camelize` : ``);\r\nconst CAPITALIZE = Symbol((process.env.NODE_ENV !== 'production') ? `capitalize` : ``);\r\nconst TO_HANDLER_KEY = Symbol((process.env.NODE_ENV !== 'production') ? `toHandlerKey` : ``);\r\nconst SET_BLOCK_TRACKING = Symbol((process.env.NODE_ENV !== 'production') ? `setBlockTracking` : ``);\r\nconst PUSH_SCOPE_ID = Symbol((process.env.NODE_ENV !== 'production') ? `pushScopeId` : ``);\r\nconst POP_SCOPE_ID = Symbol((process.env.NODE_ENV !== 'production') ? `popScopeId` : ``);\r\nconst WITH_CTX = Symbol((process.env.NODE_ENV !== 'production') ? `withCtx` : ``);\r\nconst UNREF = Symbol((process.env.NODE_ENV !== 'production') ? `unref` : ``);\r\nconst IS_REF = Symbol((process.env.NODE_ENV !== 'production') ? `isRef` : ``);\r\nconst WITH_MEMO = Symbol((process.env.NODE_ENV !== 'production') ? `withMemo` : ``);\r\nconst IS_MEMO_SAME = Symbol((process.env.NODE_ENV !== 'production') ? `isMemoSame` : ``);\r\n// Name mapping for runtime helpers that need to be imported from 'vue' in\r\n// generated code. Make sure these are correctly exported in the runtime!\r\n// Using `any` here because TS doesn't allow symbols as index type.\r\nconst helperNameMap = {\r\n    [FRAGMENT]: `Fragment`,\r\n    [TELEPORT]: `Teleport`,\r\n    [SUSPENSE]: `Suspense`,\r\n    [KEEP_ALIVE]: `KeepAlive`,\r\n    [BASE_TRANSITION]: `BaseTransition`,\r\n    [OPEN_BLOCK]: `openBlock`,\r\n    [CREATE_BLOCK]: `createBlock`,\r\n    [CREATE_ELEMENT_BLOCK]: `createElementBlock`,\r\n    [CREATE_VNODE]: `createVNode`,\r\n    [CREATE_ELEMENT_VNODE]: `createElementVNode`,\r\n    [CREATE_COMMENT]: `createCommentVNode`,\r\n    [CREATE_TEXT]: `createTextVNode`,\r\n    [CREATE_STATIC]: `createStaticVNode`,\r\n    [RESOLVE_COMPONENT]: `resolveComponent`,\r\n    [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,\r\n    [RESOLVE_DIRECTIVE]: `resolveDirective`,\r\n    [RESOLVE_FILTER]: `resolveFilter`,\r\n    [WITH_DIRECTIVES]: `withDirectives`,\r\n    [RENDER_LIST]: `renderList`,\r\n    [RENDER_SLOT]: `renderSlot`,\r\n    [CREATE_SLOTS]: `createSlots`,\r\n    [TO_DISPLAY_STRING]: `toDisplayString`,\r\n    [MERGE_PROPS]: `mergeProps`,\r\n    [NORMALIZE_CLASS]: `normalizeClass`,\r\n    [NORMALIZE_STYLE]: `normalizeStyle`,\r\n    [NORMALIZE_PROPS]: `normalizeProps`,\r\n    [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,\r\n    [TO_HANDLERS]: `toHandlers`,\r\n    [CAMELIZE]: `camelize`,\r\n    [CAPITALIZE]: `capitalize`,\r\n    [TO_HANDLER_KEY]: `toHandlerKey`,\r\n    [SET_BLOCK_TRACKING]: `setBlockTracking`,\r\n    [PUSH_SCOPE_ID]: `pushScopeId`,\r\n    [POP_SCOPE_ID]: `popScopeId`,\r\n    [WITH_CTX]: `withCtx`,\r\n    [UNREF]: `unref`,\r\n    [IS_REF]: `isRef`,\r\n    [WITH_MEMO]: `withMemo`,\r\n    [IS_MEMO_SAME]: `isMemoSame`\r\n};\r\nfunction registerRuntimeHelpers(helpers) {\r\n    Object.getOwnPropertySymbols(helpers).forEach(s => {\r\n        helperNameMap[s] = helpers[s];\r\n    });\r\n}\n\n// AST Utilities ---------------------------------------------------------------\r\n// Some expressions, e.g. sequence and conditional expressions, are never\r\n// associated with template nodes, so their source locations are just a stub.\r\n// Container types like CompoundExpression also don't need a real location.\r\nconst locStub = {\r\n    source: '',\r\n    start: { line: 1, column: 1, offset: 0 },\r\n    end: { line: 1, column: 1, offset: 0 }\r\n};\r\nfunction createRoot(children, loc = locStub) {\r\n    return {\r\n        type: 0 /* ROOT */,\r\n        children,\r\n        helpers: [],\r\n        components: [],\r\n        directives: [],\r\n        hoists: [],\r\n        imports: [],\r\n        cached: 0,\r\n        temps: 0,\r\n        codegenNode: undefined,\r\n        loc\r\n    };\r\n}\r\nfunction createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent = false, loc = locStub) {\r\n    if (context) {\r\n        if (isBlock) {\r\n            context.helper(OPEN_BLOCK);\r\n            context.helper(getVNodeBlockHelper(context.inSSR, isComponent));\r\n        }\r\n        else {\r\n            context.helper(getVNodeHelper(context.inSSR, isComponent));\r\n        }\r\n        if (directives) {\r\n            context.helper(WITH_DIRECTIVES);\r\n        }\r\n    }\r\n    return {\r\n        type: 13 /* VNODE_CALL */,\r\n        tag,\r\n        props,\r\n        children,\r\n        patchFlag,\r\n        dynamicProps,\r\n        directives,\r\n        isBlock,\r\n        disableTracking,\r\n        isComponent,\r\n        loc\r\n    };\r\n}\r\nfunction createArrayExpression(elements, loc = locStub) {\r\n    return {\r\n        type: 17 /* JS_ARRAY_EXPRESSION */,\r\n        loc,\r\n        elements\r\n    };\r\n}\r\nfunction createObjectExpression(properties, loc = locStub) {\r\n    return {\r\n        type: 15 /* JS_OBJECT_EXPRESSION */,\r\n        loc,\r\n        properties\r\n    };\r\n}\r\nfunction createObjectProperty(key, value) {\r\n    return {\r\n        type: 16 /* JS_PROPERTY */,\r\n        loc: locStub,\r\n        key: isString(key) ? createSimpleExpression(key, true) : key,\r\n        value\r\n    };\r\n}\r\nfunction createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0 /* NOT_CONSTANT */) {\r\n    return {\r\n        type: 4 /* SIMPLE_EXPRESSION */,\r\n        loc,\r\n        content,\r\n        isStatic,\r\n        constType: isStatic ? 3 /* CAN_STRINGIFY */ : constType\r\n    };\r\n}\r\nfunction createInterpolation(content, loc) {\r\n    return {\r\n        type: 5 /* INTERPOLATION */,\r\n        loc,\r\n        content: isString(content)\r\n            ? createSimpleExpression(content, false, loc)\r\n            : content\r\n    };\r\n}\r\nfunction createCompoundExpression(children, loc = locStub) {\r\n    return {\r\n        type: 8 /* COMPOUND_EXPRESSION */,\r\n        loc,\r\n        children\r\n    };\r\n}\r\nfunction createCallExpression(callee, args = [], loc = locStub) {\r\n    return {\r\n        type: 14 /* JS_CALL_EXPRESSION */,\r\n        loc,\r\n        callee,\r\n        arguments: args\r\n    };\r\n}\r\nfunction createFunctionExpression(params, returns = undefined, newline = false, isSlot = false, loc = locStub) {\r\n    return {\r\n        type: 18 /* JS_FUNCTION_EXPRESSION */,\r\n        params,\r\n        returns,\r\n        newline,\r\n        isSlot,\r\n        loc\r\n    };\r\n}\r\nfunction createConditionalExpression(test, consequent, alternate, newline = true) {\r\n    return {\r\n        type: 19 /* JS_CONDITIONAL_EXPRESSION */,\r\n        test,\r\n        consequent,\r\n        alternate,\r\n        newline,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createCacheExpression(index, value, isVNode = false) {\r\n    return {\r\n        type: 20 /* JS_CACHE_EXPRESSION */,\r\n        index,\r\n        value,\r\n        isVNode,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createBlockStatement(body) {\r\n    return {\r\n        type: 21 /* JS_BLOCK_STATEMENT */,\r\n        body,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createTemplateLiteral(elements) {\r\n    return {\r\n        type: 22 /* JS_TEMPLATE_LITERAL */,\r\n        elements,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createIfStatement(test, consequent, alternate) {\r\n    return {\r\n        type: 23 /* JS_IF_STATEMENT */,\r\n        test,\r\n        consequent,\r\n        alternate,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createAssignmentExpression(left, right) {\r\n    return {\r\n        type: 24 /* JS_ASSIGNMENT_EXPRESSION */,\r\n        left,\r\n        right,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createSequenceExpression(expressions) {\r\n    return {\r\n        type: 25 /* JS_SEQUENCE_EXPRESSION */,\r\n        expressions,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createReturnStatement(returns) {\r\n    return {\r\n        type: 26 /* JS_RETURN_STATEMENT */,\r\n        returns,\r\n        loc: locStub\r\n    };\r\n}\n\nconst isStaticExp = (p) => p.type === 4 /* SIMPLE_EXPRESSION */ && p.isStatic;\r\nconst isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);\r\nfunction isCoreComponent(tag) {\r\n    if (isBuiltInType(tag, 'Teleport')) {\r\n        return TELEPORT;\r\n    }\r\n    else if (isBuiltInType(tag, 'Suspense')) {\r\n        return SUSPENSE;\r\n    }\r\n    else if (isBuiltInType(tag, 'KeepAlive')) {\r\n        return KEEP_ALIVE;\r\n    }\r\n    else if (isBuiltInType(tag, 'BaseTransition')) {\r\n        return BASE_TRANSITION;\r\n    }\r\n}\r\nconst nonIdentifierRE = /^\\d|[^\\$\\w]/;\r\nconst isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);\r\nconst validFirstIdentCharRE = /[A-Za-z_$\\xA0-\\uFFFF]/;\r\nconst validIdentCharRE = /[\\.\\?\\w$\\xA0-\\uFFFF]/;\r\nconst whitespaceRE = /\\s+[.[]\\s*|\\s*[.[]\\s+/g;\r\n/**\r\n * Simple lexer to check if an expression is a member expression. This is\r\n * lax and only checks validity at the root level (i.e. does not validate exps\r\n * inside square brackets), but it's ok since these are only used on template\r\n * expressions and false positives are invalid expressions in the first place.\r\n */\r\nconst isMemberExpressionBrowser = (path) => {\r\n    // remove whitespaces around . or [ first\r\n    path = path.trim().replace(whitespaceRE, s => s.trim());\r\n    let state = 0 /* inMemberExp */;\r\n    let stateStack = [];\r\n    let currentOpenBracketCount = 0;\r\n    let currentOpenParensCount = 0;\r\n    let currentStringType = null;\r\n    for (let i = 0; i < path.length; i++) {\r\n        const char = path.charAt(i);\r\n        switch (state) {\r\n            case 0 /* inMemberExp */:\r\n                if (char === '[') {\r\n                    stateStack.push(state);\r\n                    state = 1 /* inBrackets */;\r\n                    currentOpenBracketCount++;\r\n                }\r\n                else if (char === '(') {\r\n                    stateStack.push(state);\r\n                    state = 2 /* inParens */;\r\n                    currentOpenParensCount++;\r\n                }\r\n                else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 1 /* inBrackets */:\r\n                if (char === `'` || char === `\"` || char === '`') {\r\n                    stateStack.push(state);\r\n                    state = 3 /* inString */;\r\n                    currentStringType = char;\r\n                }\r\n                else if (char === `[`) {\r\n                    currentOpenBracketCount++;\r\n                }\r\n                else if (char === `]`) {\r\n                    if (!--currentOpenBracketCount) {\r\n                        state = stateStack.pop();\r\n                    }\r\n                }\r\n                break;\r\n            case 2 /* inParens */:\r\n                if (char === `'` || char === `\"` || char === '`') {\r\n                    stateStack.push(state);\r\n                    state = 3 /* inString */;\r\n                    currentStringType = char;\r\n                }\r\n                else if (char === `(`) {\r\n                    currentOpenParensCount++;\r\n                }\r\n                else if (char === `)`) {\r\n                    // if the exp ends as a call then it should not be considered valid\r\n                    if (i === path.length - 1) {\r\n                        return false;\r\n                    }\r\n                    if (!--currentOpenParensCount) {\r\n                        state = stateStack.pop();\r\n                    }\r\n                }\r\n                break;\r\n            case 3 /* inString */:\r\n                if (char === currentStringType) {\r\n                    state = stateStack.pop();\r\n                    currentStringType = null;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    return !currentOpenBracketCount && !currentOpenParensCount;\r\n};\r\nconst isMemberExpressionNode = (path, context) => {\r\n    try {\r\n        let ret = parseExpression(path, {\r\n            plugins: [...context.expressionPlugins, ...babelParserDefaultPlugins]\r\n        });\r\n        if (ret.type === 'TSAsExpression' || ret.type === 'TSTypeAssertion') {\r\n            ret = ret.expression;\r\n        }\r\n        return (ret.type === 'MemberExpression' ||\r\n            ret.type === 'OptionalMemberExpression' ||\r\n            ret.type === 'Identifier');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nconst isMemberExpression = isMemberExpressionBrowser\r\n    ;\r\nfunction getInnerRange(loc, offset, length) {\r\n    const source = loc.source.substr(offset, length);\r\n    const newLoc = {\r\n        source,\r\n        start: advancePositionWithClone(loc.start, loc.source, offset),\r\n        end: loc.end\r\n    };\r\n    if (length != null) {\r\n        newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);\r\n    }\r\n    return newLoc;\r\n}\r\nfunction advancePositionWithClone(pos, source, numberOfCharacters = source.length) {\r\n    return advancePositionWithMutation(extend({}, pos), source, numberOfCharacters);\r\n}\r\n// advance by mutation without cloning (for performance reasons), since this\r\n// gets called a lot in the parser\r\nfunction advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {\r\n    let linesCount = 0;\r\n    let lastNewLinePos = -1;\r\n    for (let i = 0; i < numberOfCharacters; i++) {\r\n        if (source.charCodeAt(i) === 10 /* newline char code */) {\r\n            linesCount++;\r\n            lastNewLinePos = i;\r\n        }\r\n    }\r\n    pos.offset += numberOfCharacters;\r\n    pos.line += linesCount;\r\n    pos.column =\r\n        lastNewLinePos === -1\r\n            ? pos.column + numberOfCharacters\r\n            : numberOfCharacters - lastNewLinePos;\r\n    return pos;\r\n}\r\nfunction assert(condition, msg) {\r\n    /* istanbul ignore if */\r\n    if (!condition) {\r\n        throw new Error(msg || `unexpected compiler condition`);\r\n    }\r\n}\r\nfunction findDir(node, name, allowEmpty = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 7 /* DIRECTIVE */ &&\r\n            (allowEmpty || p.exp) &&\r\n            (isString(name) ? p.name === name : name.test(p.name))) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction findProp(node, name, dynamicOnly = false, allowEmpty = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (dynamicOnly)\r\n                continue;\r\n            if (p.name === name && (p.value || allowEmpty)) {\r\n                return p;\r\n            }\r\n        }\r\n        else if (p.name === 'bind' &&\r\n            (p.exp || allowEmpty) &&\r\n            isBindKey(p.arg, name)) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction isBindKey(arg, name) {\r\n    return !!(arg && isStaticExp(arg) && arg.content === name);\r\n}\r\nfunction hasDynamicKeyVBind(node) {\r\n    return node.props.some(p => p.type === 7 /* DIRECTIVE */ &&\r\n        p.name === 'bind' &&\r\n        (!p.arg || // v-bind=\"obj\"\r\n            p.arg.type !== 4 /* SIMPLE_EXPRESSION */ || // v-bind:[_ctx.foo]\r\n            !p.arg.isStatic) // v-bind:[foo]\r\n    );\r\n}\r\nfunction isText(node) {\r\n    return node.type === 5 /* INTERPOLATION */ || node.type === 2 /* TEXT */;\r\n}\r\nfunction isVSlot(p) {\r\n    return p.type === 7 /* DIRECTIVE */ && p.name === 'slot';\r\n}\r\nfunction isTemplateNode(node) {\r\n    return (node.type === 1 /* ELEMENT */ && node.tagType === 3 /* TEMPLATE */);\r\n}\r\nfunction isSlotOutlet(node) {\r\n    return node.type === 1 /* ELEMENT */ && node.tagType === 2 /* SLOT */;\r\n}\r\nfunction getVNodeHelper(ssr, isComponent) {\r\n    return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE;\r\n}\r\nfunction getVNodeBlockHelper(ssr, isComponent) {\r\n    return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;\r\n}\r\nconst propsHelperSet = new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);\r\nfunction getUnnormalizedProps(props, callPath = []) {\r\n    if (props &&\r\n        !isString(props) &&\r\n        props.type === 14 /* JS_CALL_EXPRESSION */) {\r\n        const callee = props.callee;\r\n        if (!isString(callee) && propsHelperSet.has(callee)) {\r\n            return getUnnormalizedProps(props.arguments[0], callPath.concat(props));\r\n        }\r\n    }\r\n    return [props, callPath];\r\n}\r\nfunction injectProp(node, prop, context) {\r\n    let propsWithInjection;\r\n    const originalProps = node.type === 13 /* VNODE_CALL */ ? node.props : node.arguments[2];\r\n    /**\r\n     * 1. mergeProps(...)\r\n     * 2. toHandlers(...)\r\n     * 3. normalizeProps(...)\r\n     * 4. normalizeProps(guardReactiveProps(...))\r\n     *\r\n     * we need to get the real props before normalization\r\n     */\r\n    let props = originalProps;\r\n    let callPath = [];\r\n    let parentCall;\r\n    if (props &&\r\n        !isString(props) &&\r\n        props.type === 14 /* JS_CALL_EXPRESSION */) {\r\n        const ret = getUnnormalizedProps(props);\r\n        props = ret[0];\r\n        callPath = ret[1];\r\n        parentCall = callPath[callPath.length - 1];\r\n    }\r\n    if (props == null || isString(props)) {\r\n        propsWithInjection = createObjectExpression([prop]);\r\n    }\r\n    else if (props.type === 14 /* JS_CALL_EXPRESSION */) {\r\n        // merged props... add ours\r\n        // only inject key to object literal if it's the first argument so that\r\n        // if doesn't override user provided keys\r\n        const first = props.arguments[0];\r\n        if (!isString(first) && first.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n            first.properties.unshift(prop);\r\n        }\r\n        else {\r\n            if (props.callee === TO_HANDLERS) {\r\n                // #2366\r\n                propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n                    createObjectExpression([prop]),\r\n                    props\r\n                ]);\r\n            }\r\n            else {\r\n                props.arguments.unshift(createObjectExpression([prop]));\r\n            }\r\n        }\r\n        !propsWithInjection && (propsWithInjection = props);\r\n    }\r\n    else if (props.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n        let alreadyExists = false;\r\n        // check existing key to avoid overriding user provided keys\r\n        if (prop.key.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            const propKeyName = prop.key.content;\r\n            alreadyExists = props.properties.some(p => p.key.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                p.key.content === propKeyName);\r\n        }\r\n        if (!alreadyExists) {\r\n            props.properties.unshift(prop);\r\n        }\r\n        propsWithInjection = props;\r\n    }\r\n    else {\r\n        // single v-bind with expression, return a merged replacement\r\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n            createObjectExpression([prop]),\r\n            props\r\n        ]);\r\n        // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(props))`,\r\n        // it will be rewritten as `normalizeProps(mergeProps({ key: 0 }, props))`,\r\n        // the `guardReactiveProps` will no longer be needed\r\n        if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {\r\n            parentCall = callPath[callPath.length - 2];\r\n        }\r\n    }\r\n    if (node.type === 13 /* VNODE_CALL */) {\r\n        if (parentCall) {\r\n            parentCall.arguments[0] = propsWithInjection;\r\n        }\r\n        else {\r\n            node.props = propsWithInjection;\r\n        }\r\n    }\r\n    else {\r\n        if (parentCall) {\r\n            parentCall.arguments[0] = propsWithInjection;\r\n        }\r\n        else {\r\n            node.arguments[2] = propsWithInjection;\r\n        }\r\n    }\r\n}\r\nfunction toValidAssetId(name, type) {\r\n    // see issue#4422, we need adding identifier on validAssetId if variable `name` has specific character\r\n    return `_${type}_${name.replace(/[^\\w]/g, (searchValue, replaceValue) => {\r\n        return searchValue === '-' ? '_' : name.charCodeAt(replaceValue).toString();\r\n    })}`;\r\n}\r\n// Check if a node contains expressions that reference current context scope ids\r\nfunction hasScopeRef(node, ids) {\r\n    if (!node || Object.keys(ids).length === 0) {\r\n        return false;\r\n    }\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            for (let i = 0; i < node.props.length; i++) {\r\n                const p = node.props[i];\r\n                if (p.type === 7 /* DIRECTIVE */ &&\r\n                    (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {\r\n                    return true;\r\n                }\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 11 /* FOR */:\r\n            if (hasScopeRef(node.source, ids)) {\r\n                return true;\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 9 /* IF */:\r\n            return node.branches.some(b => hasScopeRef(b, ids));\r\n        case 10 /* IF_BRANCH */:\r\n            if (hasScopeRef(node.condition, ids)) {\r\n                return true;\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            return (!node.isStatic &&\r\n                isSimpleIdentifier(node.content) &&\r\n                !!ids[node.content]);\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            return node.children.some(c => isObject(c) && hasScopeRef(c, ids));\r\n        case 5 /* INTERPOLATION */:\r\n        case 12 /* TEXT_CALL */:\r\n            return hasScopeRef(node.content, ids);\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return false;\r\n        default:\r\n            if ((process.env.NODE_ENV !== 'production')) ;\r\n            return false;\r\n    }\r\n}\r\nfunction getMemoedVNodeCall(node) {\r\n    if (node.type === 14 /* JS_CALL_EXPRESSION */ && node.callee === WITH_MEMO) {\r\n        return node.arguments[1].returns;\r\n    }\r\n    else {\r\n        return node;\r\n    }\r\n}\r\nfunction makeBlock(node, { helper, removeHelper, inSSR }) {\r\n    if (!node.isBlock) {\r\n        node.isBlock = true;\r\n        removeHelper(getVNodeHelper(inSSR, node.isComponent));\r\n        helper(OPEN_BLOCK);\r\n        helper(getVNodeBlockHelper(inSSR, node.isComponent));\r\n    }\r\n}\n\nconst deprecationData = {\r\n    [\"COMPILER_IS_ON_ELEMENT\" /* COMPILER_IS_ON_ELEMENT */]: {\r\n        message: `Platform-native elements with \"is\" prop will no longer be ` +\r\n            `treated as components in Vue 3 unless the \"is\" value is explicitly ` +\r\n            `prefixed with \"vue:\".`,\r\n        link: `https://v3.vuejs.org/guide/migration/custom-elements-interop.html`\r\n    },\r\n    [\"COMPILER_V_BIND_SYNC\" /* COMPILER_V_BIND_SYNC */]: {\r\n        message: key => `.sync modifier for v-bind has been removed. Use v-model with ` +\r\n            `argument instead. \\`v-bind:${key}.sync\\` should be changed to ` +\r\n            `\\`v-model:${key}\\`.`,\r\n        link: `https://v3.vuejs.org/guide/migration/v-model.html`\r\n    },\r\n    [\"COMPILER_V_BIND_PROP\" /* COMPILER_V_BIND_PROP */]: {\r\n        message: `.prop modifier for v-bind has been removed and no longer necessary. ` +\r\n            `Vue 3 will automatically set a binding as DOM property when appropriate.`\r\n    },\r\n    [\"COMPILER_V_BIND_OBJECT_ORDER\" /* COMPILER_V_BIND_OBJECT_ORDER */]: {\r\n        message: `v-bind=\"obj\" usage is now order sensitive and behaves like JavaScript ` +\r\n            `object spread: it will now overwrite an existing non-mergeable attribute ` +\r\n            `that appears before v-bind in the case of conflict. ` +\r\n            `To retain 2.x behavior, move v-bind to make it the first attribute. ` +\r\n            `You can also suppress this warning if the usage is intended.`,\r\n        link: `https://v3.vuejs.org/guide/migration/v-bind.html`\r\n    },\r\n    [\"COMPILER_V_ON_NATIVE\" /* COMPILER_V_ON_NATIVE */]: {\r\n        message: `.native modifier for v-on has been removed as is no longer necessary.`,\r\n        link: `https://v3.vuejs.org/guide/migration/v-on-native-modifier-removed.html`\r\n    },\r\n    [\"COMPILER_V_IF_V_FOR_PRECEDENCE\" /* COMPILER_V_IF_V_FOR_PRECEDENCE */]: {\r\n        message: `v-if / v-for precedence when used on the same element has changed ` +\r\n            `in Vue 3: v-if now takes higher precedence and will no longer have ` +\r\n            `access to v-for scope variables. It is best to avoid the ambiguity ` +\r\n            `with <template> tags or use a computed property that filters v-for ` +\r\n            `data source.`,\r\n        link: `https://v3.vuejs.org/guide/migration/v-if-v-for.html`\r\n    },\r\n    [\"COMPILER_V_FOR_REF\" /* COMPILER_V_FOR_REF */]: {\r\n        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` +\r\n            `Consider using function refs or refactor to avoid ref usage altogether.`,\r\n        link: `https://v3.vuejs.org/guide/migration/array-refs.html`\r\n    },\r\n    [\"COMPILER_NATIVE_TEMPLATE\" /* COMPILER_NATIVE_TEMPLATE */]: {\r\n        message: `<template> with no special directives will render as a native template ` +\r\n            `element instead of its inner content in Vue 3.`\r\n    },\r\n    [\"COMPILER_INLINE_TEMPLATE\" /* COMPILER_INLINE_TEMPLATE */]: {\r\n        message: `\"inline-template\" has been removed in Vue 3.`,\r\n        link: `https://v3.vuejs.org/guide/migration/inline-template-attribute.html`\r\n    },\r\n    [\"COMPILER_FILTER\" /* COMPILER_FILTERS */]: {\r\n        message: `filters have been removed in Vue 3. ` +\r\n            `The \"|\" symbol will be treated as native JavaScript bitwise OR operator. ` +\r\n            `Use method calls or computed properties instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/filters.html`\r\n    }\r\n};\r\nfunction getCompatValue(key, context) {\r\n    const config = context.options\r\n        ? context.options.compatConfig\r\n        : context.compatConfig;\r\n    const value = config && config[key];\r\n    if (key === 'MODE') {\r\n        return value || 3; // compiler defaults to v3 behavior\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\nfunction isCompatEnabled(key, context) {\r\n    const mode = getCompatValue('MODE', context);\r\n    const value = getCompatValue(key, context);\r\n    // in v3 mode, only enable if explicitly set to true\r\n    // otherwise enable for any non-false value\r\n    return mode === 3 ? value === true : value !== false;\r\n}\r\nfunction checkCompatEnabled(key, context, loc, ...args) {\r\n    const enabled = isCompatEnabled(key, context);\r\n    if ((process.env.NODE_ENV !== 'production') && enabled) {\r\n        warnDeprecation(key, context, loc, ...args);\r\n    }\r\n    return enabled;\r\n}\r\nfunction warnDeprecation(key, context, loc, ...args) {\r\n    const val = getCompatValue(key, context);\r\n    if (val === 'suppress-warning') {\r\n        return;\r\n    }\r\n    const { message, link } = deprecationData[key];\r\n    const msg = `(deprecation ${key}) ${typeof message === 'function' ? message(...args) : message}${link ? `\\n  Details: ${link}` : ``}`;\r\n    const err = new SyntaxError(msg);\r\n    err.code = key;\r\n    if (loc)\r\n        err.loc = loc;\r\n    context.onWarn(err);\r\n}\n\n// The default decoder only provides escapes for characters reserved as part of\r\n// the template syntax, and is only used if the custom renderer did not provide\r\n// a platform-specific decoder.\r\nconst decodeRE = /&(gt|lt|amp|apos|quot);/g;\r\nconst decodeMap = {\r\n    gt: '>',\r\n    lt: '<',\r\n    amp: '&',\r\n    apos: \"'\",\r\n    quot: '\"'\r\n};\r\nconst defaultParserOptions = {\r\n    delimiters: [`{{`, `}}`],\r\n    getNamespace: () => 0 /* HTML */,\r\n    getTextMode: () => 0 /* DATA */,\r\n    isVoidTag: NO,\r\n    isPreTag: NO,\r\n    isCustomElement: NO,\r\n    decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),\r\n    onError: defaultOnError,\r\n    onWarn: defaultOnWarn,\r\n    comments: (process.env.NODE_ENV !== 'production')\r\n};\r\nfunction baseParse(content, options = {}) {\r\n    const context = createParserContext(content, options);\r\n    const start = getCursor(context);\r\n    return createRoot(parseChildren(context, 0 /* DATA */, []), getSelection(context, start));\r\n}\r\nfunction createParserContext(content, rawOptions) {\r\n    const options = extend({}, defaultParserOptions);\r\n    let key;\r\n    for (key in rawOptions) {\r\n        // @ts-ignore\r\n        options[key] =\r\n            rawOptions[key] === undefined\r\n                ? defaultParserOptions[key]\r\n                : rawOptions[key];\r\n    }\r\n    return {\r\n        options,\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        originalSource: content,\r\n        source: content,\r\n        inPre: false,\r\n        inVPre: false,\r\n        onWarn: options.onWarn\r\n    };\r\n}\r\nfunction parseChildren(context, mode, ancestors) {\r\n    const parent = last(ancestors);\r\n    const ns = parent ? parent.ns : 0 /* HTML */;\r\n    const nodes = [];\r\n    while (!isEnd(context, mode, ancestors)) {\r\n        const s = context.source;\r\n        let node = undefined;\r\n        if (mode === 0 /* DATA */ || mode === 1 /* RCDATA */) {\r\n            if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {\r\n                // '{{'\r\n                node = parseInterpolation(context, mode);\r\n            }\r\n            else if (mode === 0 /* DATA */ && s[0] === '<') {\r\n                // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\r\n                if (s.length === 1) {\r\n                    emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 1);\r\n                }\r\n                else if (s[1] === '!') {\r\n                    // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state\r\n                    if (startsWith(s, '<!--')) {\r\n                        node = parseComment(context);\r\n                    }\r\n                    else if (startsWith(s, '<!DOCTYPE')) {\r\n                        // Ignore DOCTYPE by a limitation.\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                    else if (startsWith(s, '<![CDATA[')) {\r\n                        if (ns !== 0 /* HTML */) {\r\n                            node = parseCDATA(context, ancestors);\r\n                        }\r\n                        else {\r\n                            emitError(context, 1 /* CDATA_IN_HTML_CONTENT */);\r\n                            node = parseBogusComment(context);\r\n                        }\r\n                    }\r\n                    else {\r\n                        emitError(context, 11 /* INCORRECTLY_OPENED_COMMENT */);\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                }\r\n                else if (s[1] === '/') {\r\n                    // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state\r\n                    if (s.length === 2) {\r\n                        emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 2);\r\n                    }\r\n                    else if (s[2] === '>') {\r\n                        emitError(context, 14 /* MISSING_END_TAG_NAME */, 2);\r\n                        advanceBy(context, 3);\r\n                        continue;\r\n                    }\r\n                    else if (/[a-z]/i.test(s[2])) {\r\n                        emitError(context, 23 /* X_INVALID_END_TAG */);\r\n                        parseTag(context, 1 /* End */, parent);\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 2);\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                }\r\n                else if (/[a-z]/i.test(s[1])) {\r\n                    node = parseElement(context, ancestors);\r\n                    // 2.x <template> with no directive compat\r\n                    if (isCompatEnabled(\"COMPILER_NATIVE_TEMPLATE\" /* COMPILER_NATIVE_TEMPLATE */, context) &&\r\n                        node &&\r\n                        node.tag === 'template' &&\r\n                        !node.props.some(p => p.type === 7 /* DIRECTIVE */ &&\r\n                            isSpecialTemplateDirective(p.name))) {\r\n                        (process.env.NODE_ENV !== 'production') &&\r\n                            warnDeprecation(\"COMPILER_NATIVE_TEMPLATE\" /* COMPILER_NATIVE_TEMPLATE */, context, node.loc);\r\n                        node = node.children;\r\n                    }\r\n                }\r\n                else if (s[1] === '?') {\r\n                    emitError(context, 21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */, 1);\r\n                    node = parseBogusComment(context);\r\n                }\r\n                else {\r\n                    emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 1);\r\n                }\r\n            }\r\n        }\r\n        if (!node) {\r\n            node = parseText(context, mode);\r\n        }\r\n        if (isArray(node)) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                pushNode(nodes, node[i]);\r\n            }\r\n        }\r\n        else {\r\n            pushNode(nodes, node);\r\n        }\r\n    }\r\n    // Whitespace handling strategy like v2\r\n    let removedWhitespace = false;\r\n    if (mode !== 2 /* RAWTEXT */ && mode !== 1 /* RCDATA */) {\r\n        const shouldCondense = context.options.whitespace !== 'preserve';\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            if (!context.inPre && node.type === 2 /* TEXT */) {\r\n                if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n                    const prev = nodes[i - 1];\r\n                    const next = nodes[i + 1];\r\n                    // Remove if:\r\n                    // - the whitespace is the first or last node, or:\r\n                    // - (condense mode) the whitespace is adjacent to a comment, or:\r\n                    // - (condense mode) the whitespace is between two elements AND contains newline\r\n                    if (!prev ||\r\n                        !next ||\r\n                        (shouldCondense &&\r\n                            (prev.type === 3 /* COMMENT */ ||\r\n                                next.type === 3 /* COMMENT */ ||\r\n                                (prev.type === 1 /* ELEMENT */ &&\r\n                                    next.type === 1 /* ELEMENT */ &&\r\n                                    /[\\r\\n]/.test(node.content))))) {\r\n                        removedWhitespace = true;\r\n                        nodes[i] = null;\r\n                    }\r\n                    else {\r\n                        // Otherwise, the whitespace is condensed into a single space\r\n                        node.content = ' ';\r\n                    }\r\n                }\r\n                else if (shouldCondense) {\r\n                    // in condense mode, consecutive whitespaces in text are condensed\r\n                    // down to a single space.\r\n                    node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, ' ');\r\n                }\r\n            }\r\n            // Remove comment nodes if desired by configuration.\r\n            else if (node.type === 3 /* COMMENT */ && !context.options.comments) {\r\n                removedWhitespace = true;\r\n                nodes[i] = null;\r\n            }\r\n        }\r\n        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {\r\n            // remove leading newline per html spec\r\n            // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element\r\n            const first = nodes[0];\r\n            if (first && first.type === 2 /* TEXT */) {\r\n                first.content = first.content.replace(/^\\r?\\n/, '');\r\n            }\r\n        }\r\n    }\r\n    return removedWhitespace ? nodes.filter(Boolean) : nodes;\r\n}\r\nfunction pushNode(nodes, node) {\r\n    if (node.type === 2 /* TEXT */) {\r\n        const prev = last(nodes);\r\n        // Merge if both this and the previous node are text and those are\r\n        // consecutive. This happens for cases like \"a < b\".\r\n        if (prev &&\r\n            prev.type === 2 /* TEXT */ &&\r\n            prev.loc.end.offset === node.loc.start.offset) {\r\n            prev.content += node.content;\r\n            prev.loc.end = node.loc.end;\r\n            prev.loc.source += node.loc.source;\r\n            return;\r\n        }\r\n    }\r\n    nodes.push(node);\r\n}\r\nfunction parseCDATA(context, ancestors) {\r\n    advanceBy(context, 9);\r\n    const nodes = parseChildren(context, 3 /* CDATA */, ancestors);\r\n    if (context.source.length === 0) {\r\n        emitError(context, 6 /* EOF_IN_CDATA */);\r\n    }\r\n    else {\r\n        advanceBy(context, 3);\r\n    }\r\n    return nodes;\r\n}\r\nfunction parseComment(context) {\r\n    const start = getCursor(context);\r\n    let content;\r\n    // Regular comment.\r\n    const match = /--(\\!)?>/.exec(context.source);\r\n    if (!match) {\r\n        content = context.source.slice(4);\r\n        advanceBy(context, context.source.length);\r\n        emitError(context, 7 /* EOF_IN_COMMENT */);\r\n    }\r\n    else {\r\n        if (match.index <= 3) {\r\n            emitError(context, 0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */);\r\n        }\r\n        if (match[1]) {\r\n            emitError(context, 10 /* INCORRECTLY_CLOSED_COMMENT */);\r\n        }\r\n        content = context.source.slice(4, match.index);\r\n        // Advancing with reporting nested comments.\r\n        const s = context.source.slice(0, match.index);\r\n        let prevIndex = 1, nestedIndex = 0;\r\n        while ((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1) {\r\n            advanceBy(context, nestedIndex - prevIndex + 1);\r\n            if (nestedIndex + 4 < s.length) {\r\n                emitError(context, 16 /* NESTED_COMMENT */);\r\n            }\r\n            prevIndex = nestedIndex + 1;\r\n        }\r\n        advanceBy(context, match.index + match[0].length - prevIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseBogusComment(context) {\r\n    const start = getCursor(context);\r\n    const contentStart = context.source[1] === '?' ? 1 : 2;\r\n    let content;\r\n    const closeIndex = context.source.indexOf('>');\r\n    if (closeIndex === -1) {\r\n        content = context.source.slice(contentStart);\r\n        advanceBy(context, context.source.length);\r\n    }\r\n    else {\r\n        content = context.source.slice(contentStart, closeIndex);\r\n        advanceBy(context, closeIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseElement(context, ancestors) {\r\n    // Start tag.\r\n    const wasInPre = context.inPre;\r\n    const wasInVPre = context.inVPre;\r\n    const parent = last(ancestors);\r\n    const element = parseTag(context, 0 /* Start */, parent);\r\n    const isPreBoundary = context.inPre && !wasInPre;\r\n    const isVPreBoundary = context.inVPre && !wasInVPre;\r\n    if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\r\n        // #4030 self-closing <pre> tag\r\n        if (isPreBoundary) {\r\n            context.inPre = false;\r\n        }\r\n        if (isVPreBoundary) {\r\n            context.inVPre = false;\r\n        }\r\n        return element;\r\n    }\r\n    // Children.\r\n    ancestors.push(element);\r\n    const mode = context.options.getTextMode(element, parent);\r\n    const children = parseChildren(context, mode, ancestors);\r\n    ancestors.pop();\r\n    // 2.x inline-template compat\r\n    {\r\n        const inlineTemplateProp = element.props.find(p => p.type === 6 /* ATTRIBUTE */ && p.name === 'inline-template');\r\n        if (inlineTemplateProp &&\r\n            checkCompatEnabled(\"COMPILER_INLINE_TEMPLATE\" /* COMPILER_INLINE_TEMPLATE */, context, inlineTemplateProp.loc)) {\r\n            const loc = getSelection(context, element.loc.end);\r\n            inlineTemplateProp.value = {\r\n                type: 2 /* TEXT */,\r\n                content: loc.source,\r\n                loc\r\n            };\r\n        }\r\n    }\r\n    element.children = children;\r\n    // End tag.\r\n    if (startsWithEndTagOpen(context.source, element.tag)) {\r\n        parseTag(context, 1 /* End */, parent);\r\n    }\r\n    else {\r\n        emitError(context, 24 /* X_MISSING_END_TAG */, 0, element.loc.start);\r\n        if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {\r\n            const first = children[0];\r\n            if (first && startsWith(first.loc.source, '<!--')) {\r\n                emitError(context, 8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */);\r\n            }\r\n        }\r\n    }\r\n    element.loc = getSelection(context, element.loc.start);\r\n    if (isPreBoundary) {\r\n        context.inPre = false;\r\n    }\r\n    if (isVPreBoundary) {\r\n        context.inVPre = false;\r\n    }\r\n    return element;\r\n}\r\nconst isSpecialTemplateDirective = /*#__PURE__*/ makeMap(`if,else,else-if,for,slot`);\r\nfunction parseTag(context, type, parent) {\r\n    // Tag open.\r\n    const start = getCursor(context);\r\n    const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source);\r\n    const tag = match[1];\r\n    const ns = context.options.getNamespace(tag, parent);\r\n    advanceBy(context, match[0].length);\r\n    advanceSpaces(context);\r\n    // save current state in case we need to re-parse attributes with v-pre\r\n    const cursor = getCursor(context);\r\n    const currentSource = context.source;\r\n    // check <pre> tag\r\n    if (context.options.isPreTag(tag)) {\r\n        context.inPre = true;\r\n    }\r\n    // Attributes.\r\n    let props = parseAttributes(context, type);\r\n    // check v-pre\r\n    if (type === 0 /* Start */ &&\r\n        !context.inVPre &&\r\n        props.some(p => p.type === 7 /* DIRECTIVE */ && p.name === 'pre')) {\r\n        context.inVPre = true;\r\n        // reset context\r\n        extend(context, cursor);\r\n        context.source = currentSource;\r\n        // re-parse attrs and filter out v-pre itself\r\n        props = parseAttributes(context, type).filter(p => p.name !== 'v-pre');\r\n    }\r\n    // Tag close.\r\n    let isSelfClosing = false;\r\n    if (context.source.length === 0) {\r\n        emitError(context, 9 /* EOF_IN_TAG */);\r\n    }\r\n    else {\r\n        isSelfClosing = startsWith(context.source, '/>');\r\n        if (type === 1 /* End */ && isSelfClosing) {\r\n            emitError(context, 4 /* END_TAG_WITH_TRAILING_SOLIDUS */);\r\n        }\r\n        advanceBy(context, isSelfClosing ? 2 : 1);\r\n    }\r\n    if (type === 1 /* End */) {\r\n        return;\r\n    }\r\n    // 2.x deprecation checks\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        isCompatEnabled(\"COMPILER_V_IF_V_FOR_PRECEDENCE\" /* COMPILER_V_IF_V_FOR_PRECEDENCE */, context)) {\r\n        let hasIf = false;\r\n        let hasFor = false;\r\n        for (let i = 0; i < props.length; i++) {\r\n            const p = props[i];\r\n            if (p.type === 7 /* DIRECTIVE */) {\r\n                if (p.name === 'if') {\r\n                    hasIf = true;\r\n                }\r\n                else if (p.name === 'for') {\r\n                    hasFor = true;\r\n                }\r\n            }\r\n            if (hasIf && hasFor) {\r\n                warnDeprecation(\"COMPILER_V_IF_V_FOR_PRECEDENCE\" /* COMPILER_V_IF_V_FOR_PRECEDENCE */, context, getSelection(context, start));\r\n            }\r\n        }\r\n    }\r\n    let tagType = 0 /* ELEMENT */;\r\n    if (!context.inVPre) {\r\n        if (tag === 'slot') {\r\n            tagType = 2 /* SLOT */;\r\n        }\r\n        else if (tag === 'template') {\r\n            if (props.some(p => p.type === 7 /* DIRECTIVE */ && isSpecialTemplateDirective(p.name))) {\r\n                tagType = 3 /* TEMPLATE */;\r\n            }\r\n        }\r\n        else if (isComponent(tag, props, context)) {\r\n            tagType = 1 /* COMPONENT */;\r\n        }\r\n    }\r\n    return {\r\n        type: 1 /* ELEMENT */,\r\n        ns,\r\n        tag,\r\n        tagType,\r\n        props,\r\n        isSelfClosing,\r\n        children: [],\r\n        loc: getSelection(context, start),\r\n        codegenNode: undefined // to be created during transform phase\r\n    };\r\n}\r\nfunction isComponent(tag, props, context) {\r\n    const options = context.options;\r\n    if (options.isCustomElement(tag)) {\r\n        return false;\r\n    }\r\n    if (tag === 'component' ||\r\n        /^[A-Z]/.test(tag) ||\r\n        isCoreComponent(tag) ||\r\n        (options.isBuiltInComponent && options.isBuiltInComponent(tag)) ||\r\n        (options.isNativeTag && !options.isNativeTag(tag))) {\r\n        return true;\r\n    }\r\n    // at this point the tag should be a native tag, but check for potential \"is\"\r\n    // casting\r\n    for (let i = 0; i < props.length; i++) {\r\n        const p = props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (p.name === 'is' && p.value) {\r\n                if (p.value.content.startsWith('vue:')) {\r\n                    return true;\r\n                }\r\n                else if (checkCompatEnabled(\"COMPILER_IS_ON_ELEMENT\" /* COMPILER_IS_ON_ELEMENT */, context, p.loc)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // directive\r\n            // v-is (TODO Deprecate)\r\n            if (p.name === 'is') {\r\n                return true;\r\n            }\r\n            else if (\r\n            // :is on plain element - only treat as component in compat mode\r\n            p.name === 'bind' &&\r\n                isBindKey(p.arg, 'is') &&\r\n                true &&\r\n                checkCompatEnabled(\"COMPILER_IS_ON_ELEMENT\" /* COMPILER_IS_ON_ELEMENT */, context, p.loc)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction parseAttributes(context, type) {\r\n    const props = [];\r\n    const attributeNames = new Set();\r\n    while (context.source.length > 0 &&\r\n        !startsWith(context.source, '>') &&\r\n        !startsWith(context.source, '/>')) {\r\n        if (startsWith(context.source, '/')) {\r\n            emitError(context, 22 /* UNEXPECTED_SOLIDUS_IN_TAG */);\r\n            advanceBy(context, 1);\r\n            advanceSpaces(context);\r\n            continue;\r\n        }\r\n        if (type === 1 /* End */) {\r\n            emitError(context, 3 /* END_TAG_WITH_ATTRIBUTES */);\r\n        }\r\n        const attr = parseAttribute(context, attributeNames);\r\n        // Trim whitespace between class\r\n        // https://github.com/vuejs/vue-next/issues/4251\r\n        if (attr.type === 6 /* ATTRIBUTE */ &&\r\n            attr.value &&\r\n            attr.name === 'class') {\r\n            attr.value.content = attr.value.content.replace(/\\s+/g, ' ').trim();\r\n        }\r\n        if (type === 0 /* Start */) {\r\n            props.push(attr);\r\n        }\r\n        if (/^[^\\t\\r\\n\\f />]/.test(context.source)) {\r\n            emitError(context, 15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */);\r\n        }\r\n        advanceSpaces(context);\r\n    }\r\n    return props;\r\n}\r\nfunction parseAttribute(context, nameSet) {\r\n    // Name.\r\n    const start = getCursor(context);\r\n    const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n    const name = match[0];\r\n    if (nameSet.has(name)) {\r\n        emitError(context, 2 /* DUPLICATE_ATTRIBUTE */);\r\n    }\r\n    nameSet.add(name);\r\n    if (name[0] === '=') {\r\n        emitError(context, 19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */);\r\n    }\r\n    {\r\n        const pattern = /[\"'<]/g;\r\n        let m;\r\n        while ((m = pattern.exec(name))) {\r\n            emitError(context, 17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */, m.index);\r\n        }\r\n    }\r\n    advanceBy(context, name.length);\r\n    // Value\r\n    let value = undefined;\r\n    if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\r\n        advanceSpaces(context);\r\n        advanceBy(context, 1);\r\n        advanceSpaces(context);\r\n        value = parseAttributeValue(context);\r\n        if (!value) {\r\n            emitError(context, 13 /* MISSING_ATTRIBUTE_VALUE */);\r\n        }\r\n    }\r\n    const loc = getSelection(context, start);\r\n    if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\\.|@|#)/.test(name)) {\r\n        const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^\\.|^@|^#)(\\[[^\\]]+\\]|[^\\.]+))?(.+)?$/i.exec(name);\r\n        let isPropShorthand = startsWith(name, '.');\r\n        let dirName = match[1] ||\r\n            (isPropShorthand || startsWith(name, ':')\r\n                ? 'bind'\r\n                : startsWith(name, '@')\r\n                    ? 'on'\r\n                    : 'slot');\r\n        let arg;\r\n        if (match[2]) {\r\n            const isSlot = dirName === 'slot';\r\n            const startOffset = name.lastIndexOf(match[2]);\r\n            const loc = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match[2].length + ((isSlot && match[3]) || '').length));\r\n            let content = match[2];\r\n            let isStatic = true;\r\n            if (content.startsWith('[')) {\r\n                isStatic = false;\r\n                if (!content.endsWith(']')) {\r\n                    emitError(context, 27 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */);\r\n                    content = content.substr(1);\r\n                }\r\n                else {\r\n                    content = content.substr(1, content.length - 2);\r\n                }\r\n            }\r\n            else if (isSlot) {\r\n                // #1241 special case for v-slot: vuetify relies extensively on slot\r\n                // names containing dots. v-slot doesn't have any modifiers and Vue 2.x\r\n                // supports such usage so we are keeping it consistent with 2.x.\r\n                content += match[3] || '';\r\n            }\r\n            arg = {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content,\r\n                isStatic,\r\n                constType: isStatic\r\n                    ? 3 /* CAN_STRINGIFY */\r\n                    : 0 /* NOT_CONSTANT */,\r\n                loc\r\n            };\r\n        }\r\n        if (value && value.isQuoted) {\r\n            const valueLoc = value.loc;\r\n            valueLoc.start.offset++;\r\n            valueLoc.start.column++;\r\n            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);\r\n            valueLoc.source = valueLoc.source.slice(1, -1);\r\n        }\r\n        const modifiers = match[3] ? match[3].substr(1).split('.') : [];\r\n        if (isPropShorthand)\r\n            modifiers.push('prop');\r\n        // 2.x compat v-bind:foo.sync -> v-model:foo\r\n        if (dirName === 'bind' && arg) {\r\n            if (modifiers.includes('sync') &&\r\n                checkCompatEnabled(\"COMPILER_V_BIND_SYNC\" /* COMPILER_V_BIND_SYNC */, context, loc, arg.loc.source)) {\r\n                dirName = 'model';\r\n                modifiers.splice(modifiers.indexOf('sync'), 1);\r\n            }\r\n            if ((process.env.NODE_ENV !== 'production') && modifiers.includes('prop')) {\r\n                checkCompatEnabled(\"COMPILER_V_BIND_PROP\" /* COMPILER_V_BIND_PROP */, context, loc);\r\n            }\r\n        }\r\n        return {\r\n            type: 7 /* DIRECTIVE */,\r\n            name: dirName,\r\n            exp: value && {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content: value.content,\r\n                isStatic: false,\r\n                // Treat as non-constant by default. This can be potentially set to\r\n                // other values by `transformExpression` to make it eligible for hoisting.\r\n                constType: 0 /* NOT_CONSTANT */,\r\n                loc: value.loc\r\n            },\r\n            arg,\r\n            modifiers,\r\n            loc\r\n        };\r\n    }\r\n    // missing directive name or illegal directive name\r\n    if (!context.inVPre && startsWith(name, 'v-')) {\r\n        emitError(context, 26 /* X_MISSING_DIRECTIVE_NAME */);\r\n    }\r\n    return {\r\n        type: 6 /* ATTRIBUTE */,\r\n        name,\r\n        value: value && {\r\n            type: 2 /* TEXT */,\r\n            content: value.content,\r\n            loc: value.loc\r\n        },\r\n        loc\r\n    };\r\n}\r\nfunction parseAttributeValue(context) {\r\n    const start = getCursor(context);\r\n    let content;\r\n    const quote = context.source[0];\r\n    const isQuoted = quote === `\"` || quote === `'`;\r\n    if (isQuoted) {\r\n        // Quoted value.\r\n        advanceBy(context, 1);\r\n        const endIndex = context.source.indexOf(quote);\r\n        if (endIndex === -1) {\r\n            content = parseTextData(context, context.source.length, 4 /* ATTRIBUTE_VALUE */);\r\n        }\r\n        else {\r\n            content = parseTextData(context, endIndex, 4 /* ATTRIBUTE_VALUE */);\r\n            advanceBy(context, 1);\r\n        }\r\n    }\r\n    else {\r\n        // Unquoted\r\n        const match = /^[^\\t\\r\\n\\f >]+/.exec(context.source);\r\n        if (!match) {\r\n            return undefined;\r\n        }\r\n        const unexpectedChars = /[\"'<=`]/g;\r\n        let m;\r\n        while ((m = unexpectedChars.exec(match[0]))) {\r\n            emitError(context, 18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */, m.index);\r\n        }\r\n        content = parseTextData(context, match[0].length, 4 /* ATTRIBUTE_VALUE */);\r\n    }\r\n    return { content, isQuoted, loc: getSelection(context, start) };\r\n}\r\nfunction parseInterpolation(context, mode) {\r\n    const [open, close] = context.options.delimiters;\r\n    const closeIndex = context.source.indexOf(close, open.length);\r\n    if (closeIndex === -1) {\r\n        emitError(context, 25 /* X_MISSING_INTERPOLATION_END */);\r\n        return undefined;\r\n    }\r\n    const start = getCursor(context);\r\n    advanceBy(context, open.length);\r\n    const innerStart = getCursor(context);\r\n    const innerEnd = getCursor(context);\r\n    const rawContentLength = closeIndex - open.length;\r\n    const rawContent = context.source.slice(0, rawContentLength);\r\n    const preTrimContent = parseTextData(context, rawContentLength, mode);\r\n    const content = preTrimContent.trim();\r\n    const startOffset = preTrimContent.indexOf(content);\r\n    if (startOffset > 0) {\r\n        advancePositionWithMutation(innerStart, rawContent, startOffset);\r\n    }\r\n    const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);\r\n    advancePositionWithMutation(innerEnd, rawContent, endOffset);\r\n    advanceBy(context, close.length);\r\n    return {\r\n        type: 5 /* INTERPOLATION */,\r\n        content: {\r\n            type: 4 /* SIMPLE_EXPRESSION */,\r\n            isStatic: false,\r\n            // Set `isConstant` to false by default and will decide in transformExpression\r\n            constType: 0 /* NOT_CONSTANT */,\r\n            content,\r\n            loc: getSelection(context, innerStart, innerEnd)\r\n        },\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseText(context, mode) {\r\n    const endTokens = mode === 3 /* CDATA */ ? [']]>'] : ['<', context.options.delimiters[0]];\r\n    let endIndex = context.source.length;\r\n    for (let i = 0; i < endTokens.length; i++) {\r\n        const index = context.source.indexOf(endTokens[i], 1);\r\n        if (index !== -1 && endIndex > index) {\r\n            endIndex = index;\r\n        }\r\n    }\r\n    const start = getCursor(context);\r\n    const content = parseTextData(context, endIndex, mode);\r\n    return {\r\n        type: 2 /* TEXT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\n/**\r\n * Get text data with a given length from the current location.\r\n * This translates HTML entities in the text data.\r\n */\r\nfunction parseTextData(context, length, mode) {\r\n    const rawText = context.source.slice(0, length);\r\n    advanceBy(context, length);\r\n    if (mode === 2 /* RAWTEXT */ ||\r\n        mode === 3 /* CDATA */ ||\r\n        rawText.indexOf('&') === -1) {\r\n        return rawText;\r\n    }\r\n    else {\r\n        // DATA or RCDATA containing \"&\"\". Entity decoding required.\r\n        return context.options.decodeEntities(rawText, mode === 4 /* ATTRIBUTE_VALUE */);\r\n    }\r\n}\r\nfunction getCursor(context) {\r\n    const { column, line, offset } = context;\r\n    return { column, line, offset };\r\n}\r\nfunction getSelection(context, start, end) {\r\n    end = end || getCursor(context);\r\n    return {\r\n        start,\r\n        end,\r\n        source: context.originalSource.slice(start.offset, end.offset)\r\n    };\r\n}\r\nfunction last(xs) {\r\n    return xs[xs.length - 1];\r\n}\r\nfunction startsWith(source, searchString) {\r\n    return source.startsWith(searchString);\r\n}\r\nfunction advanceBy(context, numberOfCharacters) {\r\n    const { source } = context;\r\n    advancePositionWithMutation(context, source, numberOfCharacters);\r\n    context.source = source.slice(numberOfCharacters);\r\n}\r\nfunction advanceSpaces(context) {\r\n    const match = /^[\\t\\r\\n\\f ]+/.exec(context.source);\r\n    if (match) {\r\n        advanceBy(context, match[0].length);\r\n    }\r\n}\r\nfunction getNewPosition(context, start, numberOfCharacters) {\r\n    return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);\r\n}\r\nfunction emitError(context, code, offset, loc = getCursor(context)) {\r\n    if (offset) {\r\n        loc.offset += offset;\r\n        loc.column += offset;\r\n    }\r\n    context.options.onError(createCompilerError(code, {\r\n        start: loc,\r\n        end: loc,\r\n        source: ''\r\n    }));\r\n}\r\nfunction isEnd(context, mode, ancestors) {\r\n    const s = context.source;\r\n    switch (mode) {\r\n        case 0 /* DATA */:\r\n            if (startsWith(s, '</')) {\r\n                // TODO: probably bad performance\r\n                for (let i = ancestors.length - 1; i >= 0; --i) {\r\n                    if (startsWithEndTagOpen(s, ancestors[i].tag)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        case 1 /* RCDATA */:\r\n        case 2 /* RAWTEXT */: {\r\n            const parent = last(ancestors);\r\n            if (parent && startsWithEndTagOpen(s, parent.tag)) {\r\n                return true;\r\n            }\r\n            break;\r\n        }\r\n        case 3 /* CDATA */:\r\n            if (startsWith(s, ']]>')) {\r\n                return true;\r\n            }\r\n            break;\r\n    }\r\n    return !s;\r\n}\r\nfunction startsWithEndTagOpen(source, tag) {\r\n    return (startsWith(source, '</') &&\r\n        source.substr(2, tag.length).toLowerCase() === tag.toLowerCase() &&\r\n        /[\\t\\r\\n\\f />]/.test(source[2 + tag.length] || '>'));\r\n}\n\nfunction hoistStatic(root, context) {\r\n    walk(root, context, \r\n    // Root node is unfortunately non-hoistable due to potential parent\r\n    // fallthrough attributes.\r\n    isSingleElementRoot(root, root.children[0]));\r\n}\r\nfunction isSingleElementRoot(root, child) {\r\n    const { children } = root;\r\n    return (children.length === 1 &&\r\n        child.type === 1 /* ELEMENT */ &&\r\n        !isSlotOutlet(child));\r\n}\r\nfunction walk(node, context, doNotHoistNode = false) {\r\n    // Some transforms, e.g. transformAssetUrls from @vue/compiler-sfc, replaces\r\n    // static bindings with expressions. These expressions are guaranteed to be\r\n    // constant so they are still eligible for hoisting, but they are only\r\n    // available at runtime and therefore cannot be evaluated ahead of time.\r\n    // This is only a concern for pre-stringification (via transformHoist by\r\n    // @vue/compiler-dom), but doing it here allows us to perform only one full\r\n    // walk of the AST and allow `stringifyStatic` to stop walking as soon as its\r\n    // stringification threshold is met.\r\n    let canStringify = true;\r\n    const { children } = node;\r\n    const originalCount = children.length;\r\n    let hoistedCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // only plain elements & text calls are eligible for hoisting.\r\n        if (child.type === 1 /* ELEMENT */ &&\r\n            child.tagType === 0 /* ELEMENT */) {\r\n            const constantType = doNotHoistNode\r\n                ? 0 /* NOT_CONSTANT */\r\n                : getConstantType(child, context);\r\n            if (constantType > 0 /* NOT_CONSTANT */) {\r\n                if (constantType < 3 /* CAN_STRINGIFY */) {\r\n                    canStringify = false;\r\n                }\r\n                if (constantType >= 2 /* CAN_HOIST */) {\r\n                    child.codegenNode.patchFlag =\r\n                        -1 /* HOISTED */ + ((process.env.NODE_ENV !== 'production') ? ` /* HOISTED */` : ``);\r\n                    child.codegenNode = context.hoist(child.codegenNode);\r\n                    hoistedCount++;\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                // node may contain dynamic children, but its props may be eligible for\r\n                // hoisting.\r\n                const codegenNode = child.codegenNode;\r\n                if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n                    const flag = getPatchFlag(codegenNode);\r\n                    if ((!flag ||\r\n                        flag === 512 /* NEED_PATCH */ ||\r\n                        flag === 1 /* TEXT */) &&\r\n                        getGeneratedPropsConstantType(child, context) >=\r\n                            2 /* CAN_HOIST */) {\r\n                        const props = getNodeProps(child);\r\n                        if (props) {\r\n                            codegenNode.props = context.hoist(props);\r\n                        }\r\n                    }\r\n                    if (codegenNode.dynamicProps) {\r\n                        codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (child.type === 12 /* TEXT_CALL */) {\r\n            const contentType = getConstantType(child.content, context);\r\n            if (contentType > 0) {\r\n                if (contentType < 3 /* CAN_STRINGIFY */) {\r\n                    canStringify = false;\r\n                }\r\n                if (contentType >= 2 /* CAN_HOIST */) {\r\n                    child.codegenNode = context.hoist(child.codegenNode);\r\n                    hoistedCount++;\r\n                }\r\n            }\r\n        }\r\n        // walk further\r\n        if (child.type === 1 /* ELEMENT */) {\r\n            const isComponent = child.tagType === 1 /* COMPONENT */;\r\n            if (isComponent) {\r\n                context.scopes.vSlot++;\r\n            }\r\n            walk(child, context);\r\n            if (isComponent) {\r\n                context.scopes.vSlot--;\r\n            }\r\n        }\r\n        else if (child.type === 11 /* FOR */) {\r\n            // Do not hoist v-for single child because it has to be a block\r\n            walk(child, context, child.children.length === 1);\r\n        }\r\n        else if (child.type === 9 /* IF */) {\r\n            for (let i = 0; i < child.branches.length; i++) {\r\n                // Do not hoist v-if single child because it has to be a block\r\n                walk(child.branches[i], context, child.branches[i].children.length === 1);\r\n            }\r\n        }\r\n    }\r\n    if (canStringify && hoistedCount && context.transformHoist) {\r\n        context.transformHoist(children, context, node);\r\n    }\r\n    // all children were hoisted - the entire children array is hoistable.\r\n    if (hoistedCount &&\r\n        hoistedCount === originalCount &&\r\n        node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 0 /* ELEMENT */ &&\r\n        node.codegenNode &&\r\n        node.codegenNode.type === 13 /* VNODE_CALL */ &&\r\n        isArray(node.codegenNode.children)) {\r\n        node.codegenNode.children = context.hoist(createArrayExpression(node.codegenNode.children));\r\n    }\r\n}\r\nfunction getConstantType(node, context) {\r\n    const { constantCache } = context;\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            if (node.tagType !== 0 /* ELEMENT */) {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            const cached = constantCache.get(node);\r\n            if (cached !== undefined) {\r\n                return cached;\r\n            }\r\n            const codegenNode = node.codegenNode;\r\n            if (codegenNode.type !== 13 /* VNODE_CALL */) {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            const flag = getPatchFlag(codegenNode);\r\n            if (!flag) {\r\n                let returnType = 3 /* CAN_STRINGIFY */;\r\n                // Element itself has no patch flag. However we still need to check:\r\n                // 1. Even for a node with no patch flag, it is possible for it to contain\r\n                // non-hoistable expressions that refers to scope variables, e.g. compiler\r\n                // injected keys or cached event handlers. Therefore we need to always\r\n                // check the codegenNode's props to be sure.\r\n                const generatedPropsType = getGeneratedPropsConstantType(node, context);\r\n                if (generatedPropsType === 0 /* NOT_CONSTANT */) {\r\n                    constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                    return 0 /* NOT_CONSTANT */;\r\n                }\r\n                if (generatedPropsType < returnType) {\r\n                    returnType = generatedPropsType;\r\n                }\r\n                // 2. its children.\r\n                for (let i = 0; i < node.children.length; i++) {\r\n                    const childType = getConstantType(node.children[i], context);\r\n                    if (childType === 0 /* NOT_CONSTANT */) {\r\n                        constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                        return 0 /* NOT_CONSTANT */;\r\n                    }\r\n                    if (childType < returnType) {\r\n                        returnType = childType;\r\n                    }\r\n                }\r\n                // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0\r\n                // type, check if any of the props can cause the type to be lowered\r\n                // we can skip can_patch because it's guaranteed by the absence of a\r\n                // patchFlag.\r\n                if (returnType > 1 /* CAN_SKIP_PATCH */) {\r\n                    for (let i = 0; i < node.props.length; i++) {\r\n                        const p = node.props[i];\r\n                        if (p.type === 7 /* DIRECTIVE */ && p.name === 'bind' && p.exp) {\r\n                            const expType = getConstantType(p.exp, context);\r\n                            if (expType === 0 /* NOT_CONSTANT */) {\r\n                                constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                                return 0 /* NOT_CONSTANT */;\r\n                            }\r\n                            if (expType < returnType) {\r\n                                returnType = expType;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // only svg/foreignObject could be block here, however if they are\r\n                // static then they don't need to be blocks since there will be no\r\n                // nested updates.\r\n                if (codegenNode.isBlock) {\r\n                    context.removeHelper(OPEN_BLOCK);\r\n                    context.removeHelper(getVNodeBlockHelper(context.inSSR, codegenNode.isComponent));\r\n                    codegenNode.isBlock = false;\r\n                    context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));\r\n                }\r\n                constantCache.set(node, returnType);\r\n                return returnType;\r\n            }\r\n            else {\r\n                constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return 3 /* CAN_STRINGIFY */;\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n        case 10 /* IF_BRANCH */:\r\n            return 0 /* NOT_CONSTANT */;\r\n        case 5 /* INTERPOLATION */:\r\n        case 12 /* TEXT_CALL */:\r\n            return getConstantType(node.content, context);\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            return node.constType;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            let returnType = 3 /* CAN_STRINGIFY */;\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                if (isString(child) || isSymbol(child)) {\r\n                    continue;\r\n                }\r\n                const childType = getConstantType(child, context);\r\n                if (childType === 0 /* NOT_CONSTANT */) {\r\n                    return 0 /* NOT_CONSTANT */;\r\n                }\r\n                else if (childType < returnType) {\r\n                    returnType = childType;\r\n                }\r\n            }\r\n            return returnType;\r\n        default:\r\n            if ((process.env.NODE_ENV !== 'production')) ;\r\n            return 0 /* NOT_CONSTANT */;\r\n    }\r\n}\r\nconst allowHoistedHelperSet = new Set([\r\n    NORMALIZE_CLASS,\r\n    NORMALIZE_STYLE,\r\n    NORMALIZE_PROPS,\r\n    GUARD_REACTIVE_PROPS\r\n]);\r\nfunction getConstantTypeOfHelperCall(value, context) {\r\n    if (value.type === 14 /* JS_CALL_EXPRESSION */ &&\r\n        !isString(value.callee) &&\r\n        allowHoistedHelperSet.has(value.callee)) {\r\n        const arg = value.arguments[0];\r\n        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            return getConstantType(arg, context);\r\n        }\r\n        else if (arg.type === 14 /* JS_CALL_EXPRESSION */) {\r\n            // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(exp))`\r\n            return getConstantTypeOfHelperCall(arg, context);\r\n        }\r\n    }\r\n    return 0 /* NOT_CONSTANT */;\r\n}\r\nfunction getGeneratedPropsConstantType(node, context) {\r\n    let returnType = 3 /* CAN_STRINGIFY */;\r\n    const props = getNodeProps(node);\r\n    if (props && props.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n        const { properties } = props;\r\n        for (let i = 0; i < properties.length; i++) {\r\n            const { key, value } = properties[i];\r\n            const keyType = getConstantType(key, context);\r\n            if (keyType === 0 /* NOT_CONSTANT */) {\r\n                return keyType;\r\n            }\r\n            if (keyType < returnType) {\r\n                returnType = keyType;\r\n            }\r\n            let valueType;\r\n            if (value.type === 4 /* SIMPLE_EXPRESSION */) {\r\n                valueType = getConstantType(value, context);\r\n            }\r\n            else if (value.type === 14 /* JS_CALL_EXPRESSION */) {\r\n                // some helper calls can be hoisted,\r\n                // such as the `normalizeProps` generated by the compiler for pre-normalize class,\r\n                // in this case we need to respect the ConstantType of the helper's argments\r\n                valueType = getConstantTypeOfHelperCall(value, context);\r\n            }\r\n            else {\r\n                valueType = 0 /* NOT_CONSTANT */;\r\n            }\r\n            if (valueType === 0 /* NOT_CONSTANT */) {\r\n                return valueType;\r\n            }\r\n            if (valueType < returnType) {\r\n                returnType = valueType;\r\n            }\r\n        }\r\n    }\r\n    return returnType;\r\n}\r\nfunction getNodeProps(node) {\r\n    const codegenNode = node.codegenNode;\r\n    if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n        return codegenNode.props;\r\n    }\r\n}\r\nfunction getPatchFlag(node) {\r\n    const flag = node.patchFlag;\r\n    return flag ? parseInt(flag, 10) : undefined;\r\n}\n\nfunction createTransformContext(root, { filename = '', prefixIdentifiers = false, hoistStatic = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = NOOP, isCustomElement = NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, inSSR = false, ssrCssVars = ``, bindingMetadata = EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError, onWarn = defaultOnWarn, compatConfig }) {\r\n    const nameMatch = filename.replace(/\\?.*$/, '').match(/([^/\\\\]+)\\.\\w+$/);\r\n    const context = {\r\n        // options\r\n        selfName: nameMatch && capitalize(camelize$1(nameMatch[1])),\r\n        prefixIdentifiers,\r\n        hoistStatic,\r\n        cacheHandlers,\r\n        nodeTransforms,\r\n        directiveTransforms,\r\n        transformHoist,\r\n        isBuiltInComponent,\r\n        isCustomElement,\r\n        expressionPlugins,\r\n        scopeId,\r\n        slotted,\r\n        ssr,\r\n        inSSR,\r\n        ssrCssVars,\r\n        bindingMetadata,\r\n        inline,\r\n        isTS,\r\n        onError,\r\n        onWarn,\r\n        compatConfig,\r\n        // state\r\n        root,\r\n        helpers: new Map(),\r\n        components: new Set(),\r\n        directives: new Set(),\r\n        hoists: [],\r\n        imports: [],\r\n        constantCache: new Map(),\r\n        temps: 0,\r\n        cached: 0,\r\n        identifiers: Object.create(null),\r\n        scopes: {\r\n            vFor: 0,\r\n            vSlot: 0,\r\n            vPre: 0,\r\n            vOnce: 0\r\n        },\r\n        parent: null,\r\n        currentNode: root,\r\n        childIndex: 0,\r\n        inVOnce: false,\r\n        // methods\r\n        helper(name) {\r\n            const count = context.helpers.get(name) || 0;\r\n            context.helpers.set(name, count + 1);\r\n            return name;\r\n        },\r\n        removeHelper(name) {\r\n            const count = context.helpers.get(name);\r\n            if (count) {\r\n                const currentCount = count - 1;\r\n                if (!currentCount) {\r\n                    context.helpers.delete(name);\r\n                }\r\n                else {\r\n                    context.helpers.set(name, currentCount);\r\n                }\r\n            }\r\n        },\r\n        helperString(name) {\r\n            return `_${helperNameMap[context.helper(name)]}`;\r\n        },\r\n        replaceNode(node) {\r\n            /* istanbul ignore if */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!context.currentNode) {\r\n                    throw new Error(`Node being replaced is already removed.`);\r\n                }\r\n                if (!context.parent) {\r\n                    throw new Error(`Cannot replace root node.`);\r\n                }\r\n            }\r\n            context.parent.children[context.childIndex] = context.currentNode = node;\r\n        },\r\n        removeNode(node) {\r\n            if ((process.env.NODE_ENV !== 'production') && !context.parent) {\r\n                throw new Error(`Cannot remove root node.`);\r\n            }\r\n            const list = context.parent.children;\r\n            const removalIndex = node\r\n                ? list.indexOf(node)\r\n                : context.currentNode\r\n                    ? context.childIndex\r\n                    : -1;\r\n            /* istanbul ignore if */\r\n            if ((process.env.NODE_ENV !== 'production') && removalIndex < 0) {\r\n                throw new Error(`node being removed is not a child of current parent`);\r\n            }\r\n            if (!node || node === context.currentNode) {\r\n                // current node removed\r\n                context.currentNode = null;\r\n                context.onNodeRemoved();\r\n            }\r\n            else {\r\n                // sibling node removed\r\n                if (context.childIndex > removalIndex) {\r\n                    context.childIndex--;\r\n                    context.onNodeRemoved();\r\n                }\r\n            }\r\n            context.parent.children.splice(removalIndex, 1);\r\n        },\r\n        onNodeRemoved: () => { },\r\n        addIdentifiers(exp) {\r\n        },\r\n        removeIdentifiers(exp) {\r\n        },\r\n        hoist(exp) {\r\n            if (isString(exp))\r\n                exp = createSimpleExpression(exp);\r\n            context.hoists.push(exp);\r\n            const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2 /* CAN_HOIST */);\r\n            identifier.hoisted = exp;\r\n            return identifier;\r\n        },\r\n        cache(exp, isVNode = false) {\r\n            return createCacheExpression(context.cached++, exp, isVNode);\r\n        }\r\n    };\r\n    {\r\n        context.filters = new Set();\r\n    }\r\n    return context;\r\n}\r\nfunction transform(root, options) {\r\n    const context = createTransformContext(root, options);\r\n    traverseNode(root, context);\r\n    if (options.hoistStatic) {\r\n        hoistStatic(root, context);\r\n    }\r\n    if (!options.ssr) {\r\n        createRootCodegen(root, context);\r\n    }\r\n    // finalize meta information\r\n    root.helpers = [...context.helpers.keys()];\r\n    root.components = [...context.components];\r\n    root.directives = [...context.directives];\r\n    root.imports = context.imports;\r\n    root.hoists = context.hoists;\r\n    root.temps = context.temps;\r\n    root.cached = context.cached;\r\n    {\r\n        root.filters = [...context.filters];\r\n    }\r\n}\r\nfunction createRootCodegen(root, context) {\r\n    const { helper } = context;\r\n    const { children } = root;\r\n    if (children.length === 1) {\r\n        const child = children[0];\r\n        // if the single child is an element, turn it into a block.\r\n        if (isSingleElementRoot(root, child) && child.codegenNode) {\r\n            // single element root is never hoisted so codegenNode will never be\r\n            // SimpleExpressionNode\r\n            const codegenNode = child.codegenNode;\r\n            if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n                makeBlock(codegenNode, context);\r\n            }\r\n            root.codegenNode = codegenNode;\r\n        }\r\n        else {\r\n            // - single <slot/>, IfNode, ForNode: already blocks.\r\n            // - single text node: always patched.\r\n            // root codegen falls through via genNode()\r\n            root.codegenNode = child;\r\n        }\r\n    }\r\n    else if (children.length > 1) {\r\n        // root has multiple nodes - return a fragment block.\r\n        let patchFlag = 64 /* STABLE_FRAGMENT */;\r\n        let patchFlagText = PatchFlagNames[64 /* STABLE_FRAGMENT */];\r\n        // check if the fragment actually contains a single valid child with\r\n        // the rest being comments\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            children.filter(c => c.type !== 3 /* COMMENT */).length === 1) {\r\n            patchFlag |= 2048 /* DEV_ROOT_FRAGMENT */;\r\n            patchFlagText += `, ${PatchFlagNames[2048 /* DEV_ROOT_FRAGMENT */]}`;\r\n        }\r\n        root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, patchFlag + ((process.env.NODE_ENV !== 'production') ? ` /* ${patchFlagText} */` : ``), undefined, undefined, true, undefined, false /* isComponent */);\r\n    }\r\n    else ;\r\n}\r\nfunction traverseChildren(parent, context) {\r\n    let i = 0;\r\n    const nodeRemoved = () => {\r\n        i--;\r\n    };\r\n    for (; i < parent.children.length; i++) {\r\n        const child = parent.children[i];\r\n        if (isString(child))\r\n            continue;\r\n        context.parent = parent;\r\n        context.childIndex = i;\r\n        context.onNodeRemoved = nodeRemoved;\r\n        traverseNode(child, context);\r\n    }\r\n}\r\nfunction traverseNode(node, context) {\r\n    context.currentNode = node;\r\n    // apply transform plugins\r\n    const { nodeTransforms } = context;\r\n    const exitFns = [];\r\n    for (let i = 0; i < nodeTransforms.length; i++) {\r\n        const onExit = nodeTransforms[i](node, context);\r\n        if (onExit) {\r\n            if (isArray(onExit)) {\r\n                exitFns.push(...onExit);\r\n            }\r\n            else {\r\n                exitFns.push(onExit);\r\n            }\r\n        }\r\n        if (!context.currentNode) {\r\n            // node was removed\r\n            return;\r\n        }\r\n        else {\r\n            // node may have been replaced\r\n            node = context.currentNode;\r\n        }\r\n    }\r\n    switch (node.type) {\r\n        case 3 /* COMMENT */:\r\n            if (!context.ssr) {\r\n                // inject import for the Comment symbol, which is needed for creating\r\n                // comment nodes with `createVNode`\r\n                context.helper(CREATE_COMMENT);\r\n            }\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            // no need to traverse, but we need to inject toString helper\r\n            if (!context.ssr) {\r\n                context.helper(TO_DISPLAY_STRING);\r\n            }\r\n            break;\r\n        // for container types, further traverse downwards\r\n        case 9 /* IF */:\r\n            for (let i = 0; i < node.branches.length; i++) {\r\n                traverseNode(node.branches[i], context);\r\n            }\r\n            break;\r\n        case 10 /* IF_BRANCH */:\r\n        case 11 /* FOR */:\r\n        case 1 /* ELEMENT */:\r\n        case 0 /* ROOT */:\r\n            traverseChildren(node, context);\r\n            break;\r\n    }\r\n    // exit transforms\r\n    context.currentNode = node;\r\n    let i = exitFns.length;\r\n    while (i--) {\r\n        exitFns[i]();\r\n    }\r\n}\r\nfunction createStructuralDirectiveTransform(name, fn) {\r\n    const matches = isString(name)\r\n        ? (n) => n === name\r\n        : (n) => name.test(n);\r\n    return (node, context) => {\r\n        if (node.type === 1 /* ELEMENT */) {\r\n            const { props } = node;\r\n            // structural directive transforms are not concerned with slots\r\n            // as they are handled separately in vSlot.ts\r\n            if (node.tagType === 3 /* TEMPLATE */ && props.some(isVSlot)) {\r\n                return;\r\n            }\r\n            const exitFns = [];\r\n            for (let i = 0; i < props.length; i++) {\r\n                const prop = props[i];\r\n                if (prop.type === 7 /* DIRECTIVE */ && matches(prop.name)) {\r\n                    // structural directives are removed to avoid infinite recursion\r\n                    // also we remove them *before* applying so that it can further\r\n                    // traverse itself in case it moves the node around\r\n                    props.splice(i, 1);\r\n                    i--;\r\n                    const onExit = fn(node, prop, context);\r\n                    if (onExit)\r\n                        exitFns.push(onExit);\r\n                }\r\n            }\r\n            return exitFns;\r\n        }\r\n    };\r\n}\n\nconst PURE_ANNOTATION = `/*#__PURE__*/`;\r\nfunction createCodegenContext(ast, { mode = 'function', prefixIdentifiers = mode === 'module', sourceMap = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssr = false, isTS = false, inSSR = false }) {\r\n    const context = {\r\n        mode,\r\n        prefixIdentifiers,\r\n        sourceMap,\r\n        filename,\r\n        scopeId,\r\n        optimizeImports,\r\n        runtimeGlobalName,\r\n        runtimeModuleName,\r\n        ssr,\r\n        isTS,\r\n        inSSR,\r\n        source: ast.loc.source,\r\n        code: ``,\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        indentLevel: 0,\r\n        pure: false,\r\n        map: undefined,\r\n        helper(key) {\r\n            return `_${helperNameMap[key]}`;\r\n        },\r\n        push(code, node) {\r\n            context.code += code;\r\n        },\r\n        indent() {\r\n            newline(++context.indentLevel);\r\n        },\r\n        deindent(withoutNewLine = false) {\r\n            if (withoutNewLine) {\r\n                --context.indentLevel;\r\n            }\r\n            else {\r\n                newline(--context.indentLevel);\r\n            }\r\n        },\r\n        newline() {\r\n            newline(context.indentLevel);\r\n        }\r\n    };\r\n    function newline(n) {\r\n        context.push('\\n' + `  `.repeat(n));\r\n    }\r\n    return context;\r\n}\r\nfunction generate(ast, options = {}) {\r\n    const context = createCodegenContext(ast, options);\r\n    if (options.onContextCreated)\r\n        options.onContextCreated(context);\r\n    const { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } = context;\r\n    const hasHelpers = ast.helpers.length > 0;\r\n    const useWithBlock = !prefixIdentifiers && mode !== 'module';\r\n    // preambles\r\n    // in setup() inline mode, the preamble is generated in a sub context\r\n    // and returned separately.\r\n    const preambleContext = context;\r\n    {\r\n        genFunctionPreamble(ast, preambleContext);\r\n    }\r\n    // enter render function\r\n    const functionName = ssr ? `ssrRender` : `render`;\r\n    const args = ssr ? ['_ctx', '_push', '_parent', '_attrs'] : ['_ctx', '_cache'];\r\n    const signature = args.join(', ');\r\n    {\r\n        push(`function ${functionName}(${signature}) {`);\r\n    }\r\n    indent();\r\n    if (useWithBlock) {\r\n        push(`with (_ctx) {`);\r\n        indent();\r\n        // function mode const declarations should be inside with block\r\n        // also they should be renamed to avoid collision with user properties\r\n        if (hasHelpers) {\r\n            push(`const { ${ast.helpers\r\n                .map(s => `${helperNameMap[s]}: _${helperNameMap[s]}`)\r\n                .join(', ')} } = _Vue`);\r\n            push(`\\n`);\r\n            newline();\r\n        }\r\n    }\r\n    // generate asset resolution statements\r\n    if (ast.components.length) {\r\n        genAssets(ast.components, 'component', context);\r\n        if (ast.directives.length || ast.temps > 0) {\r\n            newline();\r\n        }\r\n    }\r\n    if (ast.directives.length) {\r\n        genAssets(ast.directives, 'directive', context);\r\n        if (ast.temps > 0) {\r\n            newline();\r\n        }\r\n    }\r\n    if (ast.filters && ast.filters.length) {\r\n        newline();\r\n        genAssets(ast.filters, 'filter', context);\r\n        newline();\r\n    }\r\n    if (ast.temps > 0) {\r\n        push(`let `);\r\n        for (let i = 0; i < ast.temps; i++) {\r\n            push(`${i > 0 ? `, ` : ``}_temp${i}`);\r\n        }\r\n    }\r\n    if (ast.components.length || ast.directives.length || ast.temps) {\r\n        push(`\\n`);\r\n        newline();\r\n    }\r\n    // generate the VNode tree expression\r\n    if (!ssr) {\r\n        push(`return `);\r\n    }\r\n    if (ast.codegenNode) {\r\n        genNode(ast.codegenNode, context);\r\n    }\r\n    else {\r\n        push(`null`);\r\n    }\r\n    if (useWithBlock) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n    deindent();\r\n    push(`}`);\r\n    return {\r\n        ast,\r\n        code: context.code,\r\n        preamble: ``,\r\n        // SourceMapGenerator does have toJSON() method but it's not in the types\r\n        map: context.map ? context.map.toJSON() : undefined\r\n    };\r\n}\r\nfunction genFunctionPreamble(ast, context) {\r\n    const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName } = context;\r\n    const VueBinding = runtimeGlobalName;\r\n    const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;\r\n    // Generate const declaration for helpers\r\n    // In prefix mode, we place the const declaration at top so it's done\r\n    // only once; But if we not prefixing, we place the declaration inside the\r\n    // with block so it doesn't incur the `in` check cost for every helper access.\r\n    if (ast.helpers.length > 0) {\r\n        {\r\n            // \"with\" mode.\r\n            // save Vue in a separate variable to avoid collision\r\n            push(`const _Vue = ${VueBinding}\\n`);\r\n            // in \"with\" mode, helpers are declared inside the with block to avoid\r\n            // has check cost, but hoists are lifted out of the function - we need\r\n            // to provide the helper here.\r\n            if (ast.hoists.length) {\r\n                const staticHelpers = [\r\n                    CREATE_VNODE,\r\n                    CREATE_ELEMENT_VNODE,\r\n                    CREATE_COMMENT,\r\n                    CREATE_TEXT,\r\n                    CREATE_STATIC\r\n                ]\r\n                    .filter(helper => ast.helpers.includes(helper))\r\n                    .map(aliasHelper)\r\n                    .join(', ');\r\n                push(`const { ${staticHelpers} } = _Vue\\n`);\r\n            }\r\n        }\r\n    }\r\n    genHoists(ast.hoists, context);\r\n    newline();\r\n    push(`return `);\r\n}\r\nfunction genAssets(assets, type, { helper, push, newline, isTS }) {\r\n    const resolver = helper(type === 'filter'\r\n        ? RESOLVE_FILTER\r\n        : type === 'component'\r\n            ? RESOLVE_COMPONENT\r\n            : RESOLVE_DIRECTIVE);\r\n    for (let i = 0; i < assets.length; i++) {\r\n        let id = assets[i];\r\n        // potential component implicit self-reference inferred from SFC filename\r\n        const maybeSelfReference = id.endsWith('__self');\r\n        if (maybeSelfReference) {\r\n            id = id.slice(0, -6);\r\n        }\r\n        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);\r\n        if (i < assets.length - 1) {\r\n            newline();\r\n        }\r\n    }\r\n}\r\nfunction genHoists(hoists, context) {\r\n    if (!hoists.length) {\r\n        return;\r\n    }\r\n    context.pure = true;\r\n    const { push, newline, helper, scopeId, mode } = context;\r\n    newline();\r\n    for (let i = 0; i < hoists.length; i++) {\r\n        const exp = hoists[i];\r\n        if (exp) {\r\n            push(`const _hoisted_${i + 1} = ${``}`);\r\n            genNode(exp, context);\r\n            newline();\r\n        }\r\n    }\r\n    context.pure = false;\r\n}\r\nfunction isText$1(n) {\r\n    return (isString(n) ||\r\n        n.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n        n.type === 2 /* TEXT */ ||\r\n        n.type === 5 /* INTERPOLATION */ ||\r\n        n.type === 8 /* COMPOUND_EXPRESSION */);\r\n}\r\nfunction genNodeListAsArray(nodes, context) {\r\n    const multilines = nodes.length > 3 ||\r\n        (((process.env.NODE_ENV !== 'production')) && nodes.some(n => isArray(n) || !isText$1(n)));\r\n    context.push(`[`);\r\n    multilines && context.indent();\r\n    genNodeList(nodes, context, multilines);\r\n    multilines && context.deindent();\r\n    context.push(`]`);\r\n}\r\nfunction genNodeList(nodes, context, multilines = false, comma = true) {\r\n    const { push, newline } = context;\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i];\r\n        if (isString(node)) {\r\n            push(node);\r\n        }\r\n        else if (isArray(node)) {\r\n            genNodeListAsArray(node, context);\r\n        }\r\n        else {\r\n            genNode(node, context);\r\n        }\r\n        if (i < nodes.length - 1) {\r\n            if (multilines) {\r\n                comma && push(',');\r\n                newline();\r\n            }\r\n            else {\r\n                comma && push(', ');\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction genNode(node, context) {\r\n    if (isString(node)) {\r\n        context.push(node);\r\n        return;\r\n    }\r\n    if (isSymbol(node)) {\r\n        context.push(context.helper(node));\r\n        return;\r\n    }\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                assert(node.codegenNode != null, `Codegen node is missing for element/if/for node. ` +\r\n                    `Apply appropriate transforms first.`);\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 2 /* TEXT */:\r\n            genText(node, context);\r\n            break;\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            genExpression(node, context);\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            genInterpolation(node, context);\r\n            break;\r\n        case 12 /* TEXT_CALL */:\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            genCompoundExpression(node, context);\r\n            break;\r\n        case 3 /* COMMENT */:\r\n            genComment(node, context);\r\n            break;\r\n        case 13 /* VNODE_CALL */:\r\n            genVNodeCall(node, context);\r\n            break;\r\n        case 14 /* JS_CALL_EXPRESSION */:\r\n            genCallExpression(node, context);\r\n            break;\r\n        case 15 /* JS_OBJECT_EXPRESSION */:\r\n            genObjectExpression(node, context);\r\n            break;\r\n        case 17 /* JS_ARRAY_EXPRESSION */:\r\n            genArrayExpression(node, context);\r\n            break;\r\n        case 18 /* JS_FUNCTION_EXPRESSION */:\r\n            genFunctionExpression(node, context);\r\n            break;\r\n        case 19 /* JS_CONDITIONAL_EXPRESSION */:\r\n            genConditionalExpression(node, context);\r\n            break;\r\n        case 20 /* JS_CACHE_EXPRESSION */:\r\n            genCacheExpression(node, context);\r\n            break;\r\n        case 21 /* JS_BLOCK_STATEMENT */:\r\n            genNodeList(node.body, context, true, false);\r\n            break;\r\n        // SSR only types\r\n        case 22 /* JS_TEMPLATE_LITERAL */:\r\n            break;\r\n        case 23 /* JS_IF_STATEMENT */:\r\n            break;\r\n        case 24 /* JS_ASSIGNMENT_EXPRESSION */:\r\n            break;\r\n        case 25 /* JS_SEQUENCE_EXPRESSION */:\r\n            break;\r\n        case 26 /* JS_RETURN_STATEMENT */:\r\n            break;\r\n        /* istanbul ignore next */\r\n        case 10 /* IF_BRANCH */:\r\n            // noop\r\n            break;\r\n        default:\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                assert(false, `unhandled codegen node type: ${node.type}`);\r\n                // make sure we exhaust all possible types\r\n                const exhaustiveCheck = node;\r\n                return exhaustiveCheck;\r\n            }\r\n    }\r\n}\r\nfunction genText(node, context) {\r\n    context.push(JSON.stringify(node.content), node);\r\n}\r\nfunction genExpression(node, context) {\r\n    const { content, isStatic } = node;\r\n    context.push(isStatic ? JSON.stringify(content) : content, node);\r\n}\r\nfunction genInterpolation(node, context) {\r\n    const { push, helper, pure } = context;\r\n    if (pure)\r\n        push(PURE_ANNOTATION);\r\n    push(`${helper(TO_DISPLAY_STRING)}(`);\r\n    genNode(node.content, context);\r\n    push(`)`);\r\n}\r\nfunction genCompoundExpression(node, context) {\r\n    for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i];\r\n        if (isString(child)) {\r\n            context.push(child);\r\n        }\r\n        else {\r\n            genNode(child, context);\r\n        }\r\n    }\r\n}\r\nfunction genExpressionAsPropertyKey(node, context) {\r\n    const { push } = context;\r\n    if (node.type === 8 /* COMPOUND_EXPRESSION */) {\r\n        push(`[`);\r\n        genCompoundExpression(node, context);\r\n        push(`]`);\r\n    }\r\n    else if (node.isStatic) {\r\n        // only quote keys if necessary\r\n        const text = isSimpleIdentifier(node.content)\r\n            ? node.content\r\n            : JSON.stringify(node.content);\r\n        push(text, node);\r\n    }\r\n    else {\r\n        push(`[${node.content}]`, node);\r\n    }\r\n}\r\nfunction genComment(node, context) {\r\n    const { push, helper, pure } = context;\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);\r\n}\r\nfunction genVNodeCall(node, context) {\r\n    const { push, helper, pure } = context;\r\n    const { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking, isComponent } = node;\r\n    if (directives) {\r\n        push(helper(WITH_DIRECTIVES) + `(`);\r\n    }\r\n    if (isBlock) {\r\n        push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);\r\n    }\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    const callHelper = isBlock\r\n        ? getVNodeBlockHelper(context.inSSR, isComponent)\r\n        : getVNodeHelper(context.inSSR, isComponent);\r\n    push(helper(callHelper) + `(`, node);\r\n    genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context);\r\n    push(`)`);\r\n    if (isBlock) {\r\n        push(`)`);\r\n    }\r\n    if (directives) {\r\n        push(`, `);\r\n        genNode(directives, context);\r\n        push(`)`);\r\n    }\r\n}\r\nfunction genNullableArgs(args) {\r\n    let i = args.length;\r\n    while (i--) {\r\n        if (args[i] != null)\r\n            break;\r\n    }\r\n    return args.slice(0, i + 1).map(arg => arg || `null`);\r\n}\r\n// JavaScript\r\nfunction genCallExpression(node, context) {\r\n    const { push, helper, pure } = context;\r\n    const callee = isString(node.callee) ? node.callee : helper(node.callee);\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    push(callee + `(`, node);\r\n    genNodeList(node.arguments, context);\r\n    push(`)`);\r\n}\r\nfunction genObjectExpression(node, context) {\r\n    const { push, indent, deindent, newline } = context;\r\n    const { properties } = node;\r\n    if (!properties.length) {\r\n        push(`{}`, node);\r\n        return;\r\n    }\r\n    const multilines = properties.length > 1 ||\r\n        (((process.env.NODE_ENV !== 'production')) &&\r\n            properties.some(p => p.value.type !== 4 /* SIMPLE_EXPRESSION */));\r\n    push(multilines ? `{` : `{ `);\r\n    multilines && indent();\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const { key, value } = properties[i];\r\n        // key\r\n        genExpressionAsPropertyKey(key, context);\r\n        push(`: `);\r\n        // value\r\n        genNode(value, context);\r\n        if (i < properties.length - 1) {\r\n            // will only reach this if it's multilines\r\n            push(`,`);\r\n            newline();\r\n        }\r\n    }\r\n    multilines && deindent();\r\n    push(multilines ? `}` : ` }`);\r\n}\r\nfunction genArrayExpression(node, context) {\r\n    genNodeListAsArray(node.elements, context);\r\n}\r\nfunction genFunctionExpression(node, context) {\r\n    const { push, indent, deindent } = context;\r\n    const { params, returns, body, newline, isSlot } = node;\r\n    if (isSlot) {\r\n        // wrap slot functions with owner context\r\n        push(`_${helperNameMap[WITH_CTX]}(`);\r\n    }\r\n    push(`(`, node);\r\n    if (isArray(params)) {\r\n        genNodeList(params, context);\r\n    }\r\n    else if (params) {\r\n        genNode(params, context);\r\n    }\r\n    push(`) => `);\r\n    if (newline || body) {\r\n        push(`{`);\r\n        indent();\r\n    }\r\n    if (returns) {\r\n        if (newline) {\r\n            push(`return `);\r\n        }\r\n        if (isArray(returns)) {\r\n            genNodeListAsArray(returns, context);\r\n        }\r\n        else {\r\n            genNode(returns, context);\r\n        }\r\n    }\r\n    else if (body) {\r\n        genNode(body, context);\r\n    }\r\n    if (newline || body) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n    if (isSlot) {\r\n        if (node.isNonScopedSlot) {\r\n            push(`, undefined, true`);\r\n        }\r\n        push(`)`);\r\n    }\r\n}\r\nfunction genConditionalExpression(node, context) {\r\n    const { test, consequent, alternate, newline: needNewline } = node;\r\n    const { push, indent, deindent, newline } = context;\r\n    if (test.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        const needsParens = !isSimpleIdentifier(test.content);\r\n        needsParens && push(`(`);\r\n        genExpression(test, context);\r\n        needsParens && push(`)`);\r\n    }\r\n    else {\r\n        push(`(`);\r\n        genNode(test, context);\r\n        push(`)`);\r\n    }\r\n    needNewline && indent();\r\n    context.indentLevel++;\r\n    needNewline || push(` `);\r\n    push(`? `);\r\n    genNode(consequent, context);\r\n    context.indentLevel--;\r\n    needNewline && newline();\r\n    needNewline || push(` `);\r\n    push(`: `);\r\n    const isNested = alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */;\r\n    if (!isNested) {\r\n        context.indentLevel++;\r\n    }\r\n    genNode(alternate, context);\r\n    if (!isNested) {\r\n        context.indentLevel--;\r\n    }\r\n    needNewline && deindent(true /* without newline */);\r\n}\r\nfunction genCacheExpression(node, context) {\r\n    const { push, helper, indent, deindent, newline } = context;\r\n    push(`_cache[${node.index}] || (`);\r\n    if (node.isVNode) {\r\n        indent();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);\r\n        newline();\r\n    }\r\n    push(`_cache[${node.index}] = `);\r\n    genNode(node.value, context);\r\n    if (node.isVNode) {\r\n        push(`,`);\r\n        newline();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(1),`);\r\n        newline();\r\n        push(`_cache[${node.index}]`);\r\n        deindent();\r\n    }\r\n    push(`)`);\r\n}\n\nfunction walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = Object.create(null)) {\r\n    {\r\n        return;\r\n    }\r\n}\r\nfunction isReferencedIdentifier(id, parent, parentStack) {\r\n    {\r\n        return false;\r\n    }\r\n}\r\nfunction isInDestructureAssignment(parent, parentStack) {\r\n    if (parent &&\r\n        (parent.type === 'ObjectProperty' || parent.type === 'ArrayPattern')) {\r\n        let i = parentStack.length;\r\n        while (i--) {\r\n            const p = parentStack[i];\r\n            if (p.type === 'AssignmentExpression') {\r\n                return true;\r\n            }\r\n            else if (p.type !== 'ObjectProperty' && !p.type.endsWith('Pattern')) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction walkFunctionParams(node, onIdent) {\r\n    for (const p of node.params) {\r\n        for (const id of extractIdentifiers(p)) {\r\n            onIdent(id);\r\n        }\r\n    }\r\n}\r\nfunction walkBlockDeclarations(block, onIdent) {\r\n    for (const stmt of block.body) {\r\n        if (stmt.type === 'VariableDeclaration') {\r\n            if (stmt.declare)\r\n                continue;\r\n            for (const decl of stmt.declarations) {\r\n                for (const id of extractIdentifiers(decl.id)) {\r\n                    onIdent(id);\r\n                }\r\n            }\r\n        }\r\n        else if (stmt.type === 'FunctionDeclaration' ||\r\n            stmt.type === 'ClassDeclaration') {\r\n            if (stmt.declare || !stmt.id)\r\n                continue;\r\n            onIdent(stmt.id);\r\n        }\r\n    }\r\n}\r\nfunction extractIdentifiers(param, nodes = []) {\r\n    switch (param.type) {\r\n        case 'Identifier':\r\n            nodes.push(param);\r\n            break;\r\n        case 'MemberExpression':\r\n            let object = param;\r\n            while (object.type === 'MemberExpression') {\r\n                object = object.object;\r\n            }\r\n            nodes.push(object);\r\n            break;\r\n        case 'ObjectPattern':\r\n            for (const prop of param.properties) {\r\n                if (prop.type === 'RestElement') {\r\n                    extractIdentifiers(prop.argument, nodes);\r\n                }\r\n                else {\r\n                    extractIdentifiers(prop.value, nodes);\r\n                }\r\n            }\r\n            break;\r\n        case 'ArrayPattern':\r\n            param.elements.forEach(element => {\r\n                if (element)\r\n                    extractIdentifiers(element, nodes);\r\n            });\r\n            break;\r\n        case 'RestElement':\r\n            extractIdentifiers(param.argument, nodes);\r\n            break;\r\n        case 'AssignmentPattern':\r\n            extractIdentifiers(param.left, nodes);\r\n            break;\r\n    }\r\n    return nodes;\r\n}\r\nconst isFunctionType = (node) => {\r\n    return /Function(?:Expression|Declaration)$|Method$/.test(node.type);\r\n};\r\nconst isStaticProperty = (node) => node &&\r\n    (node.type === 'ObjectProperty' || node.type === 'ObjectMethod') &&\r\n    !node.computed;\r\nconst isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;\n\n// these keywords should not appear inside expressions, but operators like\r\n// typeof, instanceof and in are allowed\r\nconst prohibitedKeywordRE = new RegExp('\\\\b' +\r\n    ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n        'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n        'extends,finally,continue,debugger,function,arguments,typeof,void')\r\n        .split(',')\r\n        .join('\\\\b|\\\\b') +\r\n    '\\\\b');\r\n// strip strings in expressions\r\nconst stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n/**\r\n * Validate a non-prefixed expression.\r\n * This is only called when using the in-browser runtime compiler since it\r\n * doesn't prefix expressions.\r\n */\r\nfunction validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {\r\n    const exp = node.content;\r\n    // empty expressions are validated per-directive since some directives\r\n    // do allow empty expressions.\r\n    if (!exp.trim()) {\r\n        return;\r\n    }\r\n    try {\r\n        new Function(asRawStatements\r\n            ? ` ${exp} `\r\n            : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`);\r\n    }\r\n    catch (e) {\r\n        let message = e.message;\r\n        const keywordMatch = exp\r\n            .replace(stripStringRE, '')\r\n            .match(prohibitedKeywordRE);\r\n        if (keywordMatch) {\r\n            message = `avoid using JavaScript keyword as property name: \"${keywordMatch[0]}\"`;\r\n        }\r\n        context.onError(createCompilerError(44 /* X_INVALID_EXPRESSION */, node.loc, undefined, message));\r\n    }\r\n}\n\nconst transformExpression = (node, context) => {\r\n    if (node.type === 5 /* INTERPOLATION */) {\r\n        node.content = processExpression(node.content, context);\r\n    }\r\n    else if (node.type === 1 /* ELEMENT */) {\r\n        // handle directives on element\r\n        for (let i = 0; i < node.props.length; i++) {\r\n            const dir = node.props[i];\r\n            // do not process for v-on & v-for since they are special handled\r\n            if (dir.type === 7 /* DIRECTIVE */ && dir.name !== 'for') {\r\n                const exp = dir.exp;\r\n                const arg = dir.arg;\r\n                // do not process exp if this is v-on:arg - we need special handling\r\n                // for wrapping inline statements.\r\n                if (exp &&\r\n                    exp.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                    !(dir.name === 'on' && arg)) {\r\n                    dir.exp = processExpression(exp, context, \r\n                    // slot args must be processed as function params\r\n                    dir.name === 'slot');\r\n                }\r\n                if (arg && arg.type === 4 /* SIMPLE_EXPRESSION */ && !arg.isStatic) {\r\n                    dir.arg = processExpression(arg, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n// Important: since this function uses Node.js only dependencies, it should\r\n// always be used with a leading !true check so that it can be\r\n// tree-shaken from the browser build.\r\nfunction processExpression(node, context, \r\n// some expressions like v-slot props & v-for aliases should be parsed as\r\n// function params\r\nasParams = false, \r\n// v-on handler values may contain multiple statements\r\nasRawStatements = false, localVars = Object.create(context.identifiers)) {\r\n    {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            // simple in-browser validation (same logic in 2.x)\r\n            validateBrowserExpression(node, context, asParams, asRawStatements);\r\n        }\r\n        return node;\r\n    }\r\n}\n\nconst transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {\r\n    return processIf(node, dir, context, (ifNode, branch, isRoot) => {\r\n        // #1587: We need to dynamically increment the key based on the current\r\n        // node's sibling nodes, since chained v-if/else branches are\r\n        // rendered at the same depth\r\n        const siblings = context.parent.children;\r\n        let i = siblings.indexOf(ifNode);\r\n        let key = 0;\r\n        while (i-- >= 0) {\r\n            const sibling = siblings[i];\r\n            if (sibling && sibling.type === 9 /* IF */) {\r\n                key += sibling.branches.length;\r\n            }\r\n        }\r\n        // Exit callback. Complete the codegenNode when all children have been\r\n        // transformed.\r\n        return () => {\r\n            if (isRoot) {\r\n                ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);\r\n            }\r\n            else {\r\n                // attach this branch's codegen node to the v-if root.\r\n                const parentCondition = getParentCondition(ifNode.codegenNode);\r\n                parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);\r\n            }\r\n        };\r\n    });\r\n});\r\n// target-agnostic transform used for both Client and SSR\r\nfunction processIf(node, dir, context, processCodegen) {\r\n    if (dir.name !== 'else' &&\r\n        (!dir.exp || !dir.exp.content.trim())) {\r\n        const loc = dir.exp ? dir.exp.loc : node.loc;\r\n        context.onError(createCompilerError(28 /* X_V_IF_NO_EXPRESSION */, dir.loc));\r\n        dir.exp = createSimpleExpression(`true`, false, loc);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && true && dir.exp) {\r\n        validateBrowserExpression(dir.exp, context);\r\n    }\r\n    if (dir.name === 'if') {\r\n        const branch = createIfBranch(node, dir);\r\n        const ifNode = {\r\n            type: 9 /* IF */,\r\n            loc: node.loc,\r\n            branches: [branch]\r\n        };\r\n        context.replaceNode(ifNode);\r\n        if (processCodegen) {\r\n            return processCodegen(ifNode, branch, true);\r\n        }\r\n    }\r\n    else {\r\n        // locate the adjacent v-if\r\n        const siblings = context.parent.children;\r\n        const comments = [];\r\n        let i = siblings.indexOf(node);\r\n        while (i-- >= -1) {\r\n            const sibling = siblings[i];\r\n            if ((process.env.NODE_ENV !== 'production') && sibling && sibling.type === 3 /* COMMENT */) {\r\n                context.removeNode(sibling);\r\n                comments.unshift(sibling);\r\n                continue;\r\n            }\r\n            if (sibling &&\r\n                sibling.type === 2 /* TEXT */ &&\r\n                !sibling.content.trim().length) {\r\n                context.removeNode(sibling);\r\n                continue;\r\n            }\r\n            if (sibling && sibling.type === 9 /* IF */) {\r\n                // Check if v-else was followed by v-else-if\r\n                if (dir.name === 'else-if' &&\r\n                    sibling.branches[sibling.branches.length - 1].condition === undefined) {\r\n                    context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc));\r\n                }\r\n                // move the node to the if node's branches\r\n                context.removeNode();\r\n                const branch = createIfBranch(node, dir);\r\n                if ((process.env.NODE_ENV !== 'production') &&\r\n                    comments.length &&\r\n                    // #3619 ignore comments if the v-if is direct child of <transition>\r\n                    !(context.parent &&\r\n                        context.parent.type === 1 /* ELEMENT */ &&\r\n                        isBuiltInType(context.parent.tag, 'transition'))) {\r\n                    branch.children = [...comments, ...branch.children];\r\n                }\r\n                // check if user is forcing same key on different branches\r\n                if ((process.env.NODE_ENV !== 'production') || !true) {\r\n                    const key = branch.userKey;\r\n                    if (key) {\r\n                        sibling.branches.forEach(({ userKey }) => {\r\n                            if (isSameKey(userKey, key)) {\r\n                                context.onError(createCompilerError(29 /* X_V_IF_SAME_KEY */, branch.userKey.loc));\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                sibling.branches.push(branch);\r\n                const onExit = processCodegen && processCodegen(sibling, branch, false);\r\n                // since the branch was removed, it will not be traversed.\r\n                // make sure to traverse here.\r\n                traverseNode(branch, context);\r\n                // call on exit\r\n                if (onExit)\r\n                    onExit();\r\n                // make sure to reset currentNode after traversal to indicate this\r\n                // node has been removed.\r\n                context.currentNode = null;\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\nfunction createIfBranch(node, dir) {\r\n    return {\r\n        type: 10 /* IF_BRANCH */,\r\n        loc: node.loc,\r\n        condition: dir.name === 'else' ? undefined : dir.exp,\r\n        children: node.tagType === 3 /* TEMPLATE */ && !findDir(node, 'for')\r\n            ? node.children\r\n            : [node],\r\n        userKey: findProp(node, `key`)\r\n    };\r\n}\r\nfunction createCodegenNodeForBranch(branch, keyIndex, context) {\r\n    if (branch.condition) {\r\n        return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), \r\n        // make sure to pass in asBlock: true so that the comment node call\r\n        // closes the current block.\r\n        createCallExpression(context.helper(CREATE_COMMENT), [\r\n            (process.env.NODE_ENV !== 'production') ? '\"v-if\"' : '\"\"',\r\n            'true'\r\n        ]));\r\n    }\r\n    else {\r\n        return createChildrenCodegenNode(branch, keyIndex, context);\r\n    }\r\n}\r\nfunction createChildrenCodegenNode(branch, keyIndex, context) {\r\n    const { helper } = context;\r\n    const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2 /* CAN_HOIST */));\r\n    const { children } = branch;\r\n    const firstChild = children[0];\r\n    const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1 /* ELEMENT */;\r\n    if (needFragmentWrapper) {\r\n        if (children.length === 1 && firstChild.type === 11 /* FOR */) {\r\n            // optimize away nested fragments when child is a ForNode\r\n            const vnodeCall = firstChild.codegenNode;\r\n            injectProp(vnodeCall, keyProperty, context);\r\n            return vnodeCall;\r\n        }\r\n        else {\r\n            let patchFlag = 64 /* STABLE_FRAGMENT */;\r\n            let patchFlagText = PatchFlagNames[64 /* STABLE_FRAGMENT */];\r\n            // check if the fragment actually contains a single valid child with\r\n            // the rest being comments\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                children.filter(c => c.type !== 3 /* COMMENT */).length === 1) {\r\n                patchFlag |= 2048 /* DEV_ROOT_FRAGMENT */;\r\n                patchFlagText += `, ${PatchFlagNames[2048 /* DEV_ROOT_FRAGMENT */]}`;\r\n            }\r\n            return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, patchFlag + ((process.env.NODE_ENV !== 'production') ? ` /* ${patchFlagText} */` : ``), undefined, undefined, true, false, false /* isComponent */, branch.loc);\r\n        }\r\n    }\r\n    else {\r\n        const ret = firstChild.codegenNode;\r\n        const vnodeCall = getMemoedVNodeCall(ret);\r\n        // Change createVNode to createBlock.\r\n        if (vnodeCall.type === 13 /* VNODE_CALL */) {\r\n            makeBlock(vnodeCall, context);\r\n        }\r\n        // inject branch key\r\n        injectProp(vnodeCall, keyProperty, context);\r\n        return ret;\r\n    }\r\n}\r\nfunction isSameKey(a, b) {\r\n    if (!a || a.type !== b.type) {\r\n        return false;\r\n    }\r\n    if (a.type === 6 /* ATTRIBUTE */) {\r\n        if (a.value.content !== b.value.content) {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        // directive\r\n        const exp = a.exp;\r\n        const branchExp = b.exp;\r\n        if (exp.type !== branchExp.type) {\r\n            return false;\r\n        }\r\n        if (exp.type !== 4 /* SIMPLE_EXPRESSION */ ||\r\n            exp.isStatic !== branchExp.isStatic ||\r\n            exp.content !== branchExp.content) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction getParentCondition(node) {\r\n    while (true) {\r\n        if (node.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n            if (node.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                node = node.alternate;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n        }\r\n        else if (node.type === 20 /* JS_CACHE_EXPRESSION */) {\r\n            node = node.value;\r\n        }\r\n    }\r\n}\n\nconst transformFor = createStructuralDirectiveTransform('for', (node, dir, context) => {\r\n    const { helper, removeHelper } = context;\r\n    return processFor(node, dir, context, forNode => {\r\n        // create the loop render function expression now, and add the\r\n        // iterator on exit after all children have been traversed\r\n        const renderExp = createCallExpression(helper(RENDER_LIST), [\r\n            forNode.source\r\n        ]);\r\n        const memo = findDir(node, 'memo');\r\n        const keyProp = findProp(node, `key`);\r\n        const keyExp = keyProp &&\r\n            (keyProp.type === 6 /* ATTRIBUTE */\r\n                ? createSimpleExpression(keyProp.value.content, true)\r\n                : keyProp.exp);\r\n        const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;\r\n        const isStableFragment = forNode.source.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n            forNode.source.constType > 0 /* NOT_CONSTANT */;\r\n        const fragmentFlag = isStableFragment\r\n            ? 64 /* STABLE_FRAGMENT */\r\n            : keyProp\r\n                ? 128 /* KEYED_FRAGMENT */\r\n                : 256 /* UNKEYED_FRAGMENT */;\r\n        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, renderExp, fragmentFlag +\r\n            ((process.env.NODE_ENV !== 'production') ? ` /* ${PatchFlagNames[fragmentFlag]} */` : ``), undefined, undefined, true /* isBlock */, !isStableFragment /* disableTracking */, false /* isComponent */, node.loc);\r\n        return () => {\r\n            // finish the codegen now that all children have been traversed\r\n            let childBlock;\r\n            const isTemplate = isTemplateNode(node);\r\n            const { children } = forNode;\r\n            // check <template v-for> key placement\r\n            if (((process.env.NODE_ENV !== 'production') || !true) && isTemplate) {\r\n                node.children.some(c => {\r\n                    if (c.type === 1 /* ELEMENT */) {\r\n                        const key = findProp(c, 'key');\r\n                        if (key) {\r\n                            context.onError(createCompilerError(33 /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */, key.loc));\r\n                            return true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1 /* ELEMENT */;\r\n            const slotOutlet = isSlotOutlet(node)\r\n                ? node\r\n                : isTemplate &&\r\n                    node.children.length === 1 &&\r\n                    isSlotOutlet(node.children[0])\r\n                    ? node.children[0] // api-extractor somehow fails to infer this\r\n                    : null;\r\n            if (slotOutlet) {\r\n                // <slot v-for=\"...\"> or <template v-for=\"...\"><slot/></template>\r\n                childBlock = slotOutlet.codegenNode;\r\n                if (isTemplate && keyProperty) {\r\n                    // <template v-for=\"...\" :key=\"...\"><slot/></template>\r\n                    // we need to inject the key to the renderSlot() call.\r\n                    // the props for renderSlot is passed as the 3rd argument.\r\n                    injectProp(childBlock, keyProperty, context);\r\n                }\r\n            }\r\n            else if (needFragmentWrapper) {\r\n                // <template v-for=\"...\"> with text or multi-elements\r\n                // should generate a fragment block for each loop\r\n                childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : undefined, node.children, 64 /* STABLE_FRAGMENT */ +\r\n                    ((process.env.NODE_ENV !== 'production')\r\n                        ? ` /* ${PatchFlagNames[64 /* STABLE_FRAGMENT */]} */`\r\n                        : ``), undefined, undefined, true, undefined, false /* isComponent */);\r\n            }\r\n            else {\r\n                // Normal element v-for. Directly use the child's codegenNode\r\n                // but mark it as a block.\r\n                childBlock = children[0]\r\n                    .codegenNode;\r\n                if (isTemplate && keyProperty) {\r\n                    injectProp(childBlock, keyProperty, context);\r\n                }\r\n                if (childBlock.isBlock !== !isStableFragment) {\r\n                    if (childBlock.isBlock) {\r\n                        // switch from block to vnode\r\n                        removeHelper(OPEN_BLOCK);\r\n                        removeHelper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\r\n                    }\r\n                    else {\r\n                        // switch from vnode to block\r\n                        removeHelper(getVNodeHelper(context.inSSR, childBlock.isComponent));\r\n                    }\r\n                }\r\n                childBlock.isBlock = !isStableFragment;\r\n                if (childBlock.isBlock) {\r\n                    helper(OPEN_BLOCK);\r\n                    helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\r\n                }\r\n                else {\r\n                    helper(getVNodeHelper(context.inSSR, childBlock.isComponent));\r\n                }\r\n            }\r\n            if (memo) {\r\n                const loop = createFunctionExpression(createForLoopParams(forNode.parseResult, [\r\n                    createSimpleExpression(`_cached`)\r\n                ]));\r\n                loop.body = createBlockStatement([\r\n                    createCompoundExpression([`const _memo = (`, memo.exp, `)`]),\r\n                    createCompoundExpression([\r\n                        `if (_cached`,\r\n                        ...(keyExp ? [` && _cached.key === `, keyExp] : []),\r\n                        ` && ${context.helperString(IS_MEMO_SAME)}(_cached, _memo)) return _cached`\r\n                    ]),\r\n                    createCompoundExpression([`const _item = `, childBlock]),\r\n                    createSimpleExpression(`_item.memo = _memo`),\r\n                    createSimpleExpression(`return _item`)\r\n                ]);\r\n                renderExp.arguments.push(loop, createSimpleExpression(`_cache`), createSimpleExpression(String(context.cached++)));\r\n            }\r\n            else {\r\n                renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true /* force newline */));\r\n            }\r\n        };\r\n    });\r\n});\r\n// target-agnostic transform used for both Client and SSR\r\nfunction processFor(node, dir, context, processCodegen) {\r\n    if (!dir.exp) {\r\n        context.onError(createCompilerError(31 /* X_V_FOR_NO_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const parseResult = parseForExpression(\r\n    // can only be simple expression because vFor transform is applied\r\n    // before expression transform.\r\n    dir.exp, context);\r\n    if (!parseResult) {\r\n        context.onError(createCompilerError(32 /* X_V_FOR_MALFORMED_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const { addIdentifiers, removeIdentifiers, scopes } = context;\r\n    const { source, value, key, index } = parseResult;\r\n    const forNode = {\r\n        type: 11 /* FOR */,\r\n        loc: dir.loc,\r\n        source,\r\n        valueAlias: value,\r\n        keyAlias: key,\r\n        objectIndexAlias: index,\r\n        parseResult,\r\n        children: isTemplateNode(node) ? node.children : [node]\r\n    };\r\n    context.replaceNode(forNode);\r\n    // bookkeeping\r\n    scopes.vFor++;\r\n    const onExit = processCodegen && processCodegen(forNode);\r\n    return () => {\r\n        scopes.vFor--;\r\n        if (onExit)\r\n            onExit();\r\n    };\r\n}\r\nconst forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\r\n// This regex doesn't cover the case if key or index aliases have destructuring,\r\n// but those do not make sense in the first place, so this works in practice.\r\nconst forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\nconst stripParensRE = /^\\(|\\)$/g;\r\nfunction parseForExpression(input, context) {\r\n    const loc = input.loc;\r\n    const exp = input.content;\r\n    const inMatch = exp.match(forAliasRE);\r\n    if (!inMatch)\r\n        return;\r\n    const [, LHS, RHS] = inMatch;\r\n    const result = {\r\n        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),\r\n        value: undefined,\r\n        key: undefined,\r\n        index: undefined\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production') && true) {\r\n        validateBrowserExpression(result.source, context);\r\n    }\r\n    let valueContent = LHS.trim().replace(stripParensRE, '').trim();\r\n    const trimmedOffset = LHS.indexOf(valueContent);\r\n    const iteratorMatch = valueContent.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n        valueContent = valueContent.replace(forIteratorRE, '').trim();\r\n        const keyContent = iteratorMatch[1].trim();\r\n        let keyOffset;\r\n        if (keyContent) {\r\n            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);\r\n            result.key = createAliasExpression(loc, keyContent, keyOffset);\r\n            if ((process.env.NODE_ENV !== 'production') && true) {\r\n                validateBrowserExpression(result.key, context, true);\r\n            }\r\n        }\r\n        if (iteratorMatch[2]) {\r\n            const indexContent = iteratorMatch[2].trim();\r\n            if (indexContent) {\r\n                result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key\r\n                    ? keyOffset + keyContent.length\r\n                    : trimmedOffset + valueContent.length));\r\n                if ((process.env.NODE_ENV !== 'production') && true) {\r\n                    validateBrowserExpression(result.index, context, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (valueContent) {\r\n        result.value = createAliasExpression(loc, valueContent, trimmedOffset);\r\n        if ((process.env.NODE_ENV !== 'production') && true) {\r\n            validateBrowserExpression(result.value, context, true);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction createAliasExpression(range, content, offset) {\r\n    return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));\r\n}\r\nfunction createForLoopParams({ value, key, index }, memoArgs = []) {\r\n    return createParamsList([value, key, index, ...memoArgs]);\r\n}\r\nfunction createParamsList(args) {\r\n    let i = args.length;\r\n    while (i--) {\r\n        if (args[i])\r\n            break;\r\n    }\r\n    return args\r\n        .slice(0, i + 1)\r\n        .map((arg, i) => arg || createSimpleExpression(`_`.repeat(i + 1), false));\r\n}\n\nconst defaultFallback = createSimpleExpression(`undefined`, false);\r\n// A NodeTransform that:\r\n// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed\r\n//    by transformExpression. This is only applied in non-browser builds with\r\n//    { prefixIdentifiers: true }.\r\n// 2. Track v-slot depths so that we know a slot is inside another slot.\r\n//    Note the exit callback is executed before buildSlots() on the same node,\r\n//    so only nested slots see positive numbers.\r\nconst trackSlotScopes = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        (node.tagType === 1 /* COMPONENT */ ||\r\n            node.tagType === 3 /* TEMPLATE */)) {\r\n        // We are only checking non-empty v-slot here\r\n        // since we only care about slots that introduce scope variables.\r\n        const vSlot = findDir(node, 'slot');\r\n        if (vSlot) {\r\n            vSlot.exp;\r\n            context.scopes.vSlot++;\r\n            return () => {\r\n                context.scopes.vSlot--;\r\n            };\r\n        }\r\n    }\r\n};\r\n// A NodeTransform that tracks scope identifiers for scoped slots with v-for.\r\n// This transform is only applied in non-browser builds with { prefixIdentifiers: true }\r\nconst trackVForSlotScopes = (node, context) => {\r\n    let vFor;\r\n    if (isTemplateNode(node) &&\r\n        node.props.some(isVSlot) &&\r\n        (vFor = findDir(node, 'for'))) {\r\n        const result = (vFor.parseResult = parseForExpression(vFor.exp, context));\r\n        if (result) {\r\n            const { value, key, index } = result;\r\n            const { addIdentifiers, removeIdentifiers } = context;\r\n            value && addIdentifiers(value);\r\n            key && addIdentifiers(key);\r\n            index && addIdentifiers(index);\r\n            return () => {\r\n                value && removeIdentifiers(value);\r\n                key && removeIdentifiers(key);\r\n                index && removeIdentifiers(index);\r\n            };\r\n        }\r\n    }\r\n};\r\nconst buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false /* newline */, true /* isSlot */, children.length ? children[0].loc : loc);\r\n// Instead of being a DirectiveTransform, v-slot processing is called during\r\n// transformElement to build the slots object for a component.\r\nfunction buildSlots(node, context, buildSlotFn = buildClientSlotFn) {\r\n    context.helper(WITH_CTX);\r\n    const { children, loc } = node;\r\n    const slotsProperties = [];\r\n    const dynamicSlots = [];\r\n    // If the slot is inside a v-for or another v-slot, force it to be dynamic\r\n    // since it likely uses a scope variable.\r\n    let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;\r\n    // 1. Check for slot with slotProps on component itself.\r\n    //    <Comp v-slot=\"{ prop }\"/>\r\n    const onComponentSlot = findDir(node, 'slot', true);\r\n    if (onComponentSlot) {\r\n        const { arg, exp } = onComponentSlot;\r\n        if (arg && !isStaticExp(arg)) {\r\n            hasDynamicSlots = true;\r\n        }\r\n        slotsProperties.push(createObjectProperty(arg || createSimpleExpression('default', true), buildSlotFn(exp, children, loc)));\r\n    }\r\n    // 2. Iterate through children and check for template slots\r\n    //    <template v-slot:foo=\"{ prop }\">\r\n    let hasTemplateSlots = false;\r\n    let hasNamedDefaultSlot = false;\r\n    const implicitDefaultChildren = [];\r\n    const seenSlotNames = new Set();\r\n    for (let i = 0; i < children.length; i++) {\r\n        const slotElement = children[i];\r\n        let slotDir;\r\n        if (!isTemplateNode(slotElement) ||\r\n            !(slotDir = findDir(slotElement, 'slot', true))) {\r\n            // not a <template v-slot>, skip.\r\n            if (slotElement.type !== 3 /* COMMENT */) {\r\n                implicitDefaultChildren.push(slotElement);\r\n            }\r\n            continue;\r\n        }\r\n        if (onComponentSlot) {\r\n            // already has on-component slot - this is incorrect usage.\r\n            context.onError(createCompilerError(37 /* X_V_SLOT_MIXED_SLOT_USAGE */, slotDir.loc));\r\n            break;\r\n        }\r\n        hasTemplateSlots = true;\r\n        const { children: slotChildren, loc: slotLoc } = slotElement;\r\n        const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;\r\n        // check if name is dynamic.\r\n        let staticSlotName;\r\n        if (isStaticExp(slotName)) {\r\n            staticSlotName = slotName ? slotName.content : `default`;\r\n        }\r\n        else {\r\n            hasDynamicSlots = true;\r\n        }\r\n        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);\r\n        // check if this slot is conditional (v-if/v-for)\r\n        let vIf;\r\n        let vElse;\r\n        let vFor;\r\n        if ((vIf = findDir(slotElement, 'if'))) {\r\n            hasDynamicSlots = true;\r\n            dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));\r\n        }\r\n        else if ((vElse = findDir(slotElement, /^else(-if)?$/, true /* allowEmpty */))) {\r\n            // find adjacent v-if\r\n            let j = i;\r\n            let prev;\r\n            while (j--) {\r\n                prev = children[j];\r\n                if (prev.type !== 3 /* COMMENT */) {\r\n                    break;\r\n                }\r\n            }\r\n            if (prev && isTemplateNode(prev) && findDir(prev, 'if')) {\r\n                // remove node\r\n                children.splice(i, 1);\r\n                i--;\r\n                // attach this slot to previous conditional\r\n                let conditional = dynamicSlots[dynamicSlots.length - 1];\r\n                while (conditional.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                    conditional = conditional.alternate;\r\n                }\r\n                conditional.alternate = vElse.exp\r\n                    ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback)\r\n                    : buildDynamicSlot(slotName, slotFunction);\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */, vElse.loc));\r\n            }\r\n        }\r\n        else if ((vFor = findDir(slotElement, 'for'))) {\r\n            hasDynamicSlots = true;\r\n            const parseResult = vFor.parseResult ||\r\n                parseForExpression(vFor.exp, context);\r\n            if (parseResult) {\r\n                // Render the dynamic slots as an array and add it to the createSlot()\r\n                // args. The runtime knows how to handle it appropriately.\r\n                dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [\r\n                    parseResult.source,\r\n                    createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true /* force newline */)\r\n                ]));\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(32 /* X_V_FOR_MALFORMED_EXPRESSION */, vFor.loc));\r\n            }\r\n        }\r\n        else {\r\n            // check duplicate static names\r\n            if (staticSlotName) {\r\n                if (seenSlotNames.has(staticSlotName)) {\r\n                    context.onError(createCompilerError(38 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */, dirLoc));\r\n                    continue;\r\n                }\r\n                seenSlotNames.add(staticSlotName);\r\n                if (staticSlotName === 'default') {\r\n                    hasNamedDefaultSlot = true;\r\n                }\r\n            }\r\n            slotsProperties.push(createObjectProperty(slotName, slotFunction));\r\n        }\r\n    }\r\n    if (!onComponentSlot) {\r\n        const buildDefaultSlotProperty = (props, children) => {\r\n            const fn = buildSlotFn(props, children, loc);\r\n            if (context.compatConfig) {\r\n                fn.isNonScopedSlot = true;\r\n            }\r\n            return createObjectProperty(`default`, fn);\r\n        };\r\n        if (!hasTemplateSlots) {\r\n            // implicit default slot (on component)\r\n            slotsProperties.push(buildDefaultSlotProperty(undefined, children));\r\n        }\r\n        else if (implicitDefaultChildren.length &&\r\n            // #3766\r\n            // with whitespace: 'preserve', whitespaces between slots will end up in\r\n            // implicitDefaultChildren. Ignore if all implicit children are whitespaces.\r\n            implicitDefaultChildren.some(node => isNonWhitespaceContent(node))) {\r\n            // implicit default slot (mixed with named slots)\r\n            if (hasNamedDefaultSlot) {\r\n                context.onError(createCompilerError(39 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */, implicitDefaultChildren[0].loc));\r\n            }\r\n            else {\r\n                slotsProperties.push(buildDefaultSlotProperty(undefined, implicitDefaultChildren));\r\n            }\r\n        }\r\n    }\r\n    const slotFlag = hasDynamicSlots\r\n        ? 2 /* DYNAMIC */\r\n        : hasForwardedSlots(node.children)\r\n            ? 3 /* FORWARDED */\r\n            : 1 /* STABLE */;\r\n    let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_`, \r\n    // 2 = compiled but dynamic = can skip normalization, but must run diff\r\n    // 1 = compiled and static = can skip normalization AND diff as optimized\r\n    createSimpleExpression(slotFlag + ((process.env.NODE_ENV !== 'production') ? ` /* ${slotFlagsText[slotFlag]} */` : ``), false))), loc);\r\n    if (dynamicSlots.length) {\r\n        slots = createCallExpression(context.helper(CREATE_SLOTS), [\r\n            slots,\r\n            createArrayExpression(dynamicSlots)\r\n        ]);\r\n    }\r\n    return {\r\n        slots,\r\n        hasDynamicSlots\r\n    };\r\n}\r\nfunction buildDynamicSlot(name, fn) {\r\n    return createObjectExpression([\r\n        createObjectProperty(`name`, name),\r\n        createObjectProperty(`fn`, fn)\r\n    ]);\r\n}\r\nfunction hasForwardedSlots(children) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        switch (child.type) {\r\n            case 1 /* ELEMENT */:\r\n                if (child.tagType === 2 /* SLOT */ ||\r\n                    hasForwardedSlots(child.children)) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 9 /* IF */:\r\n                if (hasForwardedSlots(child.branches))\r\n                    return true;\r\n                break;\r\n            case 10 /* IF_BRANCH */:\r\n            case 11 /* FOR */:\r\n                if (hasForwardedSlots(child.children))\r\n                    return true;\r\n                break;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction isNonWhitespaceContent(node) {\r\n    if (node.type !== 2 /* TEXT */ && node.type !== 12 /* TEXT_CALL */)\r\n        return true;\r\n    return node.type === 2 /* TEXT */\r\n        ? !!node.content.trim()\r\n        : isNonWhitespaceContent(node.content);\r\n}\n\n// some directive transforms (e.g. v-model) may return a symbol for runtime\r\n// import, which should be used instead of a resolveDirective call.\r\nconst directiveImportMap = new WeakMap();\r\n// generate a JavaScript AST for this element's codegen\r\nconst transformElement = (node, context) => {\r\n    // perform the work on exit, after all child expressions have been\r\n    // processed and merged.\r\n    return function postTransformElement() {\r\n        node = context.currentNode;\r\n        if (!(node.type === 1 /* ELEMENT */ &&\r\n            (node.tagType === 0 /* ELEMENT */ ||\r\n                node.tagType === 1 /* COMPONENT */))) {\r\n            return;\r\n        }\r\n        const { tag, props } = node;\r\n        const isComponent = node.tagType === 1 /* COMPONENT */;\r\n        // The goal of the transform is to create a codegenNode implementing the\r\n        // VNodeCall interface.\r\n        let vnodeTag = isComponent\r\n            ? resolveComponentType(node, context)\r\n            : `\"${tag}\"`;\r\n        const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;\r\n        let vnodeProps;\r\n        let vnodeChildren;\r\n        let vnodePatchFlag;\r\n        let patchFlag = 0;\r\n        let vnodeDynamicProps;\r\n        let dynamicPropNames;\r\n        let vnodeDirectives;\r\n        let shouldUseBlock = \r\n        // dynamic component may resolve to plain elements\r\n        isDynamicComponent ||\r\n            vnodeTag === TELEPORT ||\r\n            vnodeTag === SUSPENSE ||\r\n            (!isComponent &&\r\n                // <svg> and <foreignObject> must be forced into blocks so that block\r\n                // updates inside get proper isSVG flag at runtime. (#639, #643)\r\n                // This is technically web-specific, but splitting the logic out of core\r\n                // leads to too much unnecessary complexity.\r\n                (tag === 'svg' ||\r\n                    tag === 'foreignObject' ||\r\n                    // #938: elements with dynamic keys should be forced into blocks\r\n                    findProp(node, 'key', true)));\r\n        // props\r\n        if (props.length > 0) {\r\n            const propsBuildResult = buildProps(node, context);\r\n            vnodeProps = propsBuildResult.props;\r\n            patchFlag = propsBuildResult.patchFlag;\r\n            dynamicPropNames = propsBuildResult.dynamicPropNames;\r\n            const directives = propsBuildResult.directives;\r\n            vnodeDirectives =\r\n                directives && directives.length\r\n                    ? createArrayExpression(directives.map(dir => buildDirectiveArgs(dir, context)))\r\n                    : undefined;\r\n        }\r\n        // children\r\n        if (node.children.length > 0) {\r\n            if (vnodeTag === KEEP_ALIVE) {\r\n                // Although a built-in component, we compile KeepAlive with raw children\r\n                // instead of slot functions so that it can be used inside Transition\r\n                // or other Transition-wrapping HOCs.\r\n                // To ensure correct updates with block optimizations, we need to:\r\n                // 1. Force keep-alive into a block. This avoids its children being\r\n                //    collected by a parent block.\r\n                shouldUseBlock = true;\r\n                // 2. Force keep-alive to always be updated, since it uses raw children.\r\n                patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                if ((process.env.NODE_ENV !== 'production') && node.children.length > 1) {\r\n                    context.onError(createCompilerError(45 /* X_KEEP_ALIVE_INVALID_CHILDREN */, {\r\n                        start: node.children[0].loc.start,\r\n                        end: node.children[node.children.length - 1].loc.end,\r\n                        source: ''\r\n                    }));\r\n                }\r\n            }\r\n            const shouldBuildAsSlots = isComponent &&\r\n                // Teleport is not a real component and has dedicated runtime handling\r\n                vnodeTag !== TELEPORT &&\r\n                // explained above.\r\n                vnodeTag !== KEEP_ALIVE;\r\n            if (shouldBuildAsSlots) {\r\n                const { slots, hasDynamicSlots } = buildSlots(node, context);\r\n                vnodeChildren = slots;\r\n                if (hasDynamicSlots) {\r\n                    patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n            else if (node.children.length === 1 && vnodeTag !== TELEPORT) {\r\n                const child = node.children[0];\r\n                const type = child.type;\r\n                // check for dynamic text children\r\n                const hasDynamicTextChild = type === 5 /* INTERPOLATION */ ||\r\n                    type === 8 /* COMPOUND_EXPRESSION */;\r\n                if (hasDynamicTextChild &&\r\n                    getConstantType(child, context) === 0 /* NOT_CONSTANT */) {\r\n                    patchFlag |= 1 /* TEXT */;\r\n                }\r\n                // pass directly if the only child is a text node\r\n                // (plain / interpolation / expression)\r\n                if (hasDynamicTextChild || type === 2 /* TEXT */) {\r\n                    vnodeChildren = child;\r\n                }\r\n                else {\r\n                    vnodeChildren = node.children;\r\n                }\r\n            }\r\n            else {\r\n                vnodeChildren = node.children;\r\n            }\r\n        }\r\n        // patchFlag & dynamicPropNames\r\n        if (patchFlag !== 0) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (patchFlag < 0) {\r\n                    // special flags (negative and mutually exclusive)\r\n                    vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;\r\n                }\r\n                else {\r\n                    // bitwise flags\r\n                    const flagNames = Object.keys(PatchFlagNames)\r\n                        .map(Number)\r\n                        .filter(n => n > 0 && patchFlag & n)\r\n                        .map(n => PatchFlagNames[n])\r\n                        .join(`, `);\r\n                    vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;\r\n                }\r\n            }\r\n            else {\r\n                vnodePatchFlag = String(patchFlag);\r\n            }\r\n            if (dynamicPropNames && dynamicPropNames.length) {\r\n                vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);\r\n            }\r\n        }\r\n        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false /* disableTracking */, isComponent, node.loc);\r\n    };\r\n};\r\nfunction resolveComponentType(node, context, ssr = false) {\r\n    let { tag } = node;\r\n    // 1. dynamic component\r\n    const isExplicitDynamic = isComponentTag(tag);\r\n    const isProp = findProp(node, 'is');\r\n    if (isProp) {\r\n        if (isExplicitDynamic ||\r\n            (isCompatEnabled(\"COMPILER_IS_ON_ELEMENT\" /* COMPILER_IS_ON_ELEMENT */, context))) {\r\n            const exp = isProp.type === 6 /* ATTRIBUTE */\r\n                ? isProp.value && createSimpleExpression(isProp.value.content, true)\r\n                : isProp.exp;\r\n            if (exp) {\r\n                return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\r\n                    exp\r\n                ]);\r\n            }\r\n        }\r\n        else if (isProp.type === 6 /* ATTRIBUTE */ &&\r\n            isProp.value.content.startsWith('vue:')) {\r\n            // <button is=\"vue:xxx\">\r\n            // if not <component>, only is value that starts with \"vue:\" will be\r\n            // treated as component by the parse phase and reach here, unless it's\r\n            // compat mode where all is values are considered components\r\n            tag = isProp.value.content.slice(4);\r\n        }\r\n    }\r\n    // 1.5 v-is (TODO: Deprecate)\r\n    const isDir = !isExplicitDynamic && findDir(node, 'is');\r\n    if (isDir && isDir.exp) {\r\n        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\r\n            isDir.exp\r\n        ]);\r\n    }\r\n    // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)\r\n    const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);\r\n    if (builtIn) {\r\n        // built-ins are simply fallthroughs / have special handling during ssr\r\n        // so we don't need to import their runtime equivalents\r\n        if (!ssr)\r\n            context.helper(builtIn);\r\n        return builtIn;\r\n    }\r\n    // 5. user component (resolve)\r\n    context.helper(RESOLVE_COMPONENT);\r\n    context.components.add(tag);\r\n    return toValidAssetId(tag, `component`);\r\n}\r\nfunction buildProps(node, context, props = node.props, ssr = false) {\r\n    const { tag, loc: elementLoc } = node;\r\n    const isComponent = node.tagType === 1 /* COMPONENT */;\r\n    let properties = [];\r\n    const mergeArgs = [];\r\n    const runtimeDirectives = [];\r\n    // patchFlag analysis\r\n    let patchFlag = 0;\r\n    let hasRef = false;\r\n    let hasClassBinding = false;\r\n    let hasStyleBinding = false;\r\n    let hasHydrationEventBinding = false;\r\n    let hasDynamicKeys = false;\r\n    let hasVnodeHook = false;\r\n    const dynamicPropNames = [];\r\n    const analyzePatchFlag = ({ key, value }) => {\r\n        if (isStaticExp(key)) {\r\n            const name = key.content;\r\n            const isEventHandler = isOn(name);\r\n            if (!isComponent &&\r\n                isEventHandler &&\r\n                // omit the flag for click handlers because hydration gives click\r\n                // dedicated fast path.\r\n                name.toLowerCase() !== 'onclick' &&\r\n                // omit v-model handlers\r\n                name !== 'onUpdate:modelValue' &&\r\n                // omit onVnodeXXX hooks\r\n                !isReservedProp(name)) {\r\n                hasHydrationEventBinding = true;\r\n            }\r\n            if (isEventHandler && isReservedProp(name)) {\r\n                hasVnodeHook = true;\r\n            }\r\n            if (value.type === 20 /* JS_CACHE_EXPRESSION */ ||\r\n                ((value.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n                    value.type === 8 /* COMPOUND_EXPRESSION */) &&\r\n                    getConstantType(value, context) > 0)) {\r\n                // skip if the prop is a cached handler or has constant value\r\n                return;\r\n            }\r\n            if (name === 'ref') {\r\n                hasRef = true;\r\n            }\r\n            else if (name === 'class') {\r\n                hasClassBinding = true;\r\n            }\r\n            else if (name === 'style') {\r\n                hasStyleBinding = true;\r\n            }\r\n            else if (name !== 'key' && !dynamicPropNames.includes(name)) {\r\n                dynamicPropNames.push(name);\r\n            }\r\n            // treat the dynamic class and style binding of the component as dynamic props\r\n            if (isComponent &&\r\n                (name === 'class' || name === 'style') &&\r\n                !dynamicPropNames.includes(name)) {\r\n                dynamicPropNames.push(name);\r\n            }\r\n        }\r\n        else {\r\n            hasDynamicKeys = true;\r\n        }\r\n    };\r\n    for (let i = 0; i < props.length; i++) {\r\n        // static attribute\r\n        const prop = props[i];\r\n        if (prop.type === 6 /* ATTRIBUTE */) {\r\n            const { loc, name, value } = prop;\r\n            let valueNode = createSimpleExpression(value ? value.content : '', true, value ? value.loc : loc);\r\n            if (name === 'ref') {\r\n                hasRef = true;\r\n            }\r\n            // skip is on <component>, or is=\"vue:xxx\"\r\n            if (name === 'is' &&\r\n                (isComponentTag(tag) ||\r\n                    (value && value.content.startsWith('vue:')) ||\r\n                    (isCompatEnabled(\"COMPILER_IS_ON_ELEMENT\" /* COMPILER_IS_ON_ELEMENT */, context)))) {\r\n                continue;\r\n            }\r\n            properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), valueNode));\r\n        }\r\n        else {\r\n            // directives\r\n            const { name, arg, exp, loc } = prop;\r\n            const isVBind = name === 'bind';\r\n            const isVOn = name === 'on';\r\n            // skip v-slot - it is handled by its dedicated transform.\r\n            if (name === 'slot') {\r\n                if (!isComponent) {\r\n                    context.onError(createCompilerError(40 /* X_V_SLOT_MISPLACED */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            // skip v-once/v-memo - they are handled by dedicated transforms.\r\n            if (name === 'once' || name === 'memo') {\r\n                continue;\r\n            }\r\n            // skip v-is and :is on <component>\r\n            if (name === 'is' ||\r\n                (isVBind &&\r\n                    isBindKey(arg, 'is') &&\r\n                    (isComponentTag(tag) ||\r\n                        (isCompatEnabled(\"COMPILER_IS_ON_ELEMENT\" /* COMPILER_IS_ON_ELEMENT */, context))))) {\r\n                continue;\r\n            }\r\n            // skip v-on in SSR compilation\r\n            if (isVOn && ssr) {\r\n                continue;\r\n            }\r\n            // special case for v-bind and v-on with no argument\r\n            if (!arg && (isVBind || isVOn)) {\r\n                hasDynamicKeys = true;\r\n                if (exp) {\r\n                    if (properties.length) {\r\n                        mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n                        properties = [];\r\n                    }\r\n                    if (isVBind) {\r\n                        {\r\n                            // 2.x v-bind object order compat\r\n                            if ((process.env.NODE_ENV !== 'production')) {\r\n                                const hasOverridableKeys = mergeArgs.some(arg => {\r\n                                    if (arg.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n                                        return arg.properties.some(({ key }) => {\r\n                                            if (key.type !== 4 /* SIMPLE_EXPRESSION */ ||\r\n                                                !key.isStatic) {\r\n                                                return true;\r\n                                            }\r\n                                            return (key.content !== 'class' &&\r\n                                                key.content !== 'style' &&\r\n                                                !isOn(key.content));\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        // dynamic expression\r\n                                        return true;\r\n                                    }\r\n                                });\r\n                                if (hasOverridableKeys) {\r\n                                    checkCompatEnabled(\"COMPILER_V_BIND_OBJECT_ORDER\" /* COMPILER_V_BIND_OBJECT_ORDER */, context, loc);\r\n                                }\r\n                            }\r\n                            if (isCompatEnabled(\"COMPILER_V_BIND_OBJECT_ORDER\" /* COMPILER_V_BIND_OBJECT_ORDER */, context)) {\r\n                                mergeArgs.unshift(exp);\r\n                                continue;\r\n                            }\r\n                        }\r\n                        mergeArgs.push(exp);\r\n                    }\r\n                    else {\r\n                        // v-on=\"obj\" -> toHandlers(obj)\r\n                        mergeArgs.push({\r\n                            type: 14 /* JS_CALL_EXPRESSION */,\r\n                            loc,\r\n                            callee: context.helper(TO_HANDLERS),\r\n                            arguments: [exp]\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    context.onError(createCompilerError(isVBind\r\n                        ? 34 /* X_V_BIND_NO_EXPRESSION */\r\n                        : 35 /* X_V_ON_NO_EXPRESSION */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            const directiveTransform = context.directiveTransforms[name];\r\n            if (directiveTransform) {\r\n                // has built-in directive transform.\r\n                const { props, needRuntime } = directiveTransform(prop, node, context);\r\n                !ssr && props.forEach(analyzePatchFlag);\r\n                properties.push(...props);\r\n                if (needRuntime) {\r\n                    runtimeDirectives.push(prop);\r\n                    if (isSymbol(needRuntime)) {\r\n                        directiveImportMap.set(prop, needRuntime);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // no built-in transform, this is a user custom directive.\r\n                runtimeDirectives.push(prop);\r\n            }\r\n        }\r\n        if (prop.type === 6 /* ATTRIBUTE */ &&\r\n            prop.name === 'ref' &&\r\n            context.scopes.vFor > 0 &&\r\n            checkCompatEnabled(\"COMPILER_V_FOR_REF\" /* COMPILER_V_FOR_REF */, context, prop.loc)) {\r\n            properties.push(createObjectProperty(createSimpleExpression('refInFor', true), createSimpleExpression('true', false)));\r\n        }\r\n    }\r\n    let propsExpression = undefined;\r\n    // has v-bind=\"object\" or v-on=\"object\", wrap with mergeProps\r\n    if (mergeArgs.length) {\r\n        if (properties.length) {\r\n            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n        }\r\n        if (mergeArgs.length > 1) {\r\n            propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);\r\n        }\r\n        else {\r\n            // single v-bind with nothing else - no need for a mergeProps call\r\n            propsExpression = mergeArgs[0];\r\n        }\r\n    }\r\n    else if (properties.length) {\r\n        propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);\r\n    }\r\n    // patchFlag analysis\r\n    if (hasDynamicKeys) {\r\n        patchFlag |= 16 /* FULL_PROPS */;\r\n    }\r\n    else {\r\n        if (hasClassBinding && !isComponent) {\r\n            patchFlag |= 2 /* CLASS */;\r\n        }\r\n        if (hasStyleBinding && !isComponent) {\r\n            patchFlag |= 4 /* STYLE */;\r\n        }\r\n        if (dynamicPropNames.length) {\r\n            patchFlag |= 8 /* PROPS */;\r\n        }\r\n        if (hasHydrationEventBinding) {\r\n            patchFlag |= 32 /* HYDRATE_EVENTS */;\r\n        }\r\n    }\r\n    if ((patchFlag === 0 || patchFlag === 32 /* HYDRATE_EVENTS */) &&\r\n        (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {\r\n        patchFlag |= 512 /* NEED_PATCH */;\r\n    }\r\n    // pre-normalize props, SSR is skipped for now\r\n    if (!context.inSSR && propsExpression) {\r\n        switch (propsExpression.type) {\r\n            case 15 /* JS_OBJECT_EXPRESSION */:\r\n                // means that there is no v-bind,\r\n                // but still need to deal with dynamic key binding\r\n                let classKeyIndex = -1;\r\n                let styleKeyIndex = -1;\r\n                let hasDynamicKey = false;\r\n                for (let i = 0; i < propsExpression.properties.length; i++) {\r\n                    const key = propsExpression.properties[i].key;\r\n                    if (isStaticExp(key)) {\r\n                        if (key.content === 'class') {\r\n                            classKeyIndex = i;\r\n                        }\r\n                        else if (key.content === 'style') {\r\n                            styleKeyIndex = i;\r\n                        }\r\n                    }\r\n                    else if (!key.isHandlerKey) {\r\n                        hasDynamicKey = true;\r\n                    }\r\n                }\r\n                const classProp = propsExpression.properties[classKeyIndex];\r\n                const styleProp = propsExpression.properties[styleKeyIndex];\r\n                // no dynamic key\r\n                if (!hasDynamicKey) {\r\n                    if (classProp && !isStaticExp(classProp.value)) {\r\n                        classProp.value = createCallExpression(context.helper(NORMALIZE_CLASS), [classProp.value]);\r\n                    }\r\n                    if (styleProp &&\r\n                        !isStaticExp(styleProp.value) &&\r\n                        // the static style is compiled into an object,\r\n                        // so use `hasStyleBinding` to ensure that it is a dynamic style binding\r\n                        (hasStyleBinding ||\r\n                            // v-bind:style and style both exist,\r\n                            // v-bind:style with static literal object\r\n                            styleProp.value.type === 17 /* JS_ARRAY_EXPRESSION */)) {\r\n                        styleProp.value = createCallExpression(context.helper(NORMALIZE_STYLE), [styleProp.value]);\r\n                    }\r\n                }\r\n                else {\r\n                    // dynamic key binding, wrap with `normalizeProps`\r\n                    propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [propsExpression]);\r\n                }\r\n                break;\r\n            case 14 /* JS_CALL_EXPRESSION */:\r\n                // mergeProps call, do nothing\r\n                break;\r\n            default:\r\n                // single v-bind\r\n                propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [\r\n                    createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [\r\n                        propsExpression\r\n                    ])\r\n                ]);\r\n                break;\r\n        }\r\n    }\r\n    return {\r\n        props: propsExpression,\r\n        directives: runtimeDirectives,\r\n        patchFlag,\r\n        dynamicPropNames\r\n    };\r\n}\r\n// Dedupe props in an object literal.\r\n// Literal duplicated attributes would have been warned during the parse phase,\r\n// however, it's possible to encounter duplicated `onXXX` handlers with different\r\n// modifiers. We also need to merge static and dynamic class / style attributes.\r\n// - onXXX handlers / style: merge into array\r\n// - class: merge into single expression with concatenation\r\nfunction dedupeProperties(properties) {\r\n    const knownProps = new Map();\r\n    const deduped = [];\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const prop = properties[i];\r\n        // dynamic keys are always allowed\r\n        if (prop.key.type === 8 /* COMPOUND_EXPRESSION */ || !prop.key.isStatic) {\r\n            deduped.push(prop);\r\n            continue;\r\n        }\r\n        const name = prop.key.content;\r\n        const existing = knownProps.get(name);\r\n        if (existing) {\r\n            if (name === 'style' || name === 'class' || isOn(name)) {\r\n                mergeAsArray(existing, prop);\r\n            }\r\n            // unexpected duplicate, should have emitted error during parse\r\n        }\r\n        else {\r\n            knownProps.set(name, prop);\r\n            deduped.push(prop);\r\n        }\r\n    }\r\n    return deduped;\r\n}\r\nfunction mergeAsArray(existing, incoming) {\r\n    if (existing.value.type === 17 /* JS_ARRAY_EXPRESSION */) {\r\n        existing.value.elements.push(incoming.value);\r\n    }\r\n    else {\r\n        existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);\r\n    }\r\n}\r\nfunction buildDirectiveArgs(dir, context) {\r\n    const dirArgs = [];\r\n    const runtime = directiveImportMap.get(dir);\r\n    if (runtime) {\r\n        // built-in directive with runtime\r\n        dirArgs.push(context.helperString(runtime));\r\n    }\r\n    else {\r\n        {\r\n            // inject statement for resolving directive\r\n            context.helper(RESOLVE_DIRECTIVE);\r\n            context.directives.add(dir.name);\r\n            dirArgs.push(toValidAssetId(dir.name, `directive`));\r\n        }\r\n    }\r\n    const { loc } = dir;\r\n    if (dir.exp)\r\n        dirArgs.push(dir.exp);\r\n    if (dir.arg) {\r\n        if (!dir.exp) {\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        dirArgs.push(dir.arg);\r\n    }\r\n    if (Object.keys(dir.modifiers).length) {\r\n        if (!dir.arg) {\r\n            if (!dir.exp) {\r\n                dirArgs.push(`void 0`);\r\n            }\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        const trueExpression = createSimpleExpression(`true`, false, loc);\r\n        dirArgs.push(createObjectExpression(dir.modifiers.map(modifier => createObjectProperty(modifier, trueExpression)), loc));\r\n    }\r\n    return createArrayExpression(dirArgs, dir.loc);\r\n}\r\nfunction stringifyDynamicPropNames(props) {\r\n    let propsNamesString = `[`;\r\n    for (let i = 0, l = props.length; i < l; i++) {\r\n        propsNamesString += JSON.stringify(props[i]);\r\n        if (i < l - 1)\r\n            propsNamesString += ', ';\r\n    }\r\n    return propsNamesString + `]`;\r\n}\r\nfunction isComponentTag(tag) {\r\n    return tag[0].toLowerCase() + tag.slice(1) === 'component';\r\n}\n\n(process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\n(process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n});\n\nconst transformSlotOutlet = (node, context) => {\r\n    if (isSlotOutlet(node)) {\r\n        const { children, loc } = node;\r\n        const { slotName, slotProps } = processSlotOutlet(node, context);\r\n        const slotArgs = [\r\n            context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,\r\n            slotName,\r\n            '{}',\r\n            'undefined',\r\n            'true'\r\n        ];\r\n        let expectedLen = 2;\r\n        if (slotProps) {\r\n            slotArgs[2] = slotProps;\r\n            expectedLen = 3;\r\n        }\r\n        if (children.length) {\r\n            slotArgs[3] = createFunctionExpression([], children, false, false, loc);\r\n            expectedLen = 4;\r\n        }\r\n        if (context.scopeId && !context.slotted) {\r\n            expectedLen = 5;\r\n        }\r\n        slotArgs.splice(expectedLen); // remove unused arguments\r\n        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);\r\n    }\r\n};\r\nfunction processSlotOutlet(node, context) {\r\n    let slotName = `\"default\"`;\r\n    let slotProps = undefined;\r\n    const nonNameProps = [];\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (p.value) {\r\n                if (p.name === 'name') {\r\n                    slotName = JSON.stringify(p.value.content);\r\n                }\r\n                else {\r\n                    p.name = camelize(p.name);\r\n                    nonNameProps.push(p);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (p.name === 'bind' && isBindKey(p.arg, 'name')) {\r\n                if (p.exp)\r\n                    slotName = p.exp;\r\n            }\r\n            else {\r\n                if (p.name === 'bind' && p.arg && isStaticExp(p.arg)) {\r\n                    p.arg.content = camelize(p.arg.content);\r\n                }\r\n                nonNameProps.push(p);\r\n            }\r\n        }\r\n    }\r\n    if (nonNameProps.length > 0) {\r\n        const { props, directives } = buildProps(node, context, nonNameProps);\r\n        slotProps = props;\r\n        if (directives.length) {\r\n            context.onError(createCompilerError(36 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */, directives[0].loc));\r\n        }\r\n    }\r\n    return {\r\n        slotName,\r\n        slotProps\r\n    };\r\n}\n\nconst fnExpRE = /^\\s*([\\w$_]+|(async\\s*)?\\([^)]*?\\))\\s*=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/;\r\nconst transformOn = (dir, node, context, augmentor) => {\r\n    const { loc, modifiers, arg } = dir;\r\n    if (!dir.exp && !modifiers.length) {\r\n        context.onError(createCompilerError(35 /* X_V_ON_NO_EXPRESSION */, loc));\r\n    }\r\n    let eventName;\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            const rawName = arg.content;\r\n            // for all event listeners, auto convert it to camelCase. See issue #2249\r\n            eventName = createSimpleExpression(toHandlerKey(camelize$1(rawName)), true, arg.loc);\r\n        }\r\n        else {\r\n            // #2388\r\n            eventName = createCompoundExpression([\r\n                `${context.helperString(TO_HANDLER_KEY)}(`,\r\n                arg,\r\n                `)`\r\n            ]);\r\n        }\r\n    }\r\n    else {\r\n        // already a compound expression.\r\n        eventName = arg;\r\n        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);\r\n        eventName.children.push(`)`);\r\n    }\r\n    // handler processing\r\n    let exp = dir.exp;\r\n    if (exp && !exp.content.trim()) {\r\n        exp = undefined;\r\n    }\r\n    let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;\r\n    if (exp) {\r\n        const isMemberExp = isMemberExpression(exp.content);\r\n        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));\r\n        const hasMultipleStatements = exp.content.includes(`;`);\r\n        if ((process.env.NODE_ENV !== 'production') && true) {\r\n            validateBrowserExpression(exp, context, false, hasMultipleStatements);\r\n        }\r\n        if (isInlineStatement || (shouldCache && isMemberExp)) {\r\n            // wrap inline statement in a function expression\r\n            exp = createCompoundExpression([\r\n                `${isInlineStatement\r\n                    ? `$event`\r\n                    : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,\r\n                exp,\r\n                hasMultipleStatements ? `}` : `)`\r\n            ]);\r\n        }\r\n    }\r\n    let ret = {\r\n        props: [\r\n            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))\r\n        ]\r\n    };\r\n    // apply extended compiler augmentor\r\n    if (augmentor) {\r\n        ret = augmentor(ret);\r\n    }\r\n    if (shouldCache) {\r\n        // cache handlers so that it's always the same handler being passed down.\r\n        // this avoids unnecessary re-renders when users use inline handlers on\r\n        // components.\r\n        ret.props[0].value = context.cache(ret.props[0].value);\r\n    }\r\n    // mark the key as handler for props normalization check\r\n    ret.props.forEach(p => (p.key.isHandlerKey = true));\r\n    return ret;\r\n};\n\n// v-bind without arg is handled directly in ./transformElements.ts due to it affecting\r\n// codegen for the entire props object. This transform here is only for v-bind\r\n// *with* args.\r\nconst transformBind = (dir, _node, context) => {\r\n    const { exp, modifiers, loc } = dir;\r\n    const arg = dir.arg;\r\n    if (arg.type !== 4 /* SIMPLE_EXPRESSION */) {\r\n        arg.children.unshift(`(`);\r\n        arg.children.push(`) || \"\"`);\r\n    }\r\n    else if (!arg.isStatic) {\r\n        arg.content = `${arg.content} || \"\"`;\r\n    }\r\n    // .sync is replaced by v-model:arg\r\n    if (modifiers.includes('camel')) {\r\n        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            if (arg.isStatic) {\r\n                arg.content = camelize$1(arg.content);\r\n            }\r\n            else {\r\n                arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;\r\n            }\r\n        }\r\n        else {\r\n            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);\r\n            arg.children.push(`)`);\r\n        }\r\n    }\r\n    if (!context.inSSR) {\r\n        if (modifiers.includes('prop')) {\r\n            injectPrefix(arg, '.');\r\n        }\r\n        if (modifiers.includes('attr')) {\r\n            injectPrefix(arg, '^');\r\n        }\r\n    }\r\n    if (!exp ||\r\n        (exp.type === 4 /* SIMPLE_EXPRESSION */ && !exp.content.trim())) {\r\n        context.onError(createCompilerError(34 /* X_V_BIND_NO_EXPRESSION */, loc));\r\n        return {\r\n            props: [createObjectProperty(arg, createSimpleExpression('', true, loc))]\r\n        };\r\n    }\r\n    return {\r\n        props: [createObjectProperty(arg, exp)]\r\n    };\r\n};\r\nconst injectPrefix = (arg, prefix) => {\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            arg.content = prefix + arg.content;\r\n        }\r\n        else {\r\n            arg.content = `\\`${prefix}\\${${arg.content}}\\``;\r\n        }\r\n    }\r\n    else {\r\n        arg.children.unshift(`'${prefix}' + (`);\r\n        arg.children.push(`)`);\r\n    }\r\n};\n\n// Merge adjacent text nodes and expressions into a single expression\r\n// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.\r\nconst transformText = (node, context) => {\r\n    if (node.type === 0 /* ROOT */ ||\r\n        node.type === 1 /* ELEMENT */ ||\r\n        node.type === 11 /* FOR */ ||\r\n        node.type === 10 /* IF_BRANCH */) {\r\n        // perform the transform on node exit so that all expressions have already\r\n        // been processed.\r\n        return () => {\r\n            const children = node.children;\r\n            let currentContainer = undefined;\r\n            let hasText = false;\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (isText(child)) {\r\n                    hasText = true;\r\n                    for (let j = i + 1; j < children.length; j++) {\r\n                        const next = children[j];\r\n                        if (isText(next)) {\r\n                            if (!currentContainer) {\r\n                                currentContainer = children[i] = {\r\n                                    type: 8 /* COMPOUND_EXPRESSION */,\r\n                                    loc: child.loc,\r\n                                    children: [child]\r\n                                };\r\n                            }\r\n                            // merge adjacent text node into current\r\n                            currentContainer.children.push(` + `, next);\r\n                            children.splice(j, 1);\r\n                            j--;\r\n                        }\r\n                        else {\r\n                            currentContainer = undefined;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!hasText ||\r\n                // if this is a plain element with a single text child, leave it\r\n                // as-is since the runtime has dedicated fast path for this by directly\r\n                // setting textContent of the element.\r\n                // for component root it's always normalized anyway.\r\n                (children.length === 1 &&\r\n                    (node.type === 0 /* ROOT */ ||\r\n                        (node.type === 1 /* ELEMENT */ &&\r\n                            node.tagType === 0 /* ELEMENT */ &&\r\n                            // #3756\r\n                            // custom directives can potentially add DOM elements arbitrarily,\r\n                            // we need to avoid setting textContent of the element at runtime\r\n                            // to avoid accidentally overwriting the DOM elements added\r\n                            // by the user through custom directives.\r\n                            !node.props.find(p => p.type === 7 /* DIRECTIVE */ &&\r\n                                !context.directiveTransforms[p.name]) &&\r\n                            // in compat mode, <template> tags with no special directives\r\n                            // will be rendered as a fragment so its children must be\r\n                            // converted into vnodes.\r\n                            !(node.tag === 'template'))))) {\r\n                return;\r\n            }\r\n            // pre-convert text nodes into createTextVNode(text) calls to avoid\r\n            // runtime normalization.\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (isText(child) || child.type === 8 /* COMPOUND_EXPRESSION */) {\r\n                    const callArgs = [];\r\n                    // createTextVNode defaults to single whitespace, so if it is a\r\n                    // single space the code could be an empty call to save bytes.\r\n                    if (child.type !== 2 /* TEXT */ || child.content !== ' ') {\r\n                        callArgs.push(child);\r\n                    }\r\n                    // mark dynamic text with flag so it gets patched inside a block\r\n                    if (!context.ssr &&\r\n                        getConstantType(child, context) === 0 /* NOT_CONSTANT */) {\r\n                        callArgs.push(1 /* TEXT */ +\r\n                            ((process.env.NODE_ENV !== 'production') ? ` /* ${PatchFlagNames[1 /* TEXT */]} */` : ``));\r\n                    }\r\n                    children[i] = {\r\n                        type: 12 /* TEXT_CALL */,\r\n                        content: child,\r\n                        loc: child.loc,\r\n                        codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\n\nconst seen = new WeakSet();\r\nconst transformOnce = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ && findDir(node, 'once', true)) {\r\n        if (seen.has(node) || context.inVOnce) {\r\n            return;\r\n        }\r\n        seen.add(node);\r\n        context.inVOnce = true;\r\n        context.helper(SET_BLOCK_TRACKING);\r\n        return () => {\r\n            context.inVOnce = false;\r\n            const cur = context.currentNode;\r\n            if (cur.codegenNode) {\r\n                cur.codegenNode = context.cache(cur.codegenNode, true /* isVNode */);\r\n            }\r\n        };\r\n    }\r\n};\n\nconst transformModel = (dir, node, context) => {\r\n    const { exp, arg } = dir;\r\n    if (!exp) {\r\n        context.onError(createCompilerError(41 /* X_V_MODEL_NO_EXPRESSION */, dir.loc));\r\n        return createTransformProps();\r\n    }\r\n    const rawExp = exp.loc.source;\r\n    const expString = exp.type === 4 /* SIMPLE_EXPRESSION */ ? exp.content : rawExp;\r\n    // im SFC <script setup> inline mode, the exp may have been transformed into\r\n    // _unref(exp)\r\n    context.bindingMetadata[rawExp];\r\n    const maybeRef = !true    /* SETUP_CONST */;\r\n    if (!expString.trim() ||\r\n        (!isMemberExpression(expString) && !maybeRef)) {\r\n        context.onError(createCompilerError(42 /* X_V_MODEL_MALFORMED_EXPRESSION */, exp.loc));\r\n        return createTransformProps();\r\n    }\r\n    const propName = arg ? arg : createSimpleExpression('modelValue', true);\r\n    const eventName = arg\r\n        ? isStaticExp(arg)\r\n            ? `onUpdate:${arg.content}`\r\n            : createCompoundExpression(['\"onUpdate:\" + ', arg])\r\n        : `onUpdate:modelValue`;\r\n    let assignmentExp;\r\n    const eventArg = context.isTS ? `($event: any)` : `$event`;\r\n    {\r\n        assignmentExp = createCompoundExpression([\r\n            `${eventArg} => ((`,\r\n            exp,\r\n            `) = $event)`\r\n        ]);\r\n    }\r\n    const props = [\r\n        // modelValue: foo\r\n        createObjectProperty(propName, dir.exp),\r\n        // \"onUpdate:modelValue\": $event => (foo = $event)\r\n        createObjectProperty(eventName, assignmentExp)\r\n    ];\r\n    // modelModifiers: { foo: true, \"bar-baz\": true }\r\n    if (dir.modifiers.length && node.tagType === 1 /* COMPONENT */) {\r\n        const modifiers = dir.modifiers\r\n            .map(m => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`)\r\n            .join(`, `);\r\n        const modifiersKey = arg\r\n            ? isStaticExp(arg)\r\n                ? `${arg.content}Modifiers`\r\n                : createCompoundExpression([arg, ' + \"Modifiers\"'])\r\n            : `modelModifiers`;\r\n        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2 /* CAN_HOIST */)));\r\n    }\r\n    return createTransformProps(props);\r\n};\r\nfunction createTransformProps(props = []) {\r\n    return { props };\r\n}\n\nconst validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\nconst transformFilter = (node, context) => {\r\n    if (!isCompatEnabled(\"COMPILER_FILTER\" /* COMPILER_FILTERS */, context)) {\r\n        return;\r\n    }\r\n    if (node.type === 5 /* INTERPOLATION */) {\r\n        // filter rewrite is applied before expression transform so only\r\n        // simple expressions are possible at this stage\r\n        rewriteFilter(node.content, context);\r\n    }\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        node.props.forEach((prop) => {\r\n            if (prop.type === 7 /* DIRECTIVE */ &&\r\n                prop.name !== 'for' &&\r\n                prop.exp) {\r\n                rewriteFilter(prop.exp, context);\r\n            }\r\n        });\r\n    }\r\n};\r\nfunction rewriteFilter(node, context) {\r\n    if (node.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        parseFilter(node, context);\r\n    }\r\n    else {\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            const child = node.children[i];\r\n            if (typeof child !== 'object')\r\n                continue;\r\n            if (child.type === 4 /* SIMPLE_EXPRESSION */) {\r\n                parseFilter(child, context);\r\n            }\r\n            else if (child.type === 8 /* COMPOUND_EXPRESSION */) {\r\n                rewriteFilter(node, context);\r\n            }\r\n            else if (child.type === 5 /* INTERPOLATION */) {\r\n                rewriteFilter(child.content, context);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction parseFilter(node, context) {\r\n    const exp = node.content;\r\n    let inSingle = false;\r\n    let inDouble = false;\r\n    let inTemplateString = false;\r\n    let inRegex = false;\r\n    let curly = 0;\r\n    let square = 0;\r\n    let paren = 0;\r\n    let lastFilterIndex = 0;\r\n    let c, prev, i, expression, filters = [];\r\n    for (i = 0; i < exp.length; i++) {\r\n        prev = c;\r\n        c = exp.charCodeAt(i);\r\n        if (inSingle) {\r\n            if (c === 0x27 && prev !== 0x5c)\r\n                inSingle = false;\r\n        }\r\n        else if (inDouble) {\r\n            if (c === 0x22 && prev !== 0x5c)\r\n                inDouble = false;\r\n        }\r\n        else if (inTemplateString) {\r\n            if (c === 0x60 && prev !== 0x5c)\r\n                inTemplateString = false;\r\n        }\r\n        else if (inRegex) {\r\n            if (c === 0x2f && prev !== 0x5c)\r\n                inRegex = false;\r\n        }\r\n        else if (c === 0x7c && // pipe\r\n            exp.charCodeAt(i + 1) !== 0x7c &&\r\n            exp.charCodeAt(i - 1) !== 0x7c &&\r\n            !curly &&\r\n            !square &&\r\n            !paren) {\r\n            if (expression === undefined) {\r\n                // first filter, end of expression\r\n                lastFilterIndex = i + 1;\r\n                expression = exp.slice(0, i).trim();\r\n            }\r\n            else {\r\n                pushFilter();\r\n            }\r\n        }\r\n        else {\r\n            switch (c) {\r\n                case 0x22:\r\n                    inDouble = true;\r\n                    break; // \"\r\n                case 0x27:\r\n                    inSingle = true;\r\n                    break; // '\r\n                case 0x60:\r\n                    inTemplateString = true;\r\n                    break; // `\r\n                case 0x28:\r\n                    paren++;\r\n                    break; // (\r\n                case 0x29:\r\n                    paren--;\r\n                    break; // )\r\n                case 0x5b:\r\n                    square++;\r\n                    break; // [\r\n                case 0x5d:\r\n                    square--;\r\n                    break; // ]\r\n                case 0x7b:\r\n                    curly++;\r\n                    break; // {\r\n                case 0x7d:\r\n                    curly--;\r\n                    break; // }\r\n            }\r\n            if (c === 0x2f) {\r\n                // /\r\n                let j = i - 1;\r\n                let p;\r\n                // find first non-whitespace prev char\r\n                for (; j >= 0; j--) {\r\n                    p = exp.charAt(j);\r\n                    if (p !== ' ')\r\n                        break;\r\n                }\r\n                if (!p || !validDivisionCharRE.test(p)) {\r\n                    inRegex = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (expression === undefined) {\r\n        expression = exp.slice(0, i).trim();\r\n    }\r\n    else if (lastFilterIndex !== 0) {\r\n        pushFilter();\r\n    }\r\n    function pushFilter() {\r\n        filters.push(exp.slice(lastFilterIndex, i).trim());\r\n        lastFilterIndex = i + 1;\r\n    }\r\n    if (filters.length) {\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warnDeprecation(\"COMPILER_FILTER\" /* COMPILER_FILTERS */, context, node.loc);\r\n        for (i = 0; i < filters.length; i++) {\r\n            expression = wrapFilter(expression, filters[i], context);\r\n        }\r\n        node.content = expression;\r\n    }\r\n}\r\nfunction wrapFilter(exp, filter, context) {\r\n    context.helper(RESOLVE_FILTER);\r\n    const i = filter.indexOf('(');\r\n    if (i < 0) {\r\n        context.filters.add(filter);\r\n        return `${toValidAssetId(filter, 'filter')}(${exp})`;\r\n    }\r\n    else {\r\n        const name = filter.slice(0, i);\r\n        const args = filter.slice(i + 1);\r\n        context.filters.add(name);\r\n        return `${toValidAssetId(name, 'filter')}(${exp}${args !== ')' ? ',' + args : args}`;\r\n    }\r\n}\n\nconst seen$1 = new WeakSet();\r\nconst transformMemo = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        const dir = findDir(node, 'memo');\r\n        if (!dir || seen$1.has(node)) {\r\n            return;\r\n        }\r\n        seen$1.add(node);\r\n        return () => {\r\n            const codegenNode = node.codegenNode ||\r\n                context.currentNode.codegenNode;\r\n            if (codegenNode && codegenNode.type === 13 /* VNODE_CALL */) {\r\n                // non-component sub tree should be turned into a block\r\n                if (node.tagType !== 1 /* COMPONENT */) {\r\n                    makeBlock(codegenNode, context);\r\n                }\r\n                node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [\r\n                    dir.exp,\r\n                    createFunctionExpression(undefined, codegenNode),\r\n                    `_cache`,\r\n                    String(context.cached++)\r\n                ]);\r\n            }\r\n        };\r\n    }\r\n};\n\nfunction getBaseTransformPreset(prefixIdentifiers) {\r\n    return [\r\n        [\r\n            transformOnce,\r\n            transformIf,\r\n            transformMemo,\r\n            transformFor,\r\n            ...([transformFilter] ),\r\n            ...((process.env.NODE_ENV !== 'production')\r\n                    ? [transformExpression]\r\n                    : []),\r\n            transformSlotOutlet,\r\n            transformElement,\r\n            trackSlotScopes,\r\n            transformText\r\n        ],\r\n        {\r\n            on: transformOn,\r\n            bind: transformBind,\r\n            model: transformModel\r\n        }\r\n    ];\r\n}\r\n// we name it `baseCompile` so that higher order compilers like\r\n// @vue/compiler-dom can export `compile` while re-exporting everything else.\r\nfunction baseCompile(template, options = {}) {\r\n    const onError = options.onError || defaultOnError;\r\n    const isModuleMode = options.mode === 'module';\r\n    /* istanbul ignore if */\r\n    {\r\n        if (options.prefixIdentifiers === true) {\r\n            onError(createCompilerError(46 /* X_PREFIX_ID_NOT_SUPPORTED */));\r\n        }\r\n        else if (isModuleMode) {\r\n            onError(createCompilerError(47 /* X_MODULE_MODE_NOT_SUPPORTED */));\r\n        }\r\n    }\r\n    const prefixIdentifiers = !true ;\r\n    if (options.cacheHandlers) {\r\n        onError(createCompilerError(48 /* X_CACHE_HANDLER_NOT_SUPPORTED */));\r\n    }\r\n    if (options.scopeId && !isModuleMode) {\r\n        onError(createCompilerError(49 /* X_SCOPE_ID_NOT_SUPPORTED */));\r\n    }\r\n    const ast = isString(template) ? baseParse(template, options) : template;\r\n    const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();\r\n    transform(ast, extend({}, options, {\r\n        prefixIdentifiers,\r\n        nodeTransforms: [\r\n            ...nodeTransforms,\r\n            ...(options.nodeTransforms || []) // user transforms\r\n        ],\r\n        directiveTransforms: extend({}, directiveTransforms, options.directiveTransforms || {} // user transforms\r\n        )\r\n    }));\r\n    return generate(ast, extend({}, options, {\r\n        prefixIdentifiers\r\n    }));\r\n}\n\nconst noopDirectiveTransform = () => ({ props: [] });\n\nexport { BASE_TRANSITION, CAMELIZE, CAPITALIZE, CREATE_BLOCK, CREATE_COMMENT, CREATE_ELEMENT_BLOCK, CREATE_ELEMENT_VNODE, CREATE_SLOTS, CREATE_STATIC, CREATE_TEXT, CREATE_VNODE, FRAGMENT, GUARD_REACTIVE_PROPS, IS_MEMO_SAME, IS_REF, KEEP_ALIVE, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_PROPS, NORMALIZE_STYLE, OPEN_BLOCK, POP_SCOPE_ID, PUSH_SCOPE_ID, RENDER_LIST, RENDER_SLOT, RESOLVE_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_FILTER, SET_BLOCK_TRACKING, SUSPENSE, TELEPORT, TO_DISPLAY_STRING, TO_HANDLERS, TO_HANDLER_KEY, UNREF, WITH_CTX, WITH_DIRECTIVES, WITH_MEMO, advancePositionWithClone, advancePositionWithMutation, assert, baseCompile, baseParse, buildProps, buildSlots, checkCompatEnabled, createArrayExpression, createAssignmentExpression, createBlockStatement, createCacheExpression, createCallExpression, createCompilerError, createCompoundExpression, createConditionalExpression, createForLoopParams, createFunctionExpression, createIfStatement, createInterpolation, createObjectExpression, createObjectProperty, createReturnStatement, createRoot, createSequenceExpression, createSimpleExpression, createStructuralDirectiveTransform, createTemplateLiteral, createTransformContext, createVNodeCall, extractIdentifiers, findDir, findProp, generate, getBaseTransformPreset, getInnerRange, getMemoedVNodeCall, getVNodeBlockHelper, getVNodeHelper, hasDynamicKeyVBind, hasScopeRef, helperNameMap, injectProp, isBindKey, isBuiltInType, isCoreComponent, isFunctionType, isInDestructureAssignment, isMemberExpression, isMemberExpressionBrowser, isMemberExpressionNode, isReferencedIdentifier, isSimpleIdentifier, isSlotOutlet, isStaticExp, isStaticProperty, isStaticPropertyKey, isTemplateNode, isText, isVSlot, locStub, makeBlock, noopDirectiveTransform, processExpression, processFor, processIf, processSlotOutlet, registerRuntimeHelpers, resolveComponentType, toValidAssetId, trackSlotScopes, trackVForSlotScopes, transform, transformBind, transformElement, transformExpression, transformModel, transformOn, traverseNode, walkBlockDeclarations, walkFunctionParams, walkIdentifiers, warnDeprecation };\n", "import { registerRuntimeHelpers, isBuiltInType, createSimpleExpression, createCompilerError, createObjectProperty, createCallExpression, TO_DISPLAY_STRING, transformModel as transformModel$1, findProp, hasDynamicKeyVBind, transformOn as transformOn$1, createCompoundExpression, isStaticExp, checkCompatEnabled, noopDirectiveTransform, baseCompile, baseParse } from '@vue/compiler-core';\nexport * from '@vue/compiler-core';\nimport { isVoidTag, isHTMLTag, isSVGTag, makeMap, parseStringStyle, capitalize, extend } from '@vue/shared';\n\nconst V_MODEL_RADIO = Symbol((process.env.NODE_ENV !== 'production') ? `vModelRadio` : ``);\r\nconst V_MODEL_CHECKBOX = Symbol((process.env.NODE_ENV !== 'production') ? `vModelCheckbox` : ``);\r\nconst V_MODEL_TEXT = Symbol((process.env.NODE_ENV !== 'production') ? `vModelText` : ``);\r\nconst V_MODEL_SELECT = Symbol((process.env.NODE_ENV !== 'production') ? `vModelSelect` : ``);\r\nconst V_MODEL_DYNAMIC = Symbol((process.env.NODE_ENV !== 'production') ? `vModelDynamic` : ``);\r\nconst V_ON_WITH_MODIFIERS = Symbol((process.env.NODE_ENV !== 'production') ? `vOnModifiersGuard` : ``);\r\nconst V_ON_WITH_KEYS = Symbol((process.env.NODE_ENV !== 'production') ? `vOnKeysGuard` : ``);\r\nconst V_SHOW = Symbol((process.env.NODE_ENV !== 'production') ? `vShow` : ``);\r\nconst TRANSITION = Symbol((process.env.NODE_ENV !== 'production') ? `Transition` : ``);\r\nconst TRANSITION_GROUP = Symbol((process.env.NODE_ENV !== 'production') ? `TransitionGroup` : ``);\r\nregisterRuntimeHelpers({\r\n    [V_MODEL_RADIO]: `vModelRadio`,\r\n    [V_MODEL_CHECKBOX]: `vModelCheckbox`,\r\n    [V_MODEL_TEXT]: `vModelText`,\r\n    [V_MODEL_SELECT]: `vModelSelect`,\r\n    [V_MODEL_DYNAMIC]: `vModelDynamic`,\r\n    [V_ON_WITH_MODIFIERS]: `withModifiers`,\r\n    [V_ON_WITH_KEYS]: `withKeys`,\r\n    [V_SHOW]: `vShow`,\r\n    [TRANSITION]: `Transition`,\r\n    [TRANSITION_GROUP]: `TransitionGroup`\r\n});\n\n/* eslint-disable no-restricted-globals */\r\nlet decoder;\r\nfunction decodeHtmlBrowser(raw, asAttr = false) {\r\n    if (!decoder) {\r\n        decoder = document.createElement('div');\r\n    }\r\n    if (asAttr) {\r\n        decoder.innerHTML = `<div foo=\"${raw.replace(/\"/g, '&quot;')}\">`;\r\n        return decoder.children[0].getAttribute('foo');\r\n    }\r\n    else {\r\n        decoder.innerHTML = raw;\r\n        return decoder.textContent;\r\n    }\r\n}\n\nconst isRawTextContainer = /*#__PURE__*/ makeMap('style,iframe,script,noscript', true);\r\nconst parserOptions = {\r\n    isVoidTag,\r\n    isNativeTag: tag => isHTMLTag(tag) || isSVGTag(tag),\r\n    isPreTag: tag => tag === 'pre',\r\n    decodeEntities: decodeHtmlBrowser ,\r\n    isBuiltInComponent: (tag) => {\r\n        if (isBuiltInType(tag, `Transition`)) {\r\n            return TRANSITION;\r\n        }\r\n        else if (isBuiltInType(tag, `TransitionGroup`)) {\r\n            return TRANSITION_GROUP;\r\n        }\r\n    },\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher\r\n    getNamespace(tag, parent) {\r\n        let ns = parent ? parent.ns : 0 /* HTML */;\r\n        if (parent && ns === 2 /* MATH_ML */) {\r\n            if (parent.tag === 'annotation-xml') {\r\n                if (tag === 'svg') {\r\n                    return 1 /* SVG */;\r\n                }\r\n                if (parent.props.some(a => a.type === 6 /* ATTRIBUTE */ &&\r\n                    a.name === 'encoding' &&\r\n                    a.value != null &&\r\n                    (a.value.content === 'text/html' ||\r\n                        a.value.content === 'application/xhtml+xml'))) {\r\n                    ns = 0 /* HTML */;\r\n                }\r\n            }\r\n            else if (/^m(?:[ions]|text)$/.test(parent.tag) &&\r\n                tag !== 'mglyph' &&\r\n                tag !== 'malignmark') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        else if (parent && ns === 1 /* SVG */) {\r\n            if (parent.tag === 'foreignObject' ||\r\n                parent.tag === 'desc' ||\r\n                parent.tag === 'title') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === 'svg') {\r\n                return 1 /* SVG */;\r\n            }\r\n            if (tag === 'math') {\r\n                return 2 /* MATH_ML */;\r\n            }\r\n        }\r\n        return ns;\r\n    },\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments\r\n    getTextMode({ tag, ns }) {\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === 'textarea' || tag === 'title') {\r\n                return 1 /* RCDATA */;\r\n            }\r\n            if (isRawTextContainer(tag)) {\r\n                return 2 /* RAWTEXT */;\r\n            }\r\n        }\r\n        return 0 /* DATA */;\r\n    }\r\n};\n\n// Parse inline CSS strings for static style attributes into an object.\r\n// This is a NodeTransform since it works on the static `style` attribute and\r\n// converts it into a dynamic equivalent:\r\n// style=\"color: red\" -> :style='{ \"color\": \"red\" }'\r\n// It is then processed by `transformElement` and included in the generated\r\n// props.\r\nconst transformStyle = node => {\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        node.props.forEach((p, i) => {\r\n            if (p.type === 6 /* ATTRIBUTE */ && p.name === 'style' && p.value) {\r\n                // replace p with an expression node\r\n                node.props[i] = {\r\n                    type: 7 /* DIRECTIVE */,\r\n                    name: `bind`,\r\n                    arg: createSimpleExpression(`style`, true, p.loc),\r\n                    exp: parseInlineCSS(p.value.content, p.loc),\r\n                    modifiers: [],\r\n                    loc: p.loc\r\n                };\r\n            }\r\n        });\r\n    }\r\n};\r\nconst parseInlineCSS = (cssText, loc) => {\r\n    const normalized = parseStringStyle(cssText);\r\n    return createSimpleExpression(JSON.stringify(normalized), false, loc, 3 /* CAN_STRINGIFY */);\r\n};\n\nfunction createDOMCompilerError(code, loc) {\r\n    return createCompilerError(code, loc, (process.env.NODE_ENV !== 'production') || !true ? DOMErrorMessages : undefined);\r\n}\r\nconst DOMErrorMessages = {\r\n    [50 /* X_V_HTML_NO_EXPRESSION */]: `v-html is missing expression.`,\r\n    [51 /* X_V_HTML_WITH_CHILDREN */]: `v-html will override element children.`,\r\n    [52 /* X_V_TEXT_NO_EXPRESSION */]: `v-text is missing expression.`,\r\n    [53 /* X_V_TEXT_WITH_CHILDREN */]: `v-text will override element children.`,\r\n    [54 /* X_V_MODEL_ON_INVALID_ELEMENT */]: `v-model can only be used on <input>, <textarea> and <select> elements.`,\r\n    [55 /* X_V_MODEL_ARG_ON_ELEMENT */]: `v-model argument is not supported on plain elements.`,\r\n    [56 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,\r\n    [57 /* X_V_MODEL_UNNECESSARY_VALUE */]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,\r\n    [58 /* X_V_SHOW_NO_EXPRESSION */]: `v-show is missing expression.`,\r\n    [59 /* X_TRANSITION_INVALID_CHILDREN */]: `<Transition> expects exactly one child element or component.`,\r\n    [60 /* X_IGNORED_SIDE_EFFECT_TAG */]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`\r\n};\n\nconst transformVHtml = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(50 /* X_V_HTML_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(51 /* X_V_HTML_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression('', true))\r\n        ]\r\n    };\r\n};\n\nconst transformVText = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(52 /* X_V_TEXT_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(53 /* X_V_TEXT_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`textContent`, true), exp\r\n                ? createCallExpression(context.helperString(TO_DISPLAY_STRING), [exp], loc)\r\n                : createSimpleExpression('', true))\r\n        ]\r\n    };\r\n};\n\nconst transformModel = (dir, node, context) => {\r\n    const baseResult = transformModel$1(dir, node, context);\r\n    // base transform has errors OR component v-model (only need props)\r\n    if (!baseResult.props.length || node.tagType === 1 /* COMPONENT */) {\r\n        return baseResult;\r\n    }\r\n    if (dir.arg) {\r\n        context.onError(createDOMCompilerError(55 /* X_V_MODEL_ARG_ON_ELEMENT */, dir.arg.loc));\r\n    }\r\n    function checkDuplicatedValue() {\r\n        const value = findProp(node, 'value');\r\n        if (value) {\r\n            context.onError(createDOMCompilerError(57 /* X_V_MODEL_UNNECESSARY_VALUE */, value.loc));\r\n        }\r\n    }\r\n    const { tag } = node;\r\n    const isCustomElement = context.isCustomElement(tag);\r\n    if (tag === 'input' ||\r\n        tag === 'textarea' ||\r\n        tag === 'select' ||\r\n        isCustomElement) {\r\n        let directiveToUse = V_MODEL_TEXT;\r\n        let isInvalidType = false;\r\n        if (tag === 'input' || isCustomElement) {\r\n            const type = findProp(node, `type`);\r\n            if (type) {\r\n                if (type.type === 7 /* DIRECTIVE */) {\r\n                    // :type=\"foo\"\r\n                    directiveToUse = V_MODEL_DYNAMIC;\r\n                }\r\n                else if (type.value) {\r\n                    switch (type.value.content) {\r\n                        case 'radio':\r\n                            directiveToUse = V_MODEL_RADIO;\r\n                            break;\r\n                        case 'checkbox':\r\n                            directiveToUse = V_MODEL_CHECKBOX;\r\n                            break;\r\n                        case 'file':\r\n                            isInvalidType = true;\r\n                            context.onError(createDOMCompilerError(56 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */, dir.loc));\r\n                            break;\r\n                        default:\r\n                            // text type\r\n                            (process.env.NODE_ENV !== 'production') && checkDuplicatedValue();\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            else if (hasDynamicKeyVBind(node)) {\r\n                // element has bindings with dynamic keys, which can possibly contain\r\n                // \"type\".\r\n                directiveToUse = V_MODEL_DYNAMIC;\r\n            }\r\n            else {\r\n                // text type\r\n                (process.env.NODE_ENV !== 'production') && checkDuplicatedValue();\r\n            }\r\n        }\r\n        else if (tag === 'select') {\r\n            directiveToUse = V_MODEL_SELECT;\r\n        }\r\n        else {\r\n            // textarea\r\n            (process.env.NODE_ENV !== 'production') && checkDuplicatedValue();\r\n        }\r\n        // inject runtime directive\r\n        // by returning the helper symbol via needRuntime\r\n        // the import will replaced a resolveDirective call.\r\n        if (!isInvalidType) {\r\n            baseResult.needRuntime = context.helper(directiveToUse);\r\n        }\r\n    }\r\n    else {\r\n        context.onError(createDOMCompilerError(54 /* X_V_MODEL_ON_INVALID_ELEMENT */, dir.loc));\r\n    }\r\n    // native vmodel doesn't need the `modelValue` props since they are also\r\n    // passed to the runtime as `binding.value`. removing it reduces code size.\r\n    baseResult.props = baseResult.props.filter(p => !(p.key.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n        p.key.content === 'modelValue'));\r\n    return baseResult;\r\n};\n\nconst isEventOptionModifier = /*#__PURE__*/ makeMap(`passive,once,capture`);\r\nconst isNonKeyModifier = /*#__PURE__*/ makeMap(\r\n// event propagation management\r\n`stop,prevent,self,` +\r\n    // system modifiers + exact\r\n    `ctrl,shift,alt,meta,exact,` +\r\n    // mouse\r\n    `middle`);\r\n// left & right could be mouse or key modifiers based on event type\r\nconst maybeKeyModifier = /*#__PURE__*/ makeMap('left,right');\r\nconst isKeyboardEvent = /*#__PURE__*/ makeMap(`onkeyup,onkeydown,onkeypress`, true);\r\nconst resolveModifiers = (key, modifiers, context, loc) => {\r\n    const keyModifiers = [];\r\n    const nonKeyModifiers = [];\r\n    const eventOptionModifiers = [];\r\n    for (let i = 0; i < modifiers.length; i++) {\r\n        const modifier = modifiers[i];\r\n        if (modifier === 'native' &&\r\n            checkCompatEnabled(\"COMPILER_V_ON_NATIVE\" /* COMPILER_V_ON_NATIVE */, context, loc)) {\r\n            eventOptionModifiers.push(modifier);\r\n        }\r\n        else if (isEventOptionModifier(modifier)) {\r\n            // eventOptionModifiers: modifiers for addEventListener() options,\r\n            // e.g. .passive & .capture\r\n            eventOptionModifiers.push(modifier);\r\n        }\r\n        else {\r\n            // runtimeModifiers: modifiers that needs runtime guards\r\n            if (maybeKeyModifier(modifier)) {\r\n                if (isStaticExp(key)) {\r\n                    if (isKeyboardEvent(key.content)) {\r\n                        keyModifiers.push(modifier);\r\n                    }\r\n                    else {\r\n                        nonKeyModifiers.push(modifier);\r\n                    }\r\n                }\r\n                else {\r\n                    keyModifiers.push(modifier);\r\n                    nonKeyModifiers.push(modifier);\r\n                }\r\n            }\r\n            else {\r\n                if (isNonKeyModifier(modifier)) {\r\n                    nonKeyModifiers.push(modifier);\r\n                }\r\n                else {\r\n                    keyModifiers.push(modifier);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        keyModifiers,\r\n        nonKeyModifiers,\r\n        eventOptionModifiers\r\n    };\r\n};\r\nconst transformClick = (key, event) => {\r\n    const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === 'onclick';\r\n    return isStaticClick\r\n        ? createSimpleExpression(event, true)\r\n        : key.type !== 4 /* SIMPLE_EXPRESSION */\r\n            ? createCompoundExpression([\r\n                `(`,\r\n                key,\r\n                `) === \"onClick\" ? \"${event}\" : (`,\r\n                key,\r\n                `)`\r\n            ])\r\n            : key;\r\n};\r\nconst transformOn = (dir, node, context) => {\r\n    return transformOn$1(dir, node, context, baseResult => {\r\n        const { modifiers } = dir;\r\n        if (!modifiers.length)\r\n            return baseResult;\r\n        let { key, value: handlerExp } = baseResult.props[0];\r\n        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);\r\n        // normalize click.right and click.middle since they don't actually fire\r\n        if (nonKeyModifiers.includes('right')) {\r\n            key = transformClick(key, `onContextmenu`);\r\n        }\r\n        if (nonKeyModifiers.includes('middle')) {\r\n            key = transformClick(key, `onMouseup`);\r\n        }\r\n        if (nonKeyModifiers.length) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [\r\n                handlerExp,\r\n                JSON.stringify(nonKeyModifiers)\r\n            ]);\r\n        }\r\n        if (keyModifiers.length &&\r\n            // if event name is dynamic, always wrap with keys guard\r\n            (!isStaticExp(key) || isKeyboardEvent(key.content))) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [\r\n                handlerExp,\r\n                JSON.stringify(keyModifiers)\r\n            ]);\r\n        }\r\n        if (eventOptionModifiers.length) {\r\n            const modifierPostfix = eventOptionModifiers.map(capitalize).join('');\r\n            key = isStaticExp(key)\r\n                ? createSimpleExpression(`${key.content}${modifierPostfix}`, true)\r\n                : createCompoundExpression([`(`, key, `) + \"${modifierPostfix}\"`]);\r\n        }\r\n        return {\r\n            props: [createObjectProperty(key, handlerExp)]\r\n        };\r\n    });\r\n};\n\nconst transformShow = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(58 /* X_V_SHOW_NO_EXPRESSION */, loc));\r\n    }\r\n    return {\r\n        props: [],\r\n        needRuntime: context.helper(V_SHOW)\r\n    };\r\n};\n\nconst warnTransitionChildren = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 1 /* COMPONENT */) {\r\n        const component = context.isBuiltInComponent(node.tag);\r\n        if (component === TRANSITION) {\r\n            return () => {\r\n                if (node.children.length && hasMultipleChildren(node)) {\r\n                    context.onError(createDOMCompilerError(59 /* X_TRANSITION_INVALID_CHILDREN */, {\r\n                        start: node.children[0].loc.start,\r\n                        end: node.children[node.children.length - 1].loc.end,\r\n                        source: ''\r\n                    }));\r\n                }\r\n            };\r\n        }\r\n    }\r\n};\r\nfunction hasMultipleChildren(node) {\r\n    // #1352 filter out potential comment nodes.\r\n    const children = (node.children = node.children.filter(c => c.type !== 3 /* COMMENT */ &&\r\n        !(c.type === 2 /* TEXT */ && !c.content.trim())));\r\n    const child = children[0];\r\n    return (children.length !== 1 ||\r\n        child.type === 11 /* FOR */ ||\r\n        (child.type === 9 /* IF */ && child.branches.some(hasMultipleChildren)));\r\n}\n\nconst ignoreSideEffectTags = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 0 /* ELEMENT */ &&\r\n        (node.tag === 'script' || node.tag === 'style')) {\r\n        context.onError(createDOMCompilerError(60 /* X_IGNORED_SIDE_EFFECT_TAG */, node.loc));\r\n        context.removeNode();\r\n    }\r\n};\n\nconst DOMNodeTransforms = [\r\n    transformStyle,\r\n    ...((process.env.NODE_ENV !== 'production') ? [warnTransitionChildren] : [])\r\n];\r\nconst DOMDirectiveTransforms = {\r\n    cloak: noopDirectiveTransform,\r\n    html: transformVHtml,\r\n    text: transformVText,\r\n    model: transformModel,\r\n    on: transformOn,\r\n    show: transformShow\r\n};\r\nfunction compile(template, options = {}) {\r\n    return baseCompile(template, extend({}, parserOptions, options, {\r\n        nodeTransforms: [\r\n            // ignore <script> and <tag>\r\n            // this is not put inside DOMNodeTransforms because that list is used\r\n            // by compiler-ssr to generate vnode fallback branches\r\n            ignoreSideEffectTags,\r\n            ...DOMNodeTransforms,\r\n            ...(options.nodeTransforms || [])\r\n        ],\r\n        directiveTransforms: extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),\r\n        transformHoist: null \r\n    }));\r\n}\r\nfunction parse(template, options = {}) {\r\n    return baseParse(template, extend({}, parserOptions, options));\r\n}\n\nexport { DOMDirectiveTransforms, DOMNodeTransforms, TRANSITION, TRANSITION_GROUP, V_MODEL_CHECKBOX, V_MODEL_DYNAMIC, V_MODEL_RADIO, V_MODEL_SELECT, V_MODEL_TEXT, V_ON_WITH_KEYS, V_ON_WITH_MODIFIERS, V_SHOW, compile, createDOMCompilerError, parse, parserOptions, transformStyle };\n", "import * as runtimeDom from '@vue/runtime-dom';\nimport { initCustomFormatter, warn, registerRuntimeCompiler } from '@vue/runtime-dom';\nexport * from '@vue/runtime-dom';\nimport { compile } from '@vue/compiler-dom';\nimport { isString, NOOP, extend, generateCodeFrame } from '@vue/shared';\n\nfunction initDev() {\r\n    {\r\n        initCustomFormatter();\r\n    }\r\n}\n\n// This entry is the \"full-build\" that includes both the runtime\r\nif ((process.env.NODE_ENV !== 'production')) {\r\n    initDev();\r\n}\r\nconst compileCache = Object.create(null);\r\nfunction compileToFunction(template, options) {\r\n    if (!isString(template)) {\r\n        if (template.nodeType) {\r\n            template = template.innerHTML;\r\n        }\r\n        else {\r\n            (process.env.NODE_ENV !== 'production') && warn(`invalid template option: `, template);\r\n            return NOOP;\r\n        }\r\n    }\r\n    const key = template;\r\n    const cached = compileCache[key];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    if (template[0] === '#') {\r\n        const el = document.querySelector(template);\r\n        if ((process.env.NODE_ENV !== 'production') && !el) {\r\n            warn(`Template element not found or is empty: ${template}`);\r\n        }\r\n        // __UNSAFE__\r\n        // Reason: potential execution of JS expressions in in-DOM template.\r\n        // The user must make sure the in-DOM template is trusted. If it's rendered\r\n        // by the server, the template should not contain any user data.\r\n        template = el ? el.innerHTML : ``;\r\n    }\r\n    const { code } = compile(template, extend({\r\n        hoistStatic: true,\r\n        onError: (process.env.NODE_ENV !== 'production') ? onError : undefined,\r\n        onWarn: (process.env.NODE_ENV !== 'production') ? e => onError(e, true) : NOOP\r\n    }, options));\r\n    function onError(err, asWarning = false) {\r\n        const message = asWarning\r\n            ? err.message\r\n            : `Template compilation error: ${err.message}`;\r\n        const codeFrame = err.loc &&\r\n            generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);\r\n        warn(codeFrame ? `${message}\\n${codeFrame}` : message);\r\n    }\r\n    // The wildcard import results in a huge object with every export\r\n    // with keys that cannot be mangled, and can be quite heavy size-wise.\r\n    // In the global build we know `Vue` is available globally so we can avoid\r\n    // the wildcard object.\r\n    const render = (new Function('Vue', code)(runtimeDom));\r\n    render._rc = true;\r\n    return (compileCache[key] = render);\r\n}\r\nregisterRuntimeCompiler(compileToFunction);\n\nexport { compileToFunction as compile };\n"],
  "mappings": "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CF,kCACE;MACF,6BACE;MACF,mCACE;MACF,kCACE;MACF,uBAAuB;MACvB,0BAA0B;MAC1B,mBAAmB;MACnB,kBAAkB;MAClB,kBAAkB;MAClB,kCACE;MACF,mBACE;MACF,uBACE;MACF,4BACE;MACF,uBACE;MACF,WAAW;MACX,oBAAoB;MACpB,kBAAkB;MAElB,mBACE;MACF,4BACE;MACF,kBACE;MACF,4BACE;MACF,iBACE;MACF,yBACE;MAMF,qBACE;MACF,gCACE;MACF,gCACE;MACF,qBACE;MACF,wBACE;MACF,mCACE;MAEF,qBACE;MACF,0BAA0B;MAC1B,2CACE;MACF,6CACE;MACF,8CACE;MACF,eAAe;MACf,mBAAmB;MACnB,gBACE;MACF,iBAAiB;MACjB,cAAc;MACd,qBAAqB;MACrB,4BAA4B;MAC5B,gBACE;MACF,qBACE;MACF,oBAAoB;MACpB,YAAY;MACZ,iBACE;MACF,mBAAmB;MACnB,mBAAmB;MACnB,0CACE;MACF,4CACE;MACF,6CACE;MACF,+BAA+B;MAC/B,kCACE;MACF,0BAA0B;MAC1B,wBACE;MACF,mBAAmB;MACnB,4BACE;MACF,8BACE;MACF,qBACE;MACF,4BACE;MACF,wBACE;MACF,wBAAwB;MACxB,iBAAiB;MACjB,iBAAiB;MACjB,oCACE;MACF,iBAAiB;MACjB,4BACE;MACF,0BACE;MACF,mBACE;MACF,yBAAyB;MACzB,+BACE;MACF,8BACE;MACF,kBACE;MACF,qBAAqB;MACrB,oBAAoB;MACpB,oBAAoB;MACpB,sBAAsB;MACtB,kBAAkB;MAClB,wBACE;MACF,kBAAkB;MAClB,2BACE;OAEO,WAAW;AAGjB,QAAM,gCAAgC,mBAC3C;MACE,yBAA0B;MAC1B,qBAAsB;OAEb,WAAW;AC/NxB,kCAA8B,YAAoB,cAA4B;AACzC;AAEjC,YAAI,iBAAiB,UAAU,eAAe,qBAAqB;AACjE,iBAAO;;;AAGX,aAAO;;AAGF,gCACL,UAGA,MACA,cACgB;AAChB,YAAM,YAA4B;AAClC,aAAO,KAAK,UAAU,QAAQ,gBAAc;AAC1C,kBAAU,cAAc,OA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GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,MAAK,OAAM,IAAG,MAAK,GAAE,KAAI,GAAE,MAAK,IAAG,MAAK,MAAK,KAAI,MAAK;AAEl6C,QAAM,wBAAwB,CAAC,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,IAAG,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,G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AYpB,QAAM,WAAW,mBACf;MACE,iCACE;MACF,gCACE;MACF,mCACE;MACF,iCAAiC;MACjC,uBAAuB;MACvB,wBACE;MACF,8BACE;MACF,iBAAiB;MACjB,iCACE;MACF,kCACE;MACF,gCAAgC;MAChC,mBAAmB;MACnB,yBAAyB;MACzB,oBAAoB;MACpB,qBAAqB;MACrB,mCACE;MACF,0BAA0B;MAC1B,uBAAuB;MACvB,2BACE;MACF,gCACE;MACF,0BACE;MACF,2BACE;MACF,yBACE;MACF,6BACE;MACF,uBAAuB;MACvB,yBACE;MACF,sBACE;MACF,kCACE;MACF,mCACE;MACF,0CACE;MACF,4BACE;MACF,uBACE;MACF,mBACE;MACF,2BACE;MACF,gCACE;MACF,4BACE;MACF,uCACE;MACF,mCACE;MACF,gCACE;MACF,+BACE;MACF,2BACE;MACF,wCACE;MACF,6BACE;MACF,oBACE;MACF,0BAA0B;MAC1B,+BACE;MACF,+BACE;MACF,kCACE;MACF,mCACE;OAEO,WAAW,aACH;AAMrB,iCACE,OACwC;AACxC,cAAQ;aACD;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;aACJ;AACH,iBAAO;;AAEP,iBAAO;;;AAIb,gCAA4B,UAAmC;AAC7D,aACE,aAAa,aAAa,aAAa,YAAY,aAAa;;AAIpE,QAAA,aAAgB,gBACd,cAAc,WAAW;MACvB,kBAAiD;AAC/C,eAAO;;MAGT,iBAA0B;AAGxB,eAAO,KAAK,MAAL;;MAGT,2BAA2B;AACzB,eACG,MAAK,MAAL,MACC,KAAK,MAAL,OACA,KAAK,MAAL,OACA,KAAK,MAAL,OACA,KAAK,MAAL,MACA,KAAK,4BACP,CAAC,KAAK;;MAIV,+BAA+B;AAK7B,aAAK;AACL,eAAO,KAAK;;MAId,gBACE,kBACA,+BACI;AACJ,YAAI,CAAC,KAAK,MAAL,IAAqB;AACxB,iBAAO;;AAGT,cAAM,WAAW,KAAK,MAAM;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",
  "names": []
}
